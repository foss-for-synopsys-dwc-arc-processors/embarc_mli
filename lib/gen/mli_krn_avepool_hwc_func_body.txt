    mli_status ret = MLI_CHECK_STATUS(mli_chk_avepool_hwc_$datatype(in, cfg, out), __func__);
    if (ret != MLI_STATUS_OK)
        return ret;

    // Extract general avepool parameters
    int stride_width = cfg->stride_width;
    int stride_height = cfg->stride_height;
    int padding_top = cfg->padding_top;
    int padding_bot = cfg->padding_bottom;
    int padding_left = cfg->padding_left;
    int padding_right = cfg->padding_right;
    int channels_num = in->shape[FMAP_C_DIM_HWC];
    int kernel_height = cfg->kernel_height;
    int kernel_width = cfg->kernel_width;
    // assign hard coded values for this variation to some variables
#if $stride_w
    MLI_CHECK_AND_FIX(stride_width, $stride_w);
#endif
#if $stride_h
    MLI_CHECK_AND_FIX(stride_height, $stride_h);
#endif
#if $kernelpadding
    MLI_CHECK_AND_FIX(padding_top, $padding_top);
    MLI_CHECK_AND_FIX(padding_bot, $padding_bot);
    MLI_CHECK_AND_FIX(padding_left, $padding_left);
    MLI_CHECK_AND_FIX(padding_right, $padding_right);
#endif
#if $kernel_w
    MLI_CHECK_AND_FIX(kernel_width, $kernel_w);
#endif
#if $kernel_h
    MLI_CHECK_AND_FIX(kernel_height, $kernel_h);
#endif
#if $channels
    MLI_CHECK_AND_FIX(channels_num, $channels);
#endif

    // Data pointers
    MLI_PTR($d_type) in_ftrs = (MLI_PTR($d_type ))in->data;
    MLI_OUT_PTR($d_type) out_ftrs = (MLI_OUT_PTR($d_type ))out->data;

    // Define Data dimensions
    const int in_height = in->shape[FMAP_H_DIM_HWC];
    const int in_width = in->shape[FMAP_W_DIM_HWC];

    const int out_width = CEIL_DIV(in_width + padding_left + padding_right - kernel_width + 1, stride_width);
    const int out_height = CEIL_DIV(in_height + padding_top + padding_bot - kernel_height + 1, stride_height);

    const int row_beg = 0;
    const int row_end = out_height;
    const int clmn_beg = 0;
    const int clmn_end = out_width;

    mli_prv_fx_init_dsp_ctrl();

    $core_name(
        row_beg, row_end,
        clmn_beg, clmn_end,
        in_ftrs, out_ftrs,
        channels_num, in_width, in_height,
        out_width, out_height,
        kernel_height, kernel_width,
        stride_height, stride_width,
        padding_top, padding_left, padding_right, padding_bot);

    // fill output tensor parameters
    out->el_type = in->el_type;
    out->rank = in->rank;
    out->shape[FMAP_H_DIM_HWC] = out_height;
    out->shape[FMAP_W_DIM_HWC] = out_width;
    out->shape[FMAP_C_DIM_HWC] = channels_num;
    out->el_params.$el_params = in->el_params.$el_params;

    return MLI_STATUS_OK;
}
