    mli_status ret = MLI_CHECK_STATUS(mli_chk_depthwise_conv2d_hwcn_$datatype(in, weights, bias, cfg, out), __func__);
    if (ret != MLI_STATUS_OK)
        return ret;

    mli_prv_fx_init_dsp_ctrl();

    // Extract general conv2D parameters
    int stride_width = cfg->stride_width;
    int stride_height = cfg->stride_height;
    int padding_top = cfg->padding_top;
    int padding_bot = cfg->padding_bottom;
    int padding_left = cfg->padding_left;
    int padding_right = cfg->padding_right;

    // Define Data dimensions
    const auto in_prv = mli_prv_get_tensor_hwc<MLI_PTR($d_type)>(in,
            $channels); // channels
    const auto w = mli_prv_get_conv2d_weights_tensor_1hwn<MLI_PTR($w_type)>(
            weights,
            $kernel_w,  // kernel_width
            $kernel_h); // kernel_height

    // assign hard coded values for this variation to some variables
#if $stride_w
    MLI_CHECK_AND_FIX(stride_width, $stride_w);
#endif
#if $stride_h
    MLI_CHECK_AND_FIX(stride_height, $stride_h);
#endif
#if $kernelpadding
    MLI_CHECK_AND_FIX(padding_top, $padding_top);
    MLI_CHECK_AND_FIX(padding_bot, $padding_bot);
    MLI_CHECK_AND_FIX(padding_left, $padding_left);
    MLI_CHECK_AND_FIX(padding_right, $padding_right);
#endif

    mli_minmax_t val_limit;
    // fill output tensor el_type parameter
    out->el_type = $d_enum_type;
    // Define output val limits - we need it in case built-in RELU
    val_limit = mli_prv_get_relu_min_max(&cfg->relu, out);

    // Data pointers
    MLI_PTR($b_type) bs = (MLI_PTR($b_type ))bias->data;

     // Define Data dimensions
    int out_width = CEIL_DIV(in_prv.width + padding_left + padding_right - w.kernel_width + 1, stride_width);
    int out_height = CEIL_DIV(in_prv.height + padding_top + padding_bot - w.kernel_height + 1, stride_height);

    // fill output tensor parameters
    out->rank = in->rank;
    out->shape[FMAP_C_DIM_HWC] = w.out_ch;
    out->shape[FMAP_H_DIM_HWC] = out_height;
    out->shape[FMAP_W_DIM_HWC] = out_width;
    const auto out_prv = mli_prv_get_tensor_hwc<MLI_CONV_OUT_PTR($d_type)>(out);

    // Define quantization specific params
    s8asym_quant_specific_params params;
    define_quant_params(in, weights, bias, out, &params);

    //=======================================================================
    rect_t cent_area;
    cent_area.row_beg = 0;
    cent_area.row_end = out_height;
    cent_area.clmn_beg = 0;
    cent_area.clmn_end = out_width;

    $core_name<$d_type, $w_type, $b_type, int32_t>(
            in_prv, w, bs, out_prv, &cent_area, params,
            (int8_t)val_limit.min, (int8_t)val_limit.max,
            stride_height, stride_width, padding_top, padding_left, padding_bot, padding_right);

    return MLI_STATUS_OK;
}
