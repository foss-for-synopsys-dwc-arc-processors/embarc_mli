    mli_status ret = MLI_CHECK_STATUS(mli_chk_maxpool_chw_$datatype(in, cfg, out), __func__);
    if (ret != MLI_STATUS_OK)
        return ret;

    // Extract general maxpool parameters
    int32_t stride_width = cfg->stride_width;
    int32_t stride_height = cfg->stride_height;
    int32_t padding_top = cfg->padding_top;
    int32_t padding_bot = cfg->padding_bottom;
    int32_t padding_left = cfg->padding_left;
    int32_t padding_right = cfg->padding_right;
    int32_t kernel_height = cfg->kernel_height;
    int32_t kernel_width = cfg->kernel_width;

    // Define Data dimensions
    auto in_prv = mli_prv_get_tensor_chw<MLI_PTR($d_type)>(in,
            $channels); // channels

    // assign hard coded values for this variation to some variables
#if $stride_w
    MLI_CHECK_AND_FIX(stride_width, $stride_w);
#endif
#if $stride_h
    MLI_CHECK_AND_FIX(stride_height, $stride_h);
#endif
#if $kernelpadding
    MLI_CHECK_AND_FIX(padding_top, $padding_top);
    MLI_CHECK_AND_FIX(padding_bot, $padding_bot);
    MLI_CHECK_AND_FIX(padding_left, $padding_left);
    MLI_CHECK_AND_FIX(padding_right, $padding_right);
#endif
#if $kernel_w
    MLI_CHECK_AND_FIX(kernel_width, $kernel_w);
#endif
#if $kernel_h
    MLI_CHECK_AND_FIX(kernel_height, $kernel_h);
#endif

    // Define Data dimensions
    const int32_t out_width = CEIL_DIV(in_prv.width + padding_left + padding_right - kernel_width + 1, stride_width);
    const int32_t out_height = CEIL_DIV(in_prv.height + padding_top + padding_bot - kernel_height + 1, stride_height);

    // fill output tensor parameters
    out->el_type = in->el_type;
    out->rank = in->rank;
    out->shape[FMAP_C_DIM_CHW] = in_prv.ch;
    out->shape[FMAP_H_DIM_CHW] = out_height;
    out->shape[FMAP_W_DIM_CHW] = out_width;
    out->el_params.fx.frac_bits = in->el_params.fx.frac_bits;
    const auto out_prv = mli_prv_get_tensor_chw<MLI_OUT_PTR($d_type)>(out);

    const int32_t row_beg = 0;
    const int32_t row_end = out_height;
    const int32_t clmn_beg = 0;
    const int32_t clmn_end = out_width;

    mli_prv_fx_init_dsp_ctrl();

    $core_name(
        in_prv, out_prv,
        row_beg, row_end,
        clmn_beg, clmn_end,
        kernel_height, kernel_width,
        stride_height, stride_width,
        padding_top, padding_bot, padding_left, padding_right,
        $kernelpadding);

    return MLI_STATUS_OK;
}
