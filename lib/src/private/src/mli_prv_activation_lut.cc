/*
* Copyright 2019-2020, Synopsys, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-3-Clause license found in
* the LICENSE file in the root directory of this source tree.
*
*/

#include "mli_config.h"
#include "mli_prv_lut.h"
#include "mli_prv_activation_lut.h"

using mli::krn::activation_lut;

/*
    *** Generated by lutfx.py ***
    arguments  = -t FX16 -o size/2 -s 320 -qi 4 -f 'sigm(x)'
    lut_size   = 320
    in_offset  = 160
    in_format  = Q11.4
    out_format = Q15
    out_error  = 0.000052 (2 lsb) (linear interpolation)
*/
static const int16_t sigmoid_lut_data_fx16[] = {
        +1,     +2,     +2,     +2,     +2,     +2,     +2,     +2, 
        +2,     +3,     +3,     +3,     +3,     +3,     +4,     +4, 
        +4,     +4,     +5,     +5,     +5,     +6,     +6,     +6, 
        +7,     +7,     +8,     +8,     +9,     +9,    +10,    +10, 
       +11,    +12,    +12,    +13,    +14,    +15,    +16,    +17, 
       +18,    +19,    +21,    +22,    +23,    +25,    +26,    +28, 
       +30,    +32,    +34,    +36,    +38,    +41,    +43,    +46, 
       +49,    +52,    +56,    +59,    +63,    +67,    +72,    +76, 
       +81,    +86,    +92,    +98,   +104,   +111,   +118,   +125, 
      +133,   +142,   +151,   +161,   +171,   +182,   +194,   +206, 
      +219,   +233,   +248,   +264,   +281,   +299,   +318,   +338, 
      +360,   +383,   +407,   +433,   +461,   +490,   +521,   +554, 
      +589,   +627,   +666,   +708,   +753,   +800,   +851,   +904, 
      +961,  +1021,  +1084,  +1152,  +1223,  +1299,  +1379,  +1464, 
     +1554,  +1649,  +1750,  +1856,  +1969,  +2088,  +2213,  +2346, 
     +2486,  +2633,  +2789,  +2952,  +3124,  +3306,  +3496,  +3696, 
     +3906,  +4126,  +4357,  +4599,  +4851,  +5115,  +5391,  +5678, 
     +5978,  +6289,  +6613,  +6949,  +7297,  +7658,  +8031,  +8416, 
     +8813,  +9221,  +9641, +10072, +10513, +10964, +11424, +11894, 
    +12371, +12856, +13348, +13845, +14347, +14852, +15361, +15872, 
    +16384, +16896, +17407, +17916, +18421, +18923, +19420, +19912, 
    +20397, +20874, +21344, +21804, +22255, +22696, +23127, +23547, 
    +23955, +24352, +24737, +25110, +25471, +25819, +26155, +26479, 
    +26790, +27090, +27377, +27653, +27917, +28169, +28411, +28642, 
    +28862, +29072, +29272, +29462, +29644, +29816, +29979, +30135, 
    +30282, +30422, +30555, +30680, +30799, +30912, +31018, +31119, 
    +31214, +31304, +31389, +31469, +31545, +31616, +31684, +31747, 
    +31807, +31864, +31917, +31968, +32015, +32060, +32102, +32141, 
    +32179, +32214, +32247, +32278, +32307, +32335, +32361, +32385, 
    +32408, +32430, +32450, +32469, +32487, +32504, +32520, +32535, 
    +32549, +32562, +32574, +32586, +32597, +32607, +32617, +32626, 
    +32635, +32643, +32650, +32657, +32664, +32670, +32676, +32682, 
    +32687, +32692, +32696, +32701, +32705, +32709, +32712, +32716, 
    +32719, +32722, +32725, +32727, +32730, +32732, +32734, +32736, 
    +32738, +32740, +32742, +32743, +32745, +32746, +32747, +32749, 
    +32750, +32751, +32752, +32753, +32754, +32755, +32756, +32756, 
    +32757, +32758, +32758, +32759, +32759, +32760, +32760, +32761, 
    +32761, +32762, +32762, +32762, +32763, +32763, +32763, +32764, 
    +32764, +32764, +32764, +32765, +32765, +32765, +32765, +32765, 
    +32766, +32766, +32766, +32766, +32766, +32766, +32766, +32766
};

const mli_lut sigmoid_lut_fx16 = {
        // Designated initializers in C++ is a C++20 feature
        {
        /*.capacity =*/ sizeof(sigmoid_lut_data_fx16),
        {/*.data =*/ (int32_t*)sigmoid_lut_data_fx16 }},
        /*.type =*/ MLI_EL_FX_16,
        /*.length =*/ sizeof(sigmoid_lut_data_fx16) / sizeof(sigmoid_lut_data_fx16[0]),
        /*.in_frac_bits =*/ 4,
        /*.out_frac_bits =*/ 15,
        /*.input_offset =*/ sizeof(sigmoid_lut_data_fx16) / (sizeof(sigmoid_lut_data_fx16[0]) * 2) /*center-aligned */
};

/*
    *** Generated by lutfx.py ***
    arguments  = -t FX16 -o size/2 -s 344 -qi 5 -f 'tanh(x)'
    lut_size   = 344
    in_offset  = 172
    in_format  = Q10.5
    out_format = Q15
    out_error  = 0.000101 (3 lsb) (linear interpolation)
*/
static const int16_t tanh_lut_data_fx16[] = {
    -32767, -32767, -32766, -32766, -32766, -32766, -32766, -32766, 
    -32766, -32766, -32765, -32765, -32765, -32765, -32765, -32764, 
    -32764, -32764, -32764, -32763, -32763, -32763, -32762, -32762, 
    -32762, -32761, -32761, -32760, -32760, -32759, -32759, -32758, 
    -32758, -32757, -32756, -32755, -32755, -32754, -32753, -32752, 
    -32751, -32750, -32749, -32747, -32746, -32745, -32743, -32741, 
    -32740, -32738, -32736, -32734, -32732, -32729, -32727, -32724, 
    -32721, -32718, -32715, -32712, -32708, -32704, -32700, -32696, 
    -32691, -32686, -32681, -32676, -32670, -32663, -32657, -32649, 
    -32642, -32634, -32625, -32616, -32606, -32596, -32584, -32573, 
    -32560, -32547, -32532, -32517, -32501, -32484, -32466, -32447, 
    -32426, -32404, -32381, -32356, -32329, -32301, -32271, -32240, 
    -32206, -32170, -32132, -32091, -32048, -32002, -31953, -31901, 
    -31846, -31788, -31726, -31659, -31589, -31515, -31435, -31351, 
    -31262, -31167, -31067, -30960, -30847, -30727, -30600, -30465, 
    -30322, -30170, -30010, -29840, -29660, -29470, -29268, -29055, 
    -28830, -28592, -28341, -28076, -27797, -27502, -27191, -26864, 
    -26519, -26157, -25776, -25376, -24956, -24516, -24054, -23571, 
    -23066, -22538, -21986, -21411, -20813, -20189, -19542, -18870, 
    -18173, -17452, -16706, -15936, -15143, -14326, -13486, -12625, 
    -11743, -10840,  -9919,  -8980,  -8025,  -7056,  -6073,  -5079, 
     -4075,  -3063,  -2045,  -1024,     +0,  +1024,  +2045,  +3063, 
     +4075,  +5079,  +6073,  +7056,  +8025,  +8980,  +9919, +10840, 
    +11743, +12625, +13486, +14326, +15143, +15936, +16706, +17452, 
    +18173, +18870, +19542, +20189, +20813, +21411, +21986, +22538, 
    +23066, +23571, +24054, +24516, +24956, +25376, +25776, +26157, 
    +26519, +26864, +27191, +27502, +27797, +28076, +28341, +28592, 
    +28830, +29055, +29268, +29470, +29660, +29840, +30010, +30170, 
    +30322, +30465, +30600, +30727, +30847, +30960, +31067, +31167, 
    +31262, +31351, +31435, +31515, +31589, +31659, +31726, +31788, 
    +31846, +31901, +31953, +32002, +32048, +32091, +32132, +32170, 
    +32206, +32240, +32271, +32301, +32329, +32356, +32381, +32404, 
    +32426, +32447, +32466, +32484, +32501, +32517, +32532, +32547, 
    +32560, +32573, +32584, +32596, +32606, +32616, +32625, +32634, 
    +32642, +32649, +32657, +32663, +32670, +32676, +32681, +32686, 
    +32691, +32696, +32700, +32704, +32708, +32712, +32715, +32718, 
    +32721, +32724, +32727, +32729, +32732, +32734, +32736, +32738, 
    +32740, +32741, +32743, +32745, +32746, +32747, +32749, +32750, 
    +32751, +32752, +32753, +32754, +32755, +32755, +32756, +32757, 
    +32758, +32758, +32759, +32759, +32760, +32760, +32761, +32761, 
    +32762, +32762, +32762, +32763, +32763, +32763, +32764, +32764, 
    +32764, +32764, +32765, +32765, +32765, +32765, +32765, +32766, 
    +32766, +32766, +32766, +32766, +32766, +32766, +32766, +32767
};

const mli_lut tanh_lut_fx16 = {
        {
        /*.capacity =*/ sizeof(tanh_lut_data_fx16),
        {/*.data =*/ (int32_t*)tanh_lut_data_fx16 }},
        /*.type =*/ MLI_EL_FX_16,
        /*.length =*/ sizeof(tanh_lut_data_fx16) / sizeof(tanh_lut_data_fx16[0]),
        /*.in_frac_bits =*/ 5,
        /*.out_frac_bits =*/ 15,
        /*.input_offset =*/ sizeof(tanh_lut_data_fx16) / (sizeof(tanh_lut_data_fx16[0]) * 2) /*center-aligned */
};

/*
    *** Generated by lutfx.py ***
    arguments  = -t FX16 -o size-2 -s 358 -qi 5 -f 'expneg(x)'
    lut_size   = 358
    in_offset  = 356
    in_format  = Q10.5
    out_format = Q15
    out_error  = 0.000124 (4 lsb) (linear interpolation)
*/
static const int16_t expneg_lut_data_fx16[] = {
        +0,     +0,     +1,     +1,     +1,     +1,     +1,     +1, 
        +1,     +1,     +1,     +1,     +1,     +1,     +1,     +1, 
        +1,     +1,     +1,     +1,     +1,     +1,     +1,     +1, 
        +1,     +1,     +1,     +1,     +1,     +1,     +1,     +1, 
        +1,     +1,     +1,     +1,     +1,     +2,     +2,     +2, 
        +2,     +2,     +2,     +2,     +2,     +2,     +2,     +2, 
        +2,     +2,     +2,     +2,     +2,     +3,     +3,     +3, 
        +3,     +3,     +3,     +3,     +3,     +3,     +3,     +3, 
        +4,     +4,     +4,     +4,     +4,     +4,     +4,     +4, 
        +5,     +5,     +5,     +5,     +5,     +5,     +6,     +6, 
        +6,     +6,     +6,     +6,     +7,     +7,     +7,     +7, 
        +8,     +8,     +8,     +8,     +9,     +9,     +9,     +9, 
       +10,    +10,    +10,    +11,    +11,    +11,    +12,    +12, 
       +12,    +13,    +13,    +14,    +14,    +15,    +15,    +16, 
       +16,    +17,    +17,    +18,    +18,    +19,    +19,    +20, 
       +21,    +21,    +22,    +23,    +23,    +24,    +25,    +26, 
       +26,    +27,    +28,    +29,    +30,    +31,    +32,    +33, 
       +34,    +35,    +36,    +37,    +38,    +40,    +41,    +42, 
       +43,    +45,    +46,    +48,    +49,    +51,    +52,    +54, 
       +56,    +58,    +59,    +61,    +63,    +65,    +67,    +69, 
       +72,    +74,    +76,    +79,    +81,    +84,    +86,    +89, 
       +92,    +95,    +98,   +101,   +104,   +108,   +111,   +115, 
      +118,   +122,   +126,   +130,   +134,   +138,   +143,   +147, 
      +152,   +157,   +162,   +167,   +172,   +177,   +183,   +189, 
      +195,   +201,   +207,   +214,   +221,   +228,   +235,   +242, 
      +250,   +258,   +266,   +275,   +283,   +292,   +302,   +311, 
      +321,   +331,   +342,   +353,   +364,   +376,   +387,   +400, 
      +412,   +426,   +439,   +453,   +467,   +482,   +498,   +513, 
      +530,   +546,   +564,   +582,   +600,   +619,   +639,   +659, 
      +680,   +702,   +724,   +747,   +771,   +795,   +820,   +846, 
      +873,   +901,   +930,   +959,   +990,  +1021,  +1053,  +1087, 
     +1121,  +1157,  +1194,  +1231,  +1271,  +1311,  +1352,  +1395, 
     +1440,  +1485,  +1533,  +1581,  +1631,  +1683,  +1737,  +1792, 
     +1849,  +1907,  +1968,  +2030,  +2095,  +2161,  +2230,  +2301, 
     +2374,  +2449,  +2527,  +2607,  +2690,  +2775,  +2863,  +2954, 
     +3048,  +3145,  +3244,  +3347,  +3454,  +3563,  +3676,  +3793, 
     +3914,  +4038,  +4166,  +4298,  +4435,  +4575,  +4721,  +4871, 
     +5025,  +5185,  +5349,  +5519,  +5694,  +5875,  +6061,  +6254, 
     +6452,  +6657,  +6869,  +7087,  +7312,  +7544,  +7783,  +8030, 
     +8285,  +8548,  +8819,  +9099,  +9388,  +9686,  +9994, +10311, 
    +10638, +10976, +11324, +11684, +12055, +12437, +12832, +13239, 
    +13660, +14093, +14541, +15002, +15479, +15970, +16477, +17000, 
    +17539, +18096, +18671, +19263, +19875, +20506, +21157, +21828, 
    +22521, +23236, +23974, +24735, +25520, +26330, +27166, +28028, 
    +28918, +29836, +30783, +31760, +32767, +32767
};

const mli_lut expneg_lut_fx16 = {
        {
        /*.capacity =*/ sizeof(expneg_lut_data_fx16),
       {/*.data =*/ (int32_t*)expneg_lut_data_fx16 }},
        /*.type =*/ MLI_EL_FX_16,
        /*.length =*/ sizeof(expneg_lut_data_fx16) / sizeof(expneg_lut_data_fx16[0]),
        /*.in_frac_bits =*/ 5,
        /*.out_frac_bits =*/ 15,
        /*.input_offset =*/ sizeof(expneg_lut_data_fx16) / sizeof(expneg_lut_data_fx16[0]) - 2 /*right-minus-one-aligned */
};

/*
    *** Generated by lutfx.py ***
    arguments  = -t FX16 -o -32 -s 97 -qi 0 -qo 17 -f 'invsqrt(x)'
    lut_size   = 97
    in_offset  = -32
    in_format  = Q7.0
    out_format = Q17
    out_error  = 0.000017 (2 lsb) (linear interpolation)
*/
static const int16_t invsqrt_lut_data_fx16[] = {
    +23170, +22817, +22479, +22155, +21845, +21548, +21263, +20988,
    +20724, +20470, +20225, +19988, +19760, +19539, +19326, +19119,
    +18919, +18725, +18536, +18354, +18176, +18004, +17837, +17674,
    +17515, +17361, +17211, +17064, +16921, +16782, +16646, +16514,
    +16384, +16257, +16134, +16013, +15895, +15779, +15666, +15555,
    +15447, +15341, +15237, +15135, +15035, +14937, +14841, +14747,
    +14654, +14564, +14474, +14387, +14301, +14217, +14134, +14052,
    +13972, +13894, +13816, +13740, +13665, +13592, +13519, +13448,
    +13377, +13308, +13240, +13173, +13107, +13042, +12978, +12915,
    +12853, +12791, +12731, +12671, +12612, +12554, +12497, +12441,
    +12385, +12330, +12276, +12223, +12170, +12118, +12066, +12015,
    +11965, +11916, +11867, +11818, +11771, +11723, +11677, +11631,
    +11585
};

const mli_lut invsqrt_lut_fx16 = {
       {/*.capacity =*/ sizeof(invsqrt_lut_data_fx16),
       {/*.data =*/ (int32_t*)invsqrt_lut_data_fx16 }},
        /*.type =*/ MLI_EL_FX_16,
        /*.length =*/ sizeof(invsqrt_lut_data_fx16) / sizeof(invsqrt_lut_data_fx16[0]),
        /*.in_frac_bits =*/ 0,
        /*.out_frac_bits =*/ 17,
        /*.input_offset =*/ -32
};
#ifdef __cplusplus
extern "C" {
#endif

#pragma MLI_CODE_SECTION_START(".mli_lib")

void mli_prv_activation_lut_fx8(
        const mli_tensor *in,
        const mli_tensor *out,
        const mli_lut *lut,
        int in_frac_bits) {
    activation_lut<int8_t, /* convert = */ false>(in, out, lut, in_frac_bits);
}

void mli_prv_activation_lut_fx16(
        const mli_tensor *in,
        const mli_tensor *out,
        const mli_lut *lut,
        int in_frac_bits) {
    activation_lut<int16_t, /* convert = */ false>(in, out, lut, in_frac_bits);
}

void mli_prv_activation_lut_sa8(
        const mli_tensor *in,
        const mli_tensor *out,
        const mli_lut *lut,
        struct s8asym_quant_params *in_params,
        struct s8asym_quant_params *out_params) {
    activation_lut<int8_t, /* convert = */ true>(in, out, lut, 0 /*Unused*/, in_params, out_params);
}

#pragma MLI_CODE_SECTION_END()

#ifdef __cplusplus
}
#endif
