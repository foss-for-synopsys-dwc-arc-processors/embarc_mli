/*
* Copyright 2021, Synopsys, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-3-Clause license found in
* the LICENSE file in the root directory of this source tree.
*
*/

#include <stdint.h>

#include "mli_types.h"
#include "test_tensor_quantizer.h"

using mli::tst::tensor_quantizer;

// Generated input vectors Declaration
//========================================
extern mli::tst::tensor_quantizer input_1_fx16;
extern mli::tst::tensor_quantizer input_1_sa8;
extern mli::tst::tensor_quantizer input_2_fx16;
extern mli::tst::tensor_quantizer input_2_sa8;

extern mli::tst::tensor_quantizer hidden_1_fx16;
extern mli::tst::tensor_quantizer hidden_1_sa8;

// Generated weights vectors Declaration
//========================================
extern mli::tst::tensor_quantizer weights_1_in_fx16;
extern mli::tst::tensor_quantizer weights_1_in_fx8;
extern mli::tst::tensor_quantizer weights_1_in_sa8;
extern mli::tst::tensor_quantizer weights_1_out_fx16;
extern mli::tst::tensor_quantizer weights_1_out_fx8;
extern mli::tst::tensor_quantizer weights_1_out_sa8;

extern mli::tst::tensor_quantizer weights_2_in_fx16;
extern mli::tst::tensor_quantizer weights_2_in_fx8;
extern mli::tst::tensor_quantizer weights_2_in_sa8;
extern mli::tst::tensor_quantizer weights_2_out_fx16;
extern mli::tst::tensor_quantizer weights_2_out_fx8;
extern mli::tst::tensor_quantizer weights_2_out_sa8;

extern mli::tst::tensor_quantizer weights_2_in_memstr_fx16;
extern mli::tst::tensor_quantizer weights_2_in_memstr_fx8;
extern mli::tst::tensor_quantizer weights_2_in_memstr_sa8;
extern mli::tst::tensor_quantizer weights_2_out_memstr_fx16;
extern mli::tst::tensor_quantizer weights_2_out_memstr_fx8;
extern mli::tst::tensor_quantizer weights_2_out_memstr_sa8;

extern mli::tst::tensor_quantizer bias_1_fx16;
extern mli::tst::tensor_quantizer bias_1_fx8;
extern mli::tst::tensor_quantizer bias_1_i1_w1_sa32;
extern mli::tst::tensor_quantizer bias_1_i2_w2_sa32;

// Extracted Output vectors Declaration
//===================================================
extern mli::tst::tensor_quantizer test_1_out_fx16;
extern mli::tst::tensor_quantizer test_1_out_sa8;

extern mli::tst::tensor_quantizer test_2_out_fx16;
extern mli::tst::tensor_quantizer test_2_out_sa8;

extern mli::tst::tensor_quantizer test_3_out_fx16;
extern mli::tst::tensor_quantizer test_3_out_sa8;

extern mli::tst::tensor_quantizer test_4_out_fx16;
extern mli::tst::tensor_quantizer test_4_out_sa8;

extern mli::tst::tensor_quantizer test_5_out_fx16;
extern mli::tst::tensor_quantizer test_5_out_sa8;

extern mli::tst::tensor_quantizer test_6_out_fx16;
extern mli::tst::tensor_quantizer test_6_out_sa8;

// Tests configuration structures Declaration
//========================================
extern const mli_rnn_cell_cfg test_1_cfg;
extern const mli_rnn_cell_cfg test_2_cfg;
extern const mli_rnn_cell_cfg test_3_cfg;
extern const mli_rnn_cell_cfg test_4_cfg;
extern const mli_rnn_cell_cfg test_5_cfg;
extern const mli_rnn_cell_cfg test_6_cfg;


// Generated vectors 
//========================================
static const float input_1_data[] = {
    -2.667842f, -1.159014f, -0.769282f, -0.543935f
};

static const float input_1_scale = 0.012644791338583f;
static const float input_1_zero_point = -1.6058885f;
static const int8_t input_1_scales_frac[] = {21};
static const int input_1_sa_dim = -1;

static const int input_1_fx8_frac = 5;

#define INPUT_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 4}, \
    /* .rank =  */ 2

static const mli_tensor input_1_tsr_fx16 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor input_1_tsr_sa8 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer input_1_fx16(input_1_tsr_fx16, input_1_fx8_frac + 8, input_1_data, 
    sizeof(input_1_data) / sizeof(input_1_data[0]));
tensor_quantizer input_1_sa8(input_1_tsr_sa8, input_1_sa_dim, input_1_data, 
    sizeof(input_1_data) / sizeof(input_1_data[0]), 
    &input_1_scale, 1, &input_1_zero_point, 1, input_1_scales_frac, 1);


static const float input_2_data[] = {
    -2.538758f, -1.630968f, -0.667807f, -0.158479f, -0.363899f, 0.045687f, 1.127929f, 0.12055f, -0.835728f, -0.356091f, 
    -0.344561f, 0.246366f, 1.204394f, 0.876102f, -1.073227f, 0.727699f, 0.531079f, 1.742796f, 0.687985f, -0.032742f, 
    -0.70648f, -0.532857f, 1.664866f, 0.596407f, 0.89535f, 1.556733f, 1.048818f, -0.227477f, 1.419757f, -0.413084f, 
    0.407414f, 0.762289f, -0.329642f, -0.625855f, -1.02951f, -0.080428f, -0.91177f, -1.520315f, 0.193534f, -0.136992f
};

static const float input_2_scale = 0.0167904086f;
static const float input_2_zero_point = -0.397981f;
static const int8_t input_2_scales_frac[] = {20};
static const int input_2_sa_dim = -1;

static const int input_2_fx8_frac = 5;

#define INPUT_2_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 4}, \
    /* .rank =  */ 2

static const mli_tensor input_2_tsr_fx16 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor input_2_tsr_sa8 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer input_2_fx16(input_2_tsr_fx16, input_2_fx8_frac + 8, input_2_data, 
    sizeof(input_2_data) / sizeof(input_2_data[0]));
tensor_quantizer input_2_sa8(input_2_tsr_sa8, input_2_sa_dim, input_2_data, 
    sizeof(input_2_data) / sizeof(input_2_data[0]), 
    &input_2_scale, 1, &input_2_zero_point, 1, input_2_scales_frac, 1);


static const float hidden_1_data[] = {
    -0.300824f, 1.191726f, -0.266712f, -0.652272f, 1.410004f, -0.741806f, -0.449748f, 0.366453f, 1.571448f, -0.978345f, 
    -1.289547f, 0.431713f, 1.962878f, 0.088168f, -0.022135f, -1.697038f, -2.106908f, 0.122574f, 0.26443f, -0.151065f
};

static const float hidden_1_scale = 0.015959945f;
static const float hidden_1_zero_point = -0.0720150471f;
static const int8_t hidden_1_scales_frac[] = {20};
static const int hidden_1_sa_dim = -1;

static const int hidden_1_fx8_frac = 5;

#define HIDDEN_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {20}, \
    /* .rank =  */ 1

static const mli_tensor hidden_1_tsr_fx16 = {
    HIDDEN_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor hidden_1_tsr_sa8 = {
    HIDDEN_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer hidden_1_fx16(hidden_1_tsr_fx16, hidden_1_fx8_frac + 8, hidden_1_data, 
    sizeof(hidden_1_data) / sizeof(hidden_1_data[0]));
tensor_quantizer hidden_1_sa8(hidden_1_tsr_sa8, hidden_1_sa_dim, hidden_1_data, 
    sizeof(hidden_1_data) / sizeof(hidden_1_data[0]), 
    &hidden_1_scale, 1, &hidden_1_zero_point, 1, hidden_1_scales_frac, 1);


static const float weights_1_in_data[] = {
    0.01323f, 0.046839f, 0.22024f, -0.088289f, 0.090471f, -0.030072f, -0.125115f, -0.166647f, -0.144025f, 0.091435f, 
    -0.022758f, 0.186528f, -0.207196f, 0.062579f, -0.02523f, -0.21737f, -0.135179f, -0.216374f, 0.146399f, -0.046809f, 
    0.023254f, 0.216047f, -0.188815f, -0.108191f, 0.119498f, -0.223097f, -0.046292f, -0.138902f, 0.180557f, -0.063294f, 
    0.170261f, -0.040177f, 0.069822f, 0.104019f, 0.101154f, 0.215624f, 0.00941f, 0.172466f, 0.077503f, 0.175225f, 
    0.120087f, 0.101598f, -0.009877f, 0.041233f, 0.119992f, 0.161043f, -0.200524f, -0.134166f, -0.190802f, 0.120406f, 
    0.159326f, 0.101637f, -0.052103f, -0.034891f, 0.208256f, -0.105898f, 0.04967f, 0.079664f, -0.169168f, -0.221456f, 
    -0.219275f, 0.029201f, 0.038351f, 0.174684f, 0.203585f, -0.166539f, -0.053592f, -0.137947f, 0.148105f, -0.190107f, 
    0.099426f, -0.181886f, 0.13442f, -0.196605f, 0.070128f, 0.06997f, 0.060841f, 0.021358f, 0.218981f, -0.079075f, 
    0.098224f, 0.157519f, -0.219908f, -0.064586f, -0.03961f, -0.137625f, -0.086496f, -0.196417f, 0.177949f, 0.089488f, 
    -0.060561f, -0.060192f, -0.196162f, -0.029055f, -0.189563f, 0.134987f, 0.199935f, 0.148894f, 0.18159f, 0.193551f, 
    0.057911f, -0.083824f, -0.023741f, -0.057701f, 0.050221f, -0.108394f, 0.177739f, -0.153368f, -0.042491f, -0.091813f, 
    -0.19715f, -0.130431f, -0.138248f, -0.076221f, 0.191053f, -0.071519f, 0.170451f, -0.163761f, -0.196691f, -0.067988f, 
    0.074564f, 0.000258f, 0.135453f, 0.081835f, 0.113448f, 0.202127f, 0.141954f, -0.12794f, -0.189588f, 0.132095f, 
    0.18412f, -0.153311f, 0.15261f, 0.093921f, -0.015895f, 0.157916f, -0.218507f, -0.091867f, -0.208225f, -0.142721f, 
    -0.072227f, -0.015975f, 0.022891f, -0.086121f, -0.03424f, -0.024462f, 0.098309f, -0.209739f, 0.011091f, -0.077312f, 
    0.154118f, -0.189578f, 0.164722f, 0.108815f, -0.129324f, -0.181933f, -0.034062f, 0.211302f, 0.023099f, -0.133184f, 
    -0.002753f, 0.002035f, 0.004435f, -0.111904f, 0.080893f, 0.139318f, -0.173161f, -0.050753f, -0.154487f, -0.124619f, 
    0.127289f, 0.175223f, -0.103716f, 0.032727f, -0.157247f, -0.004172f, -0.066099f, 0.115416f, -0.211064f, 0.068617f, 
    0.025319f, 0.082858f, -0.101668f, -0.028602f, -0.188995f, 0.17757f, 0.164638f, 0.057804f, 0.0007f, -0.151108f, 
    -0.089339f, -0.023159f, 0.195151f, -0.010909f, 0.040377f, 0.088216f, 0.195896f, -0.071659f, 0.138702f, -0.087936f, 
    -0.082515f, 0.038643f, -0.179367f, -0.095491f, 0.027189f, 0.097223f, -0.009594f, 0.202352f, 0.008193f, -0.072972f, 
    0.028809f, -0.130063f, 0.05937f, 0.029302f, -0.118493f, -0.117584f, 0.108583f, 0.022959f, 0.083069f, -0.099857f, 
    0.181017f, -0.043124f, -0.04669f, 0.14619f, -0.154616f, -0.138253f, -0.088893f, -0.089229f, -0.02867f, 0.150337f, 
    -0.056663f, 0.047095f, 0.197834f, 0.140554f, -0.01837f, -0.194475f, -0.026888f, -0.052443f, -0.121713f, -0.149366f
};

static const float weights_1_in_scales[] = {0.0017497804f, 0.0017247687f, 0.0016554039f};
static const float weights_1_in_zero_points[] = {0.f, 0.f, 0.f};
static const int8_t weights_1_in_scales_frac[] = {24, 24, 24};
static const int weights_1_in_sa_dim = 0;

static const int weights_1_in_fx8_frac = 9;

#define WEIGHTS_1_IN_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {3, 4, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_1_in_tsr_fx16 = {
    WEIGHTS_1_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_in_tsr_fx8 = {
    WEIGHTS_1_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_in_tsr_sa8 = {
    WEIGHTS_1_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_1_in_fx16(weights_1_in_tsr_fx16, weights_1_in_fx8_frac + 8, weights_1_in_data, 
    sizeof(weights_1_in_data) / sizeof(weights_1_in_data[0]));
tensor_quantizer weights_1_in_fx8(weights_1_in_tsr_fx8, weights_1_in_fx8_frac, weights_1_in_data, 
    sizeof(weights_1_in_data) / sizeof(weights_1_in_data[0]));
tensor_quantizer weights_1_in_sa8(weights_1_in_tsr_sa8, weights_1_in_sa_dim, weights_1_in_data, 
    sizeof(weights_1_in_data) / sizeof(weights_1_in_data[0]), weights_1_in_scales, 
    sizeof(weights_1_in_scales) / sizeof(weights_1_in_scales[0]), 
    weights_1_in_zero_points, sizeof(weights_1_in_zero_points) / sizeof(weights_1_in_zero_points[0]), 
    weights_1_in_scales_frac, sizeof(weights_1_in_scales_frac) / sizeof(weights_1_in_scales_frac[0]));


static const float weights_1_out_data[] = {
    0.178186f, 0.135984f, -0.103728f, -0.111749f, -0.10826f, -0.186385f, 0.106362f, -0.079712f, 0.145748f, -0.134191f, 
    -0.077736f, 0.012042f, 0.175572f, -0.179423f, -0.099886f, -0.080465f, -0.161452f, 0.214276f, 0.13999f, -0.106878f, 
    -0.144204f, -0.173629f, -0.205897f, 0.20341f, -0.096006f, -0.137778f, -0.158222f, 0.046673f, -0.117308f, 0.118136f, 
    -0.041362f, -0.007122f, -0.170779f, 0.149611f, -0.023778f, -0.110437f, -0.019325f, 0.165106f, 0.11972f, -0.003906f, 
    0.179055f, 0.115395f, 0.013942f, -0.14206f, 0.001881f, -0.010623f, -0.123474f, 0.066743f, 0.168963f, 0.127549f, 
    -0.223168f, 0.008084f, 0.208001f, 0.033765f, 0.144862f, -0.071097f, 0.044903f, 0.164388f, 0.15735f, 0.21714f, 
    0.204647f, -0.175448f, -0.039137f, 0.117053f, 0.06819f, 0.096682f, 0.154107f, -0.206552f, 0.016364f, -0.026583f, 
    -0.088055f, 0.137754f, -0.131666f, 0.186089f, -0.100075f, -0.181646f, 0.019428f, 0.184491f, 0.121736f, -0.136085f, 
    0.091024f, -0.005036f, -0.016102f, -0.11469f, -0.17051f, -0.046643f, 0.132809f, -0.114627f, 0.090917f, 0.194015f, 
    0.159667f, 0.222831f, 0.141552f, -0.129034f, -0.024111f, -0.129097f, -0.166091f, 0.027942f, 0.058932f, -0.06342f, 
    0.110814f, -0.006951f, -0.046191f, -0.11177f, -0.079762f, -0.116401f, -0.00799f, -0.182183f, -0.02836f, 0.018265f, 
    0.086935f, -0.008493f, -0.125584f, 0.05156f, 0.163252f, 0.096215f, 0.049954f, -0.042141f, -0.038969f, -0.008607f, 
    0.023555f, 0.112631f, -0.043613f, -0.187466f, 0.085105f, -0.163688f, 0.205123f, 0.025221f, 0.02064f, 0.221419f, 
    0.135841f, 0.223159f, 0.164616f, -0.018482f, 0.068649f, 0.104619f, -0.105858f, -0.118272f, 0.15402f, -0.06129f, 
    -0.089093f, 0.205505f, 0.001902f, -0.038227f, 0.058106f, 0.161311f, 0.097703f, 0.04718f, -0.051817f, 0.185745f, 
    0.073334f, -0.080488f, -0.169845f, -0.118815f, -0.101705f, 0.00454f, 0.096198f, 0.073983f, -0.107497f, 0.181724f, 
    0.001279f, 0.066571f, -0.053479f, 0.137515f, -0.05887f, -0.010351f, -0.160764f, -0.171729f, 0.116487f, -0.147179f, 
    0.20429f, 0.115054f, 0.111471f, 0.01434f, 0.045295f, 0.030755f, -0.072897f, -0.18839f, 0.153962f, 0.096346f, 
    0.142404f, 0.113264f, -0.113657f, -0.119464f, 0.01506f, -0.041453f, -0.128897f, -0.12817f, -0.139581f, 0.044507f, 
    -0.215035f, -0.221026f, -0.076053f, -0.215935f, 0.156704f, 0.015089f, -0.2016f, -0.15266f, 0.170562f, -0.192474f, 
    0.209316f, 0.220342f, 0.104016f, -0.106172f, -0.193671f, -0.001195f, -0.151123f, 0.009754f, 0.217331f, -0.033325f, 
    0.118887f, -0.062807f, -0.139314f, -0.124244f, 0.046488f, 0.16871f, -0.125175f, 0.148815f, 0.215315f, 0.100737f, 
    -0.07302f, -0.188907f, 0.10072f, -0.180719f, 0.135547f, 0.179672f, -0.088218f, -0.10038f, -0.006239f, -0.010598f, 
    0.215098f, -0.072498f, -0.140092f, -0.094777f, -0.175614f, -0.054959f, -0.032894f, -0.194176f, 0.212111f, -0.210444f, 
    0.106075f, -0.166786f, 0.076956f, -0.167652f, -0.112622f, -0.206754f, 0.028235f, -0.063662f, 0.147704f, 0.010188f, 
    -0.108667f, 0.03984f, 0.071543f, -0.15594f, 0.039924f, -0.20965f, -0.156716f, -0.127994f, -0.007791f, 0.083135f, 
    0.19894f, -0.123961f, 0.174432f, -0.174808f, 0.075855f, -0.155213f, -0.033166f, -0.072561f, 0.21145f, -0.139999f, 
    -0.153173f, -0.152812f, 0.143984f, -0.185272f, 0.055369f, 0.148528f, 0.091904f, -0.133968f, 0.052458f, 0.109436f, 
    0.113349f, 0.078667f, 0.053368f, 0.036429f, -0.071626f, -0.090261f, -0.150406f, 0.050109f, -0.216784f, -0.021754f, 
    0.221733f, -0.037131f, -0.065522f, 0.180111f, -0.067596f, -0.194639f, 0.204821f, 0.13034f, -0.204791f, -0.071121f, 
    0.064948f, 0.065015f, -0.05542f, 0.058872f, -0.144526f, 0.155554f, 0.193774f, -0.221151f, 0.18572f, 0.114998f, 
    0.141275f, -0.21211f, 0.092983f, 0.06404f, -0.219232f, -0.038201f, 0.167523f, -0.037984f, -0.081929f, -0.079171f, 
    -0.05293f, 0.19792f, 0.084603f, -0.204433f, 0.007891f, 0.072471f, -0.213011f, 0.155702f, -0.217655f, 0.074595f, 
    -0.079601f, -0.211994f, -0.100854f, -0.095019f, -0.179605f, -0.042813f, 0.216855f, -0.218417f, 0.054652f, 0.106923f, 
    -0.045147f, -0.177389f, 0.077118f, -0.191394f, -0.043515f, -0.086193f, -0.130987f, -0.154095f, 0.122474f, -0.006958f, 
    -0.064434f, 0.049096f, -0.020038f, -0.095854f, -0.186453f, -0.147093f, 0.083343f, 0.188287f, 0.137758f, -0.165057f, 
    0.118963f, -0.17229f, -0.058472f, -0.198507f, -0.007816f, -0.137065f, 0.170576f, 0.155797f, -0.027395f, -0.022927f, 
    -0.021354f, 0.033777f, -0.151036f, 0.128561f, -0.121909f, 0.120042f, 0.185296f, -0.198178f, 0.015166f, 0.114629f, 
    0.036027f, -0.071569f, -0.090809f, -0.048504f, -0.212543f, -0.055734f, 0.160894f, -0.151819f, -0.070821f, -0.159625f, 
    0.158619f, 0.154256f, 0.010847f, 0.217953f, 0.016014f, -0.169881f, -0.093193f, 0.02716f, 0.194527f, 0.068123f, 
    0.144013f, -0.152426f, 0.096355f, -0.016325f, 0.018056f, 0.145177f, 0.021155f, -0.147215f, 0.174119f, -0.116418f, 
    0.17126f, 0.187566f, -0.090795f, -0.161155f, -0.129593f, 0.179925f, 0.218817f, -0.045059f, -0.103477f, 0.119004f, 
    -0.034426f, 0.192993f, 0.068962f, -0.157565f, -0.059289f, 0.195671f, -0.125016f, -0.122882f, 0.216034f, -0.03913f, 
    -0.118611f, 0.01294f, 0.126725f, 0.023076f, -0.131969f, 0.078386f, -0.078317f, 0.045981f, -0.085616f, 0.00619f, 
    -0.114281f, -0.205416f, -0.105228f, 0.159189f, 0.110401f, 0.201053f, -0.070287f, -0.097182f, 0.07447f, -0.199248f, 
    0.060279f, 0.159376f, 0.094916f, -0.087976f, 0.001184f, -0.149292f, 0.156876f, -0.199479f, 0.182413f, 0.151396f, 
    0.039508f, -0.001381f, 0.12018f, 0.03513f, 0.00928f, 0.110546f, 0.102325f, 0.199239f, -0.087455f, -0.08207f, 
    0.182182f, -0.078335f, -0.10156f, -0.068015f, -0.187834f, 0.016003f, -0.109646f, 0.118303f, 0.1012f, 0.06224f, 
    0.032781f, -0.004153f, -0.21509f, 0.183454f, -0.023031f, 0.139309f, -0.034744f, 0.114021f, 0.131088f, 0.152792f, 
    0.205248f, 0.082917f, -0.145265f, 0.02933f, -0.124681f, 0.132109f, 0.167759f, 0.101938f, 0.193794f, -0.036063f, 
    0.172046f, 0.019376f, -0.15583f, -0.18008f, 0.136277f, 0.12407f, 0.198606f, -0.111046f, 0.190528f, 0.162621f, 
    -0.203618f, 0.183951f, -0.034531f, -0.054491f, 0.223556f, 0.078213f, -0.208232f, -0.099827f, 0.039763f, 0.06039f, 
    0.212364f, -0.067819f, 0.187425f, -0.156203f, -0.045345f, 0.027563f, -0.022002f, 0.114528f, 0.096232f, -0.011752f, 
    0.033063f, 0.042428f, 0.195549f, 0.034107f, 0.127455f, -0.123382f, -0.200658f, 0.113377f, 0.117545f, -0.075689f, 
    -0.018259f, -0.102479f, -0.153454f, -0.223275f, 0.002217f, 0.038609f, -0.068299f, 0.188215f, 0.070408f, -0.216633f, 
    0.023844f, 0.108928f, -0.208364f, -0.075059f, -0.092119f, 0.086942f, 0.133998f, -0.007199f, 0.140653f, -0.162196f, 
    0.087688f, -0.145987f, -0.054694f, 0.046338f, -0.161646f, -0.223311f, -0.21582f, 0.066865f, -0.204243f, -0.054619f, 
    -0.206392f, -0.045104f, -0.085301f, 0.102287f, -0.186996f, -0.030776f, 0.013196f, 0.089379f, 0.208807f, -0.187677f, 
    0.223392f, 0.180105f, 0.212446f, -0.011094f, -0.025756f, -0.159597f, 0.006314f, -0.04712f, -0.107789f, 0.049467f, 
    -0.185724f, -0.073579f, 0.10018f, -0.073102f, -0.189908f, 0.036143f, 0.196042f, -0.121663f, -0.216427f, -0.216188f, 
    -0.179979f, 0.081367f, 0.044959f, 0.184478f, -0.18629f, 0.026911f, 0.205897f, -0.048492f, -0.194064f, 0.055675f, 
    0.086604f, -0.134703f, 0.025708f, -0.042235f, -0.093596f, 0.009939f, -0.038797f, 0.186282f, 0.204195f, -0.045951f, 
    0.057716f, -0.078552f, 0.210349f, -0.051302f, 0.149843f, -0.05262f, -0.198005f, 0.0173f, -0.190263f, -0.097403f, 
    0.072472f, 0.105583f, 0.017484f, -0.030444f, 0.065788f, -0.059465f, 0.131146f, 0.046606f, 0.134511f, 0.061163f, 
    -0.155404f, -0.181598f, 0.180632f, 0.218381f, 0.105569f, -0.11483f, -0.076425f, -0.169978f, 0.020376f, -0.136608f, 
    -0.082949f, -0.211431f, -0.04606f, 0.103838f, -0.207947f, 0.105102f, -0.155271f, -0.098785f, 0.12487f, 0.039964f, 
    0.074793f, -0.196355f, -0.090409f, -0.185952f, -0.088282f, 0.041683f, 0.085201f, 0.191036f, 0.083754f, -0.017761f, 
    -0.082207f, 0.215317f, -0.127407f, -0.041509f, -0.13071f, 0.124023f, -0.19144f, 0.174253f, 0.053873f, 0.203115f, 
    0.066422f, -0.005278f, -0.014123f, -0.140143f, 0.189937f, 0.186197f, 0.035778f, -0.093999f, 0.027311f, -0.136965f, 
    -0.083624f, -0.134456f, -0.051173f, -0.008042f, 0.031147f, -0.088573f, 0.222533f, 0.045514f, 0.18365f, -0.158269f, 
    -0.044921f, -0.053698f, -0.049491f, 0.000935f, 0.119766f, 0.041809f, -0.031469f, 0.000625f, 0.074087f, -0.002423f, 
    -0.136898f, 0.151477f, 0.08228f, 0.183105f, 0.027537f, 0.147829f, 0.107436f, -0.093073f, -0.09381f, -0.204253f, 
    -0.205698f, -0.179378f, 0.06107f, -0.069391f, -0.158258f, 0.01279f, 0.008205f, -0.179199f, -0.027879f, -0.164369f, 
    -0.205331f, -0.060554f, -0.150835f, -0.162439f, 0.193476f, -0.155038f, 0.188663f, 0.018541f, 0.177407f, 0.204229f, 
    0.133391f, -0.044944f, -0.153161f, -0.031797f, 0.148765f, 0.14773f, -0.130587f, -0.166214f, -0.200179f, 0.071181f, 
    -0.20076f, -0.072269f, 0.051184f, -0.223457f, 0.170201f, -0.048608f, 0.024354f, -0.010489f, 0.033351f, -0.212466f, 
    0.00067f, -0.138004f, -0.117076f, -0.182795f, -0.061537f, 0.184599f, -0.035285f, -0.213636f, 0.042406f, -0.18111f, 
    0.024076f, -0.122275f, 0.198383f, 0.057038f, -0.210748f, -0.213952f, 0.073849f, 0.060408f, 0.076655f, 0.046128f, 
    0.075052f, 0.074165f, -0.113669f, 0.159501f, -0.085142f, -0.135959f, -0.149446f, -0.187609f, -0.184681f, -0.145764f, 
    0.100615f, 0.057388f, -0.215157f, -0.139668f, -0.035524f, 0.095634f, 0.029533f, -0.115838f, 0.131801f, -0.055207f, 
    0.04754f, 0.138461f, -0.003287f, 0.055247f, -0.19103f, -0.127343f, -0.108955f, 0.213953f, -0.094985f, 0.121205f, 
    0.187155f, -0.168111f, 0.111294f, -0.059449f, -0.004874f, -0.082872f, -0.046449f, -0.106479f, -0.218846f, 0.075323f, 
    0.055638f, -0.017219f, 0.141234f, 0.175598f, 0.005682f, 0.206338f, -0.201884f, -0.209014f, 0.109319f, -0.045212f, 
    0.216079f, 0.102845f, -0.059769f, -0.182236f, 0.072842f, -0.103639f, -0.045191f, 0.074676f, -0.149885f, 0.023479f, 
    0.154162f, 0.202416f, -0.205018f, -0.200425f, -0.181562f, -0.219141f, -0.087101f, 0.209586f, -0.154593f, 0.215286f, 
    0.002118f, -0.085946f, -0.191803f, 0.116547f, -0.029358f, 0.044876f, -0.134975f, 0.104349f, -0.042689f, 0.05683f, 
    0.02521f, -0.075138f, 0.211196f, -0.034929f, 0.050733f, -0.101123f, 0.215829f, -0.034766f, 0.206578f, 0.136601f, 
    -0.008307f, 0.092101f, -0.017851f, -0.039014f, 0.167536f, -0.137887f, -0.052486f, 0.14778f, 0.110876f, 0.050898f, 
    0.110689f, -0.188053f, -0.10752f, 0.206756f, 0.103484f, -0.125925f, -0.003948f, -0.215788f, 0.114946f, 0.221641f, 
    -0.007428f, -0.089236f, 0.000626f, -0.165049f, -0.148096f, 0.066436f, 0.01317f, 0.035586f, -0.030656f, 0.141898f, 
    0.18615f, -0.063873f, 0.015699f, 0.001621f, -0.022705f, 0.003678f, 0.022324f, 0.205525f, 0.018556f, 0.017604f, 
    0.014994f, 0.209659f, -0.053818f, 0.140437f, -0.177401f, -0.148959f, 0.190961f, 0.092424f, -0.102084f, -0.015664f, 
    0.175389f, -0.218591f, -0.145124f, 0.194537f, 0.178372f, -0.122517f, -0.000704f, 0.219081f, -0.059389f, -0.013334f, 
    -0.110082f, 0.110751f, 0.117825f, 0.099927f, -0.088115f, -0.080463f, -0.16756f, 0.189176f, -0.216157f, -0.107955f, 
    -0.039874f, -0.184746f, -0.158951f, 0.143942f, -0.078125f, -0.166555f, 0.013809f, -0.04454f, 0.138281f, 0.059606f, 
    -0.192476f, -0.192983f, 0.144713f, 0.070192f, 0.037805f, -0.056383f, 0.10926f, 0.171446f, 0.015358f, -0.038648f, 
    0.091076f, -0.041781f, -0.111907f, -0.020996f, -0.166714f, 0.084502f, -0.20259f, -0.162044f, -0.128894f, 0.120332f, 
    -0.081282f, -0.044813f, -0.179877f, 0.195641f, -0.027966f, -0.172111f, -0.195713f, 0.177066f, -0.135732f, -0.203223f, 
    -0.173776f, -0.203759f, -0.085821f, -0.212909f, -0.118264f, 0.104972f, -0.203781f, 0.108661f, -0.086099f, 0.048057f, 
    0.204703f, -0.151578f, -0.09418f, -0.098695f, -0.156475f, 0.206457f, -0.207331f, -0.217004f, -0.134864f, 0.093967f, 
    0.127651f, 0.057426f, 0.219058f, 0.188406f, -0.127894f, -0.123489f, 0.205839f, 0.100361f, -0.13504f, 0.215616f, 
    -0.149184f, -0.002768f, 0.201731f, 0.017642f, 0.14538f, 0.212505f, -0.073737f, -0.116398f, -0.195655f, -0.007699f, 
    -0.01155f, 0.172687f, 0.007542f, 0.219716f, -0.186747f, -0.210247f, 0.039127f, -0.043341f, 0.201668f, -0.076519f, 
    -0.149359f, -0.11269f, -0.110661f, 0.205126f, 0.084733f, -0.183867f, -0.170302f, -0.100692f, 0.18781f, -0.140104f, 
    -0.169909f, -0.098555f, 0.108443f, 0.210838f, 0.099363f, -0.079273f, -0.186248f, -0.080048f, 0.040872f, 0.219374f, 
    0.187291f, 0.159078f, 0.118485f, 0.222133f, -0.218364f, 0.147944f, -0.172992f, 0.142026f, -0.185112f, 0.07774f, 
    -0.059746f, 0.209235f, 0.209881f, -0.093587f, 0.018954f, 0.139776f, 0.139823f, -0.007084f, 0.175587f, 0.172012f, 
    0.182532f, -0.105891f, 0.09111f, -0.029201f, -0.134902f, 0.174781f, -0.159314f, 0.09939f, -0.163852f, 0.004843f, 
    0.184053f, 0.193232f, -0.082051f, 0.065611f, 0.208575f, -0.117447f, -0.09155f, 0.186606f, -0.121401f, -0.068346f, 
    0.029261f, -0.175675f, 0.133421f, 0.081844f, 0.093842f, 0.136052f, -0.094745f, 0.003603f, 0.20799f, -0.074473f, 
    0.146488f, 0.091391f, 0.210147f, -0.181222f, 0.187575f, -0.127569f, -0.180402f, 0.044137f, 0.1462f, -0.163598f, 
    0.119228f, -0.103629f, 0.203401f, -0.076351f, 0.014815f, -0.142051f, 0.068103f, 0.213522f, -0.087296f, -0.055726f, 
    0.057998f, -0.043235f, -0.030351f, -0.00818f, 0.142472f, 0.065893f, -0.048403f, 0.074909f, -0.170946f, -0.057664f, 
    -0.009774f, -0.142006f, -0.037835f, -0.134435f, -0.021029f, -0.09696f, 0.17004f, -0.189271f, 0.003229f, -0.06542f, 
    -0.051842f, 0.15297f, 0.082661f, -0.067794f, -0.144622f, 0.223292f, -0.035936f, -0.171523f, -0.186557f, 0.072966f, 
    0.123822f, -0.032457f, -0.032425f, -0.128433f, 0.089337f, -0.136365f, -0.202816f, -0.045421f, -0.010854f, -0.095135f, 
    0.03971f, -0.146908f, -0.030334f, 0.072639f, -0.113077f, 0.122917f, -0.060337f, 0.164746f, 0.139989f, -0.047516f, 
    0.049437f, -0.097176f, 0.131781f, -0.01165f, 0.100959f, -0.207895f, 0.082039f, -0.19299f, 0.034334f, -0.027784f, 
    -0.018005f, -0.170485f, 0.022452f, -0.087016f, 0.016248f, -0.218323f, 0.16645f, 0.053321f, 0.088566f, 0.161155f, 
    -0.211881f, -0.024379f, 0.004671f, 0.013726f, -0.125411f, 0.034668f, -0.163117f, 0.045845f, -0.079977f, 0.026183f
};

static const float weights_1_out_scales[] = {0.0017503373f, 0.0017533804f, 0.0017513098f};
static const float weights_1_out_zero_points[] = {0.f, 0.f, 0.f};
static const int8_t weights_1_out_scales_frac[] = {24, 24, 24};
static const int weights_1_out_sa_dim = 0;

static const int weights_1_out_fx8_frac = 9;

#define WEIGHTS_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {3, 20, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_1_out_tsr_fx16 = {
    WEIGHTS_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_out_tsr_fx8 = {
    WEIGHTS_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_out_tsr_sa8 = {
    WEIGHTS_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_1_out_fx16(weights_1_out_tsr_fx16, weights_1_out_fx8_frac + 8, weights_1_out_data, 
    sizeof(weights_1_out_data) / sizeof(weights_1_out_data[0]));
tensor_quantizer weights_1_out_fx8(weights_1_out_tsr_fx8, weights_1_out_fx8_frac, weights_1_out_data, 
    sizeof(weights_1_out_data) / sizeof(weights_1_out_data[0]));
tensor_quantizer weights_1_out_sa8(weights_1_out_tsr_sa8, weights_1_out_sa_dim, weights_1_out_data, 
    sizeof(weights_1_out_data) / sizeof(weights_1_out_data[0]), weights_1_out_scales, 
    sizeof(weights_1_out_scales) / sizeof(weights_1_out_scales[0]), 
    weights_1_out_zero_points, sizeof(weights_1_out_zero_points) / sizeof(weights_1_out_zero_points[0]), 
    weights_1_out_scales_frac, sizeof(weights_1_out_scales_frac) / sizeof(weights_1_out_scales_frac[0]));


static const float weights_2_in_data[] = {
    -0.157675f, -0.13132f, -0.209202f, -0.040249f, 0.167291f, 0.084453f, -0.184215f, 0.195827f, -0.073796f, -0.064857f, 
    -0.212797f, 0.211387f, -0.110449f, -0.207841f, 0.022388f, -0.04943f, -0.193556f, -0.189218f, 0.136078f, -0.09357f, 
    -0.138922f, -0.016523f, 0.09644f, 0.152471f, 0.01556f, -0.206298f, 0.105861f, -0.13693f, 0.0391f, 0.057437f, 
    -0.025505f, 0.213507f, 0.051428f, -0.139779f, 0.078843f, -0.077948f, -0.189071f, -0.219581f, 0.093691f, -0.077021f, 
    0.070518f, 0.03659f, -0.06449f, 0.217382f, -0.068314f, -0.004508f, 0.010663f, 0.03317f, 0.144464f, -0.106632f, 
    -0.019078f, -0.183286f, -0.083187f, 0.146924f, 0.058169f, 0.013256f, -0.092034f, -0.052886f, -0.207285f, 0.215235f, 
    -0.017755f, 0.209701f, -0.181653f, 0.1482f, 0.207314f, 0.123087f, 0.04661f, -0.025747f, 0.034975f, 0.094294f, 
    0.21133f, 0.222207f, 0.181223f, -0.216675f, -0.076473f, 0.110179f, -0.026625f, -0.145626f, 0.097688f, 0.076643f, 
    -0.014427f, -0.093898f, 0.090928f, -0.086594f, 0.186672f, -0.14656f, 0.082329f, 0.091682f, -0.208515f, 0.082538f, 
    0.031696f, 0.196668f, -0.021581f, 0.014283f, 0.117486f, -0.078404f, -0.019535f, -0.039605f, 0.179979f, -0.036507f, 
    0.104731f, 0.171864f, -0.160249f, -0.022976f, -0.135177f, 0.123888f, 0.119368f, -0.205682f, -0.017264f, 0.181813f, 
    -0.205127f, 0.130671f, 0.174099f, 0.137585f, -0.197308f, -0.116951f, 0.030173f, -0.036642f, 0.111691f, -0.041954f, 
    -0.109186f, -0.010519f, 0.164961f, -0.134099f, -0.11528f, 0.152413f, -0.206971f, -0.16888f, -0.153069f, 0.071612f, 
    0.068268f, 0.162048f, 0.167455f, 0.198106f, -0.119707f, 0.114641f, -0.044218f, -0.082739f, -0.002091f, 0.102504f, 
    0.197287f, 0.082541f, 0.079665f, -0.134419f, 0.084763f, -0.191103f, 0.220498f, 0.03906f, -0.121612f, 0.11828f, 
    -0.010091f, 0.167711f, -0.163998f, 0.056111f, 0.093379f, -0.204382f, -0.078894f, 0.005882f, 0.151537f, -0.171032f, 
    0.004763f, 0.168335f, 0.021857f, 0.153352f, 0.200542f, -0.114419f, 0.162784f, -0.039324f, 0.029659f, -0.131604f, 
    0.076768f, 0.13611f, 0.0993f, 0.043761f, 0.221269f, 0.173577f, 0.13136f, -0.216222f, -0.204621f, 0.121312f, 
    -0.056402f, 0.213125f, -0.199825f, -0.12529f, 0.011225f, 0.170135f, 0.028755f, 0.156452f, -0.07112f, 0.163104f, 
    -0.214698f, -0.024594f, 0.114433f, -0.069076f, 0.031628f, -0.094206f, -0.149462f, 0.079281f, 0.170459f, -0.029217f, 
    -0.188956f, -0.056117f, 0.065086f, -0.069263f, 0.005953f, 0.123033f, -0.095901f, 0.165684f, 0.03658f, -0.145615f, 
    -0.14231f, -0.194472f, -0.176748f, -0.183871f, 0.217147f, 0.050073f, 0.113614f, -0.15299f, 0.189703f, -0.047341f, 
    -0.059067f, -0.18383f, -0.214141f, 0.001337f, 0.107036f, 0.032763f, -0.215509f, -0.198368f, -0.046436f, -3e-06f, 
    0.104004f, 0.019278f, -0.210288f, 0.18468f, 0.14514f, -0.186203f, -0.024841f, 0.142185f, 0.019056f, -0.088789f
};

static const float weights_2_in_scales[] = {0.0017428f, 0.001729396f, 0.0017354431f};
static const float weights_2_in_zero_points[] = {0.f, 0.f, 0.f};
static const int8_t weights_2_in_scales_frac[] = {24, 24, 24};
static const int weights_2_in_sa_dim = 0;

static const int weights_2_in_fx8_frac = 9;

#define WEIGHTS_2_IN_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {3, 4, 20}, \
    /* .rank =  */ 3

#define WEIGHTS_2_IN_MEMSTR_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {5*21*1, 21*1, 1}, \
    /* .shape = */ {3, 4, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_2_in_tsr_fx16 = {
    WEIGHTS_2_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_memstr_tsr_fx16 = {
    WEIGHTS_2_IN_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_tsr_fx8 = {
    WEIGHTS_2_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_memstr_tsr_fx8 = {
    WEIGHTS_2_IN_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_tsr_sa8 = {
    WEIGHTS_2_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_memstr_tsr_sa8 = {
    WEIGHTS_2_IN_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_2_in_fx16(weights_2_in_tsr_fx16, weights_2_in_fx8_frac + 8, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]));
tensor_quantizer weights_2_in_fx8(weights_2_in_tsr_fx8, weights_2_in_fx8_frac, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]));
tensor_quantizer weights_2_in_sa8(weights_2_in_tsr_sa8, weights_2_in_sa_dim, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]), weights_2_in_scales, 
    sizeof(weights_2_in_scales) / sizeof(weights_2_in_scales[0]), 
    weights_2_in_zero_points, sizeof(weights_2_in_zero_points) / sizeof(weights_2_in_zero_points[0]), 
    weights_2_in_scales_frac, sizeof(weights_2_in_scales_frac) / sizeof(weights_2_in_scales_frac[0]));
tensor_quantizer weights_2_in_memstr_fx16(weights_2_in_memstr_tsr_fx16, weights_2_in_fx8_frac + 8, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]));
tensor_quantizer weights_2_in_memstr_fx8(weights_2_in_memstr_tsr_fx8, weights_2_in_fx8_frac, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]));
tensor_quantizer weights_2_in_memstr_sa8(weights_2_in_memstr_tsr_sa8, weights_2_in_sa_dim, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]), weights_2_in_scales, 
    sizeof(weights_2_in_scales) / sizeof(weights_2_in_scales[0]), 
    weights_2_in_zero_points, sizeof(weights_2_in_zero_points) / sizeof(weights_2_in_zero_points[0]), 
    weights_2_in_scales_frac, sizeof(weights_2_in_scales_frac) / sizeof(weights_2_in_scales_frac[0]));

static const float weights_2_out_data[] = {
    0.068525f, 0.114699f, 0.197586f, -0.104525f, 0.113057f, -0.19294f, 0.060319f, 0.130891f, -0.190745f, 0.2049f, 
    0.091417f, 0.090102f, -0.122695f, -0.121187f, -0.01341f, -0.158268f, 0.126623f, -0.02755f, -0.185983f, -0.082145f, 
    0.10445f, -0.104731f, -0.216622f, 0.066404f, 0.152391f, 0.187354f, 0.077776f, -0.103034f, -0.169988f, 0.19927f, 
    0.102415f, 0.057964f, 0.037383f, 0.157802f, -0.187019f, 0.162456f, 0.116414f, 0.211529f, 0.173619f, 0.049493f, 
    0.213753f, -0.111019f, 0.190961f, -0.076734f, -0.153009f, -0.167267f, 0.18399f, -0.069008f, -0.134717f, -0.150385f, 
    -0.110037f, -0.00937f, -0.057424f, -0.010928f, -0.032231f, -0.053369f, -0.081774f, 0.078093f, 0.017283f, -0.091824f, 
    0.05249f, -0.200666f, 0.19376f, -0.067745f, 0.111891f, 0.038636f, 0.089719f, -0.157966f, 0.013606f, -0.012527f, 
    -0.04839f, -0.189898f, 0.034355f, -0.186811f, -0.078885f, 0.036121f, 0.003657f, -0.087395f, -0.011912f, 0.105695f, 
    -0.100741f, -0.103495f, -0.057066f, 0.15247f, -0.198044f, 0.120311f, -0.208491f, -0.174503f, -0.208361f, -0.176319f, 
    -0.032955f, 0.00856f, 0.099735f, -0.105013f, -0.000936f, 0.057661f, 0.018188f, 0.196341f, 0.021386f, 0.037135f, 
    0.029254f, -0.014277f, -0.003478f, 0.154231f, -0.043528f, 0.157068f, -0.027377f, 0.117442f, -0.116282f, -0.068963f, 
    0.020597f, 0.050781f, -0.017524f, -0.155914f, -0.08988f, -0.003253f, -0.018981f, -0.043738f, 0.010287f, 0.00422f, 
    -0.209955f, 0.148435f, -0.011699f, 0.099893f, -0.140833f, -0.080043f, 0.068435f, 0.131225f, -0.209892f, 0.177693f, 
    0.035649f, 0.042666f, 0.094313f, -0.206736f, 0.219828f, -0.12985f, -0.095641f, -0.035385f, -0.044445f, 0.076934f, 
    0.218756f, 0.020266f, 0.173999f, 0.16175f, 0.1091f, 0.084503f, -0.033612f, -0.065811f, -0.134018f, -0.164225f, 
    0.196819f, 0.205065f, -0.081608f, 0.188501f, 0.066976f, -0.159208f, -0.049111f, 0.170357f, 0.104416f, -0.104906f, 
    0.14785f, 0.085632f, -0.12799f, -0.146484f, 0.217414f, -0.066136f, 0.106986f, 0.005543f, 0.018308f, 0.04397f, 
    0.174649f, 0.001123f, 0.086315f, -0.156137f, -0.166385f, 0.059409f, 0.17583f, -0.210707f, -0.130384f, 0.133693f, 
    0.125025f, -0.092457f, -0.012603f, 0.076919f, -0.018574f, 0.131899f, -0.146658f, 0.092114f, 0.174929f, -0.037126f, 
    0.036365f, -0.067384f, -0.114266f, -0.134458f, -0.151045f, 0.120186f, 0.218845f, -0.123148f, 0.107146f, -0.203105f, 
    0.057071f, 0.003968f, 0.147501f, 0.178723f, 0.1055f, 0.007121f, -0.031556f, 0.21807f, -0.191914f, 0.18535f, 
    -0.136473f, 0.04454f, 0.038802f, 0.026706f, 0.114067f, -0.027817f, 0.022497f, -0.019931f, 0.005584f, -0.123284f, 
    0.191306f, 0.172815f, -0.133668f, 0.137139f, -0.004326f, 0.180041f, -0.131448f, 0.107389f, 0.039553f, -0.041846f, 
    -0.043376f, -0.094146f, 0.024814f, -0.089967f, 0.060401f, 0.218107f, 0.019256f, 0.013018f, -0.061465f, 0.203227f, 
    0.212789f, 0.160906f, 0.008138f, 0.0173f, 0.003494f, 0.196697f, 0.070275f, -0.104213f, 0.04641f, -0.023641f, 
    0.004695f, -0.191617f, 0.074069f, 0.008888f, -0.208837f, 0.087778f, 0.031159f, -0.064176f, 0.131992f, -0.011589f, 
    -0.191593f, 0.042099f, -0.222f, -0.002263f, 0.133596f, -0.151736f, 0.17672f, 0.180861f, 0.016436f, -0.192122f, 
    -0.057821f, 0.162565f, 0.051503f, -0.032063f, -0.173921f, -0.116993f, -0.02782f, 0.049363f, -0.032955f, 0.13285f, 
    0.145064f, 0.069712f, 0.027724f, 0.0125f, -0.060354f, -0.141534f, 0.187887f, -0.215459f, 0.031932f, -0.033278f, 
    -0.185056f, 0.081782f, 0.213726f, -0.20442f, -0.056695f, -0.116037f, -0.035021f, -0.033059f, -0.027146f, -0.185033f, 
    -0.042574f, -0.094861f, -0.073111f, -0.023546f, -0.190775f, -0.060708f, -0.05216f, 0.197734f, 0.168326f, -0.063831f, 
    0.001516f, -0.134745f, -0.121722f, 0.106845f, 0.077811f, -0.177079f, -0.134263f, 0.001976f, -0.192334f, 0.079436f, 
    0.080137f, -0.191047f, 0.177615f, 0.137057f, -0.118162f, 0.134316f, -0.002053f, 0.129301f, -0.095307f, -0.185139f, 
    0.084706f, -0.103594f, -0.013925f, 0.011624f, 0.196541f, -0.096469f, 0.138572f, -0.0001f, -0.134784f, 0.053759f, 
    -0.067699f, 0.12309f, 0.135987f, 0.072113f, -0.030397f, 0.126888f, 0.167262f, -0.164475f, -0.013556f, -0.015789f, 
    0.032223f, -0.120452f, -0.127306f, 0.170013f, 0.04114f, 0.037574f, -0.203108f, 0.069819f, 0.205827f, 0.11381f, 
    0.109783f, 0.198471f, 0.117922f, -0.018296f, -0.16102f, -0.026298f, -0.187585f, 0.129078f, 0.207006f, 0.124716f, 
    0.218182f, 0.076109f, 0.112021f, -0.067374f, -0.026949f, -0.070086f, -0.115718f, -0.153033f, -0.192357f, 0.101811f, 
    0.174375f, 0.223327f, 0.042777f, 0.218252f, 0.169092f, 0.117694f, -0.13157f, 0.128294f, -0.054425f, -0.142857f, 
    0.012572f, 0.041443f, -0.212249f, 0.14939f, -0.213897f, 0.200547f, -0.136668f, -0.00399f, 0.131714f, -0.002284f, 
    0.12907f, -0.22238f, 0.181897f, -0.151009f, -0.005794f, -0.043274f, 0.19296f, 0.147745f, 0.150966f, -0.223325f, 
    0.172692f, -0.106632f, 0.072704f, 0.037006f, 0.127527f, -0.131676f, -0.038908f, -0.205482f, 0.049013f, 0.133361f, 
    -0.186232f, 0.019885f, -0.099558f, -0.106074f, 0.16869f, -0.036611f, 0.083479f, 0.115477f, -0.110308f, 0.109624f, 
    -0.121333f, 0.197771f, -0.134909f, -0.032103f, -0.019464f, -0.011371f, 0.16092f, 0.052417f, -0.184128f, -0.221624f, 
    -0.123953f, -0.030453f, 0.072036f, 0.157322f, -0.051341f, 0.024384f, 0.145912f, 0.15499f, 0.043087f, -0.14254f, 
    0.107883f, -0.006959f, 0.018785f, -0.010736f, -0.075928f, -0.18368f, 0.190992f, -0.090181f, -0.082644f, -0.019713f, 
    -0.084372f, -0.206443f, 0.189986f, 0.222552f, -0.017017f, -0.128407f, 0.136711f, -0.202064f, -0.136777f, 0.070724f, 
    -0.166018f, -0.100583f, 0.034291f, 0.209661f, -0.151806f, 0.191198f, 0.195045f, -0.025349f, 0.064754f, 0.047471f, 
    -0.102255f, -0.038672f, 0.192438f, 0.129469f, -0.178369f, -0.075923f, 0.17702f, 0.065942f, -0.126479f, 0.127838f, 
    0.048216f, 0.021614f, 0.094559f, 0.190457f, -0.029209f, -0.007795f, -0.122983f, -0.197116f, 0.112471f, 0.006555f, 
    -0.206462f, -0.171218f, 0.004791f, -0.006318f, -0.066449f, -0.044819f, -0.181554f, 0.075886f, 0.222251f, -0.021743f, 
    -0.090635f, -0.142114f, 0.01193f, 0.055113f, 0.079494f, 0.065638f, 0.004862f, -0.176648f, -0.04117f, 0.088062f, 
    -0.201724f, 0.089787f, 0.023093f, 0.091139f, 0.07988f, 0.103697f, -0.172753f, -0.102603f, 0.115285f, 0.107416f, 
    0.178598f, 0.164375f, -0.139492f, -0.106373f, 0.086742f, -0.06101f, -0.189679f, -0.12762f, -0.1082f, 0.057598f, 
    -0.18641f, -0.021871f, -0.071683f, -0.063181f, -0.055184f, 0.109094f, -0.201095f, -0.214643f, -0.000274f, 0.029453f, 
    -0.194807f, -0.015433f, -0.069904f, -0.222731f, -0.207219f, 0.063036f, -0.032825f, -0.153777f, -0.070018f, -0.159016f, 
    -0.157604f, -0.062811f, -0.210607f, 0.022693f, -0.030589f, 0.141416f, -0.074583f, 0.109644f, 0.017539f, 0.15744f, 
    -0.191227f, 0.061118f, 0.187821f, 0.128703f, 0.14104f, 0.09983f, -0.069788f, -0.190712f, 0.158622f, 0.101481f, 
    -0.194638f, -0.13789f, -0.188812f, 0.069309f, -0.031579f, -0.207409f, -0.037989f, -0.139396f, -0.073076f, 0.16963f, 
    -0.21418f, 0.002855f, -0.18122f, -0.139338f, 0.001277f, -0.085983f, 0.126945f, 0.181802f, 0.170099f, -0.120442f, 
    0.051413f, -0.086817f, -0.198555f, 0.013416f, 0.071341f, -0.051063f, -0.213963f, 0.10697f, 0.205282f, 0.151309f, 
    -0.008778f, -0.163877f, -0.097464f, 0.00097f, -0.000293f, -0.054414f, -0.004817f, -0.218128f, 0.166119f, -0.086828f, 
    0.039327f, 0.154409f, -0.064963f, -0.150493f, 0.118221f, 0.114254f, 0.203557f, 0.179258f, -0.217744f, 0.105103f, 
    0.16071f, 0.137173f, 0.08421f, 0.207042f, 0.1256f, 0.022773f, -0.192193f, -0.094089f, 0.084758f, 0.167507f, 
    0.170604f, -0.193937f, 0.101892f, 0.215944f, -0.01027f, -0.125958f, -0.061543f, 0.197051f, -0.189185f, 0.216122f, 
    0.123931f, -0.183177f, 0.182421f, -0.193356f, -0.163399f, 0.047304f, -0.0376f, -0.135163f, -0.218625f, -0.013294f, 
    -0.020839f, 0.125507f, -0.130486f, 0.222258f, 0.031379f, -0.010947f, 0.061805f, 0.004167f, -0.068684f, 0.147394f, 
    0.092882f, 0.035762f, 0.179142f, -0.088823f, 0.175959f, 0.05086f, -0.031447f, -0.118618f, 0.09272f, -0.009819f, 
    -0.195866f, -0.101795f, -0.114669f, -0.005263f, -0.044292f, -0.148743f, -0.190513f, 0.181229f, 0.18035f, -0.203097f, 
    -0.137572f, -0.064596f, -0.008049f, -0.061048f, 0.110804f, -0.031366f, -0.002454f, 0.070658f, 0.003816f, 0.186379f, 
    0.033032f, 0.137481f, 0.213687f, -0.175716f, -0.026607f, -0.21091f, -0.069247f, -0.014079f, -0.031328f, -0.095673f, 
    -0.046596f, 0.057667f, -0.083329f, -0.111598f, 0.111881f, 0.175102f, 0.184945f, -0.018317f, -0.008727f, -0.055846f, 
    -0.214024f, 0.089621f, -0.01736f, 0.029081f, 0.140228f, 0.03022f, 0.102781f, 0.139055f, -0.180772f, -0.055345f, 
    -0.059632f, -0.117734f, -0.048084f, 0.102254f, -0.101982f, 0.079945f, 0.200014f, -0.028844f, -0.127193f, -0.027752f, 
    0.121012f, -0.106623f, 0.128834f, 0.014697f, -0.06343f, 0.062782f, 0.157897f, 0.107253f, -0.192317f, 0.01522f, 
    0.078582f, -0.148647f, -0.177987f, 0.068292f, 0.220617f, 0.103218f, 0.034454f, -0.042315f, -0.121203f, -0.138565f, 
    0.168416f, 0.1029f, -0.206357f, 0.155011f, -0.064106f, 0.151745f, 0.20611f, -0.068111f, -0.085297f, 0.013981f, 
    0.087895f, 0.099915f, 0.022881f, -0.017397f, -0.139704f, -0.128235f, 0.086896f, 0.118738f, -0.037568f, 0.218481f, 
    0.195708f, -0.190342f, 0.018876f, -0.184217f, 0.039237f, -0.038557f, -0.14342f, 0.205273f, -0.097973f, -0.098513f, 
    0.172248f, -0.218509f, -0.191845f, -0.166035f, 0.142485f, 0.037395f, 0.096994f, -0.047404f, -0.194572f, 0.042893f, 
    -0.173054f, -0.071391f, -0.02687f, 0.209997f, 0.160827f, 0.123739f, 0.026744f, -0.163382f, -0.098086f, 0.184068f, 
    -0.181535f, -0.141167f, 0.096031f, -0.077692f, -0.172029f, -0.165256f, 0.02557f, 0.176987f, -0.003612f, 0.066817f, 
    -0.023405f, -0.186616f, 0.221935f, 0.130719f, 0.174f, -0.169662f, -0.026616f, -0.208882f, -0.113242f, -0.062366f, 
    0.056183f, -0.046438f, -0.219189f, -0.010173f, -0.005217f, -0.182558f, -0.03457f, 0.069526f, -0.073143f, 0.109441f, 
    0.038448f, -0.125411f, -0.210529f, 0.116598f, 0.125234f, 0.088603f, -0.135294f, -0.082142f, -0.031105f, -0.11725f, 
    -0.217391f, 0.154879f, 0.074258f, 0.062511f, 0.015743f, 0.156823f, 0.004031f, 0.077044f, -0.138505f, -0.120734f, 
    -0.127479f, 0.059572f, 0.217136f, -0.064659f, -0.201038f, 0.130876f, -0.21038f, -0.158562f, -0.075682f, -0.117092f, 
    -0.050745f, -0.09344f, -0.002148f, 0.070673f, -0.119094f, 0.109846f, 0.176554f, 0.177647f, -0.006416f, -0.094489f, 
    -0.049529f, 0.047704f, 0.207294f, 0.21102f, 0.110401f, 0.038477f, 0.168997f, 0.132265f, -0.072379f, -0.043395f, 
    -0.163581f, 0.083939f, 0.219599f, 0.173836f, 0.138192f, -0.074663f, -0.155206f, 0.060819f, 0.100421f, 0.024702f, 
    0.107036f, 0.054103f, 0.006004f, -0.067268f, 0.03876f, -0.000158f, 0.12833f, -0.030163f, -0.051903f, -0.154903f, 
    -0.022755f, -0.05467f, -0.165388f, -0.030747f, 0.053978f, -0.101192f, 0.031446f, 0.139772f, -0.112213f, -0.09691f, 
    -0.083818f, -0.11243f, 0.027937f, -0.016847f, 0.050002f, -0.024882f, 0.108928f, 0.176109f, 0.208015f, 0.200566f, 
    0.005105f, -0.216561f, -0.006131f, -0.11318f, 0.15523f, -0.021868f, 0.020238f, 0.065449f, 0.055522f, -0.01718f, 
    -0.056668f, 0.191262f, 0.207177f, -0.148909f, -0.13363f, 0.13531f, 0.042507f, 0.149766f, -0.078887f, -0.082267f, 
    -0.170562f, -0.09951f, 0.004197f, -0.039871f, -0.222096f, 0.045043f, 0.07311f, -0.197092f, 0.099019f, 0.092068f, 
    0.047046f, 0.056947f, -0.042113f, 0.121475f, -0.189881f, -0.06096f, -0.074453f, -0.005004f, 0.222165f, 0.133475f, 
    -0.074693f, 0.158577f, -0.211946f, 0.034781f, 0.213826f, 0.112239f, -0.217206f, -0.062048f, -0.05127f, -0.162804f, 
    0.208801f, -0.137435f, -0.188103f, 0.018053f, 0.198928f, -0.049806f, -0.183871f, 0.201982f, 0.143838f, -0.165814f, 
    0.009688f, 0.036838f, -0.158699f, 0.131628f, 0.027929f, 0.094583f, 0.152259f, -0.005348f, -0.03444f, -0.168712f, 
    0.024763f, -0.06799f, 0.139666f, -0.130529f, -0.040706f, 0.192757f, -0.203023f, 0.122848f, -0.127816f, 0.008689f, 
    0.051523f, -0.075591f, -0.039611f, 0.100816f, 0.1094f, 0.212367f, 0.069126f, 0.063264f, 0.118772f, -0.058138f, 
    -0.13916f, -0.169261f, -0.124966f, 0.016591f, -0.124588f, 0.093276f, 0.08657f, 0.091978f, -0.207222f, -0.202446f, 
    -0.053683f, -0.025211f, -0.053414f, -0.21777f, -0.160075f, -0.064569f, 0.197581f, 0.19515f, 0.095899f, 0.033626f, 
    0.015387f, 0.02512f, 0.19871f, 0.203419f, -0.166526f, 0.197689f, 0.200329f, 0.139518f, 0.05279f, 0.148768f, 
    0.165276f, -0.104791f, 0.19452f, 0.20174f, 0.122138f, 0.221097f, 0.209125f, -0.119773f, -0.032825f, 0.110211f, 
    -0.002368f, 0.085204f, -0.012856f, 0.043761f, -0.118742f, 0.048511f, 0.078209f, 0.086665f, -0.14764f, -0.049864f, 
    0.200326f, -0.030508f, -0.203405f, -0.151985f, 0.007075f, -0.000271f, 0.153676f, 0.075144f, 0.207235f, 0.220836f, 
    0.190253f, 0.036963f, 0.023693f, -0.022125f, -0.033582f, 0.122188f, -0.098864f, 0.164963f, -0.104131f, 0.079014f, 
    -0.085994f, 0.034874f, -0.101271f, 0.127534f, -0.05131f, -0.184084f, 0.057843f, 0.12818f, -0.02982f, -0.095226f, 
    -0.064603f, -0.103766f, -0.032144f, -0.005316f, -0.003271f, 0.111278f, -0.211676f, 0.050528f, -0.102433f, -0.02239f, 
    -0.162697f, 0.134006f, 0.135829f, -0.103663f, 0.151229f, 0.105806f, -0.213466f, -0.217371f, 0.043229f, 0.183923f, 
    -0.152554f, -0.007588f, 0.12162f, -0.161566f, 0.006036f, -0.023921f, 0.042482f, 0.087196f, 0.016458f, 0.113824f, 
    0.003885f, 0.052522f, -0.030643f, 0.174326f, 0.094471f, 0.005461f, -0.020614f, 0.173721f, 0.073656f, 0.085577f, 
    -0.158374f, -0.221368f, 0.171202f, -0.088648f, 0.007625f, 0.201362f, 0.118796f, 0.096883f, -0.032857f, -0.057883f, 
    -0.083684f, 0.064612f, -0.050523f, 0.080677f, -0.132872f, 0.129686f, 0.174455f, -0.161849f, 0.198926f, -0.072801f, 
    0.065476f, -0.140307f, -0.013589f, 0.099827f, -0.171371f, 0.056867f, 0.098155f, -0.070035f, 0.042613f, -0.016014f, 
    -0.18194f, 0.207542f, -0.191853f, 0.07581f, 0.045649f, -0.132439f, 0.154865f, 0.134806f, 0.100407f, 0.182939f, 
    0.084081f, 0.071737f, 0.159214f, 0.202822f, -0.211374f, 0.17035f, -0.097658f, -0.116638f, -0.040986f, 0.024103f, 
    0.113283f, -0.038142f, -0.013565f, 0.094902f, -0.167331f, 0.213341f, 0.176514f, 0.04396f, -0.138906f, -0.033482f
};

static const float weights_2_out_scales[] = {0.0017515844f, 0.0017515686f, 0.0017424705f};
static const float weights_2_out_zero_points[] = {0.f, 0.f, 0.f};
static const int8_t weights_2_out_scales_frac[] = {24, 24, 24};
static const int weights_2_out_sa_dim = 0;

static const int weights_2_out_fx8_frac = 9;

#define WEIGHTS_2_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {3, 20, 20}, \
    /* .rank =  */ 3

#define WEIGHTS_2_OUT_MEMSTR_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {21*21*1, 21*1, 1}, \
    /* .shape = */ {3, 20, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_2_out_tsr_fx16 = {
    WEIGHTS_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_memstr_tsr_fx16 = {
    WEIGHTS_2_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_tsr_fx8 = {
    WEIGHTS_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_memstr_tsr_fx8 = {
    WEIGHTS_2_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_tsr_sa8 = {
    WEIGHTS_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_memstr_tsr_sa8 = {
    WEIGHTS_2_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_2_out_fx16(weights_2_out_tsr_fx16, weights_2_out_fx8_frac + 8, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]));
tensor_quantizer weights_2_out_fx8(weights_2_out_tsr_fx8, weights_2_out_fx8_frac, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]));
tensor_quantizer weights_2_out_sa8(weights_2_out_tsr_sa8, weights_2_out_sa_dim, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]), weights_2_out_scales, 
    sizeof(weights_2_out_scales) / sizeof(weights_2_out_scales[0]), 
    weights_2_out_zero_points, sizeof(weights_2_out_zero_points) / sizeof(weights_2_out_zero_points[0]), 
    weights_2_out_scales_frac, sizeof(weights_2_out_scales_frac) / sizeof(weights_2_out_scales_frac[0]));
tensor_quantizer weights_2_out_memstr_fx16(weights_2_out_memstr_tsr_fx16, weights_2_out_fx8_frac + 8, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]));
tensor_quantizer weights_2_out_memstr_fx8(weights_2_out_memstr_tsr_fx8, weights_2_out_fx8_frac, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]));
tensor_quantizer weights_2_out_memstr_sa8(weights_2_out_memstr_tsr_sa8, weights_2_out_sa_dim, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]), weights_2_out_scales, 
    sizeof(weights_2_out_scales) / sizeof(weights_2_out_scales[0]), 
    weights_2_out_zero_points, sizeof(weights_2_out_zero_points) / sizeof(weights_2_out_zero_points[0]), 
    weights_2_out_scales_frac, sizeof(weights_2_out_scales_frac) / sizeof(weights_2_out_scales_frac[0]));

static const float bias_1_data[] = {
    -0.034246f, 0.10525f, -0.043018f, -0.10086f, -0.059956f, -0.216812f, -0.006091f, 0.137434f, -0.129426f, -0.160665f, 
    0.177701f, -0.17391f, -0.19557f, -0.076254f, -0.067431f, 0.110115f, 0.131118f, -0.176327f, 0.022769f, 0.14679f, 
    0.218772f, -0.180311f, 0.075848f, 0.204376f, -0.183772f, 0.106803f, -0.061857f, -0.138607f, 0.037643f, 0.209307f, 
    0.091732f, -0.007571f, -0.18188f, -0.074463f, -0.047641f, 0.110533f, 0.071528f, -0.208097f, -0.065866f, 0.084148f, 
    0.077246f, 0.036265f, -0.126941f, 0.015952f, 0.052637f, -0.19298f, -0.069902f, -0.072302f, 0.009395f, -0.048665f, 
    0.064589f, 0.127529f, -0.126423f, -0.054092f, 0.01993f, -0.166474f, 0.048262f, 0.156415f, -0.082046f, 0.098468f
};

static const float bias_1_i1_w1_scales[] = {0.0000221256080f, 0.0000218093403f, 0.0000209322369f};
static const float bias_1_i1_w1_zero_points[] = {0.f, 0.f, 0.f};
static const int8_t bias_1_i1_w1_scales_frac[] = {30, 30, 30};
static const int bias_1_i1_w1_sa_dim = 0;

static const float bias_1_i2_w2_scales[] = {0.000029262324f, 0.000029037265f, 0.000029138798f};
static const float bias_1_i2_w2_zero_points[] = {0.f, 0.f, 0.f};
static const int8_t bias_1_i2_w2_scales_frac[] = {30, 30, 30};
static const int bias_1_i2_w2_sa_dim = 0;

static const int bias_1_fx8_frac = 9;

#define BIAS_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {3, 20}, \
    /* .rank =  */ 2

static const mli_tensor bias_1_tsr_fx16 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_tsr_fx8 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_i1_w1_tsr_sa32 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_i2_w2_tsr_sa32 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

tensor_quantizer bias_1_fx16(bias_1_tsr_fx16, bias_1_fx8_frac + 8, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]));
tensor_quantizer bias_1_fx8(bias_1_tsr_fx8, bias_1_fx8_frac, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]));
tensor_quantizer bias_1_i1_w1_sa32(bias_1_i1_w1_tsr_sa32, bias_1_i1_w1_sa_dim, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]), bias_1_i1_w1_scales, 
    sizeof(bias_1_i1_w1_scales) / sizeof(bias_1_i1_w1_scales[0]), 
    bias_1_i1_w1_zero_points, sizeof(bias_1_i1_w1_zero_points) / sizeof(bias_1_i1_w1_zero_points[0]), 
    bias_1_i1_w1_scales_frac, sizeof(bias_1_i1_w1_scales_frac) / sizeof(bias_1_i1_w1_scales_frac[0]));
tensor_quantizer bias_1_i2_w2_sa32(bias_1_i2_w2_tsr_sa32, bias_1_i2_w2_sa_dim, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]), bias_1_i2_w2_scales, 
    sizeof(bias_1_i2_w2_scales) / sizeof(bias_1_i2_w2_scales[0]), 
    bias_1_i2_w2_zero_points, sizeof(bias_1_i2_w2_zero_points) / sizeof(bias_1_i2_w2_zero_points[0]), 
    bias_1_i2_w2_scales_frac, sizeof(bias_1_i2_w2_scales_frac) / sizeof(bias_1_i2_w2_scales_frac[0]));


static const float test_1_out_data[] = {
    -0.30661964f, -0.10409623f, -0.26000315f, -0.17552134f, 0.46762604f, -0.6008749f, -0.33815265f, 0.03946644f, 1.1952524f, 0.0210439f, 
    -0.7586105f, 0.27300188f, 1.1638665f, 0.11724947f, 0.07598992f, -0.81154436f, -1.035692f, 0.18720526f, 0.30939978f, -0.03248267f
};

static const float test_1_out_scale = 0.008748801f;
static const float test_1_out_zero_point = 0.07978022f;
static const int8_t test_1_out_scales_frac[] = {21};
static const int test_1_out_sa_dim = -1;

static const int test_1_out_fx8_frac = 6;


#define TEST_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_1_out_tsr_fx16 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_1_out_tsr_sa8 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_1_out_fx16(test_1_out_tsr_fx16, test_1_out_fx8_frac + 8, test_1_out_data, 
    sizeof(test_1_out_data) / sizeof(test_1_out_data[0]));
tensor_quantizer test_1_out_sa8(test_1_out_tsr_sa8, test_1_out_sa_dim, test_1_out_data, 
    sizeof(test_1_out_data) / sizeof(test_1_out_data[0]), 
    &test_1_out_scale, 1, &test_1_out_zero_point, 1, test_1_out_scales_frac, 1);


static const float test_3_out_data[] = {
    -0.137270f, 0.883942f, 0.206855f, 0.155947f, 0.470238f, -0.584517f, -0.132006f, -0.218036f, 0.858054f, -0.351708f, 
    -0.866776f, 0.111959f, 1.280300f, 0.126707f, -0.523018f, -1.455990f, -1.630692f, 0.177274f, 0.140782f, -0.091288f, 
    -0.141775f, 0.591927f, 0.111687f, 0.266326f, 0.212543f, -0.319174f, -0.018949f, -0.107763f, 0.536127f, -0.213547f, 
    -0.497070f, -0.080956f, 0.566900f, -0.009504f, -0.022417f, -1.109116f, -0.779222f, 0.073175f, 0.126146f, -0.059462f, 
    -0.001843f, 0.314244f, 0.024605f, 0.214585f, 0.035234f, -0.293391f, -0.041076f, -0.257000f, 0.303070f, -0.071296f, 
    -0.224781f, -0.000265f, 0.201299f, 0.056607f, -0.177124f, -0.853900f, -0.476303f, 0.224019f, 0.025265f, -0.070109f, 
    0.109196f, 0.318350f, -0.254464f, 0.251860f, 0.135053f, -0.314301f, 0.060316f, -0.333707f, 0.107032f, 0.003586f, 
    0.005450f, 0.153610f, 0.147020f, 0.210721f, 0.013814f, -0.603905f, -0.228023f, 0.239160f, -0.096392f, 0.042063f, 
    -0.069624f, 0.360709f, -0.284819f, 0.108113f, 0.140203f, -0.048453f, 0.063913f, -0.007400f, 0.007813f, 0.047653f, 
    -0.125065f, 0.052623f, 0.049982f, -0.078486f, 0.144740f, -0.434549f, -0.067447f, 0.179399f, 0.059059f, 0.052100f, 
    -0.140690f, 0.075440f, -0.097203f, 0.016940f, 0.052585f, -0.035958f, -0.148236f, 0.006063f, 0.042269f, -0.126669f, 
    -0.075260f, -0.178957f, -0.303212f, -0.130907f, 0.192503f, -0.395476f, 0.082903f, 0.160865f, 0.189023f, -0.009747f, 
    -0.155093f, 0.287344f, -0.178494f, -0.060414f, 0.138995f, 0.004688f, -0.030404f, 0.152516f, 0.021413f, -0.091220f, 
    -0.230813f, -0.074632f, -0.170084f, -0.222264f, 0.287629f, -0.267091f, 0.054156f, 0.004283f, 0.189932f, 0.035331f, 
    -0.060218f, 0.178047f, -0.112378f, 0.091570f, 0.246349f, -0.175102f, -0.010834f, -0.041471f, 0.052773f, -0.228495f, 
    -0.007416f, 0.082403f, -0.245330f, 0.001562f, 0.375519f, -0.203786f, 0.180344f, -0.069072f, -0.049017f, 0.105085f, 
    0.114646f, 0.070571f, -0.045637f, 0.108196f, 0.090388f, -0.286613f, -0.018848f, -0.176731f, 0.000737f, -0.069607f, 
    0.130937f, 0.194451f, -0.153109f, 0.100225f, 0.001773f, -0.236784f, 0.095150f, 0.141258f, -0.167601f, 0.111986f, 
    0.097019f, -0.146596f, 0.093168f, 0.086031f, -0.046685f, -0.294995f, -0.135299f, -0.202702f, 0.037610f, -0.131789f, 
    0.207825f, 0.041400f, -0.278639f, 0.043856f, -0.136107f, -0.196677f, 0.138992f, 0.186213f, -0.119820f, 0.073178f
};

static const float test_3_out_scale = 0.011415654f;
static const float test_3_out_zero_point = -0.17519581f;
static const int8_t test_3_out_scales_frac[] = {21};
static const int test_3_out_sa_dim = -1;

static const int test_3_out_fx8_frac = 6;

#define TEST_3_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_3_out_tsr_fx16 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_3_out_tsr_sa8 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_3_out_fx16(test_3_out_tsr_fx16, test_3_out_fx8_frac + 8, test_3_out_data, 
    sizeof(test_3_out_data) / sizeof(test_3_out_data[0]));
tensor_quantizer test_3_out_sa8(test_3_out_tsr_sa8, test_3_out_sa_dim, test_3_out_data, 
    sizeof(test_3_out_data) / sizeof(test_3_out_data[0]), 
    &test_3_out_scale, 1, &test_3_out_zero_point, 1, test_3_out_scales_frac, 1);


static const float test_4_out_data[] = {
    -0.170576f, 0.887337f, 0.319522f, 0.198049f, 0.667057f, -0.602429f, 0.005877f, -0.107332f, 0.868602f, -0.444758f, 
    -0.743635f, 0.148627f, 1.190897f, 0.098185f, -0.172418f, -1.388649f, -1.356309f, 0.050208f, 0.099344f, -0.032425f, 
    0.030362f, 0.570093f, 0.191630f, 0.416364f, 0.322595f, -0.512855f, 0.132217f, -0.338573f, 0.434177f, -0.180496f, 
    -0.281801f, 0.205145f, 0.721560f, 0.177213f, -0.273370f, -1.042342f, -0.829848f, 0.147517f, -0.063135f, 0.027282f, 
    -0.025010f, 0.342478f, 0.025910f, 0.459375f, 0.321986f, -0.435901f, 0.124197f, -0.360684f, 0.247119f, -0.249315f, 
    0.045782f, 0.188785f, 0.254729f, 0.150138f, 0.200695f, -0.690490f, -0.196467f, 0.016491f, -0.173292f, 0.077521f, 
    -0.153757f, 0.408610f, -0.075627f, 0.260205f, 0.239342f, -0.098643f, 0.120811f, 0.004545f, 0.083262f, -0.120374f, 
    -0.128523f, 0.055121f, 0.133194f, -0.126884f, 0.303845f, -0.410611f, 0.007845f, 0.018163f, -0.007299f, 0.084295f, 
    -0.189892f, 0.100581f, 0.009797f, 0.114852f, 0.082500f, -0.051899f, -0.119328f, 0.001569f, 0.075275f, -0.197731f, 
    -0.085413f, -0.175775f, -0.234342f, -0.146263f, 0.274950f, -0.373192f, 0.115967f, 0.095472f, 0.143828f, 0.008290f, 
    -0.154332f, 0.285468f, -0.159312f, -0.024617f, 0.119329f, 0.030335f, -0.058067f, 0.130696f, 0.009754f, -0.049853f, 
    -0.229409f, -0.067045f, -0.131803f, -0.183740f, 0.287637f, -0.313061f, -0.007268f, 0.105257f, 0.176501f, 0.020070f, 
    0.074070f, 0.316383f, -0.299726f, 0.072777f, 0.214834f, -0.154271f, 0.050405f, -0.097432f, -0.044470f, 0.013340f, 
    -0.044934f, 0.111582f, -0.037549f, 0.153445f, 0.212623f, -0.316230f, -0.037370f, 0.191820f, -0.004686f, 0.113747f, 
    0.099446f, 0.094908f, -0.172583f, 0.036881f, 0.060187f, -0.175327f, -0.055647f, -0.152107f, -0.047412f, 0.040561f, 
    0.052741f, 0.075150f, -0.161091f, 0.108878f, -0.060999f, -0.350374f, -0.014923f, 0.306194f, 0.001696f, 0.067388f, 
    -0.040750f, -0.001922f, -0.114889f, -0.031471f, 0.034341f, -0.083785f, -0.135812f, -0.032757f, -0.016347f, -0.067810f, 
    -0.002193f, -0.068368f, -0.298545f, -0.055251f, 0.035533f, -0.295874f, 0.080906f, 0.211894f, 0.141444f, 0.031143f, 
    0.081110f, -0.234024f, -0.010155f, -0.105633f, -0.267663f, -0.188642f, -0.241763f, -0.190799f, 0.013054f, 0.022937f, 
    0.092674f, -0.041732f, -0.362860f, -0.011630f, -0.358537f, -0.362576f, 0.034853f, 0.334880f, 0.092619f, -0.041465f
};

static const float test_4_out_scale = 0.010115866f;
static const float test_4_out_zero_point = -0.09887636f;
static const int8_t test_4_out_scales_frac[] = {21};
static const int test_4_out_sa_dim = -1;

static const int test_4_out_fx8_frac = 6;

#define TEST_4_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_4_out_tsr_fx16 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_4_out_tsr_sa8 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_4_out_fx16(test_4_out_tsr_fx16, test_4_out_fx8_frac + 8, test_4_out_data, 
    sizeof(test_4_out_data) / sizeof(test_4_out_data[0]));
tensor_quantizer test_4_out_sa8(test_4_out_tsr_sa8, test_4_out_sa_dim, test_4_out_data, 
    sizeof(test_4_out_data) / sizeof(test_4_out_data[0]), 
    &test_4_out_scale, 1, &test_4_out_zero_point, 1, test_4_out_scales_frac, 1);


static const float test_5_out_data[] = {
    0.097019f, -0.146596f, 0.093168f, 0.086031f, -0.046685f, -0.294995f, -0.135299f, -0.202702f, 0.037610f, -0.131789f, 
    0.207825f, 0.041400f, -0.278639f, 0.043856f, -0.136107f, -0.196677f, 0.138992f, 0.186213f, -0.119820f, 0.073178
};

static const float test_5_out_scale = 0.0019718434f;
static const float test_5_out_zero_point = -0.043584973f;
static const int8_t test_5_out_scales_frac[] = {23};
static const int test_5_out_sa_dim = -1;

static const int test_5_out_fx8_frac = 8;

#define TEST_5_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_5_out_tsr_fx16 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_5_out_tsr_sa8 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_5_out_fx16(test_5_out_tsr_fx16, test_5_out_fx8_frac + 8, test_5_out_data, 
    sizeof(test_5_out_data) / sizeof(test_5_out_data[0]));
tensor_quantizer test_5_out_sa8(test_5_out_tsr_sa8, test_5_out_sa_dim, test_5_out_data, 
    sizeof(test_5_out_data) / sizeof(test_5_out_data[0]), 
    &test_5_out_scale, 1, &test_5_out_zero_point, 1, test_5_out_scales_frac, 1);


static const float test_6_out_data[] = {
    0.081110f, -0.234024f, -0.010155f, -0.105633f, -0.267663f, -0.188642f, -0.241763f, -0.190799f, 0.013054f, 0.022937f, 
    0.092674f, -0.041732f, -0.362860f, -0.011630f, -0.358537f, -0.362576f, 0.034853f, 0.334880f, 0.092619f, -0.041465f
};

static const float test_6_out_scale = 0.0027362327f;
static const float test_6_out_zero_point = -0.013989925f;
static const int8_t test_6_out_scales_frac[] = {23};
static const int test_6_out_sa_dim = -1;

static const int test_6_out_fx8_frac = 8;

#define TEST_6_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_6_out_tsr_fx16 = {
    TEST_6_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_6_out_tsr_sa8 = {
    TEST_6_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_6_out_fx16(test_6_out_tsr_fx16, test_6_out_fx8_frac + 8, test_6_out_data, 
    sizeof(test_6_out_data) / sizeof(test_6_out_data[0]));
tensor_quantizer test_6_out_sa8(test_6_out_tsr_sa8, test_6_out_sa_dim, test_6_out_data, 
    sizeof(test_6_out_data) / sizeof(test_6_out_data[0]), &test_6_out_scale, 1, 
    &test_6_out_zero_point, 1, test_6_out_scales_frac, 1);


 const mli_rnn_cell_cfg test_1_cfg = {
     /* .direction = */ RNN_DIR_FORWARD,
     /* .results = */ RNN_OUT_LAST,
     /* .act = */ RNN_ACT_TANH
 };

const mli_rnn_cell_cfg test_2_cfg = {
   /* .direction = */ RNN_DIR_BACKWARD,
   /* .results = */ RNN_OUT_LAST,
   /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_3_cfg = {
    /* .direction = */ RNN_DIR_FORWARD,
    /* .results = */ RNN_OUT_ALL,
    /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_4_cfg = {
    /* .direction = */ RNN_DIR_BACKWARD,
    /* .results = */ RNN_OUT_ALL,
    /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_5_cfg = {
    /* .direction = */ RNN_DIR_FORWARD,
    /* .results = */ RNN_OUT_LAST,
    /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_6_cfg = {
    /* .direction = */ RNN_DIR_BACKWARD,
    /* .results = */ RNN_OUT_LAST,
    /* .act = */ RNN_ACT_TANH
};
