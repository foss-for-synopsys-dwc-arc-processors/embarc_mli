/*
* Copyright 2021, Synopsys, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-3-Clause license found in
* the LICENSE file in the root directory of this source tree.
*
*/

#include <stdint.h>

#include "mli_types.h"
#include "test_tensor_quantizer.h"

using mli::tst::tensor_quantizer;

// Generated input vectors Declaration
//========================================
extern mli::tst::tensor_quantizer input_1_fx16;
extern mli::tst::tensor_quantizer input_1_sa8;
extern mli::tst::tensor_quantizer input_2_fx16;
extern mli::tst::tensor_quantizer input_2_sa8;

extern mli::tst::tensor_quantizer hidden_1_fx16;
extern mli::tst::tensor_quantizer hidden_1_sa8;

extern mli::tst::tensor_quantizer cell_1_fx16;
extern mli::tst::tensor_quantizer cell_1_sa8;

// Generated weights vectors Declaration
//========================================
extern mli::tst::tensor_quantizer weights_1_in_fx16;
extern mli::tst::tensor_quantizer weights_1_in_fx8;
extern mli::tst::tensor_quantizer weights_1_in_sa8;
extern mli::tst::tensor_quantizer weights_1_out_fx16;
extern mli::tst::tensor_quantizer weights_1_out_fx8;
extern mli::tst::tensor_quantizer weights_1_out_sa8;

extern mli::tst::tensor_quantizer weights_2_in_fx16;
extern mli::tst::tensor_quantizer weights_2_in_fx8;
extern mli::tst::tensor_quantizer weights_2_in_sa8;
extern mli::tst::tensor_quantizer weights_2_out_fx16;
extern mli::tst::tensor_quantizer weights_2_out_fx8;
extern mli::tst::tensor_quantizer weights_2_out_sa8;

extern mli::tst::tensor_quantizer bias_1_fx16;
extern mli::tst::tensor_quantizer bias_1_fx8;
extern mli::tst::tensor_quantizer bias_1_i1_w1_sa32;
extern mli::tst::tensor_quantizer bias_1_i2_w2_sa32;

// Extracted Output vectors Declaration
//===================================================
extern mli::tst::tensor_quantizer test_1_out_fx16;
extern mli::tst::tensor_quantizer test_1_out_sa8;

extern mli::tst::tensor_quantizer test_2_out_fx16;
extern mli::tst::tensor_quantizer test_2_out_sa8;

extern mli::tst::tensor_quantizer test_3_out_fx16;
extern mli::tst::tensor_quantizer test_3_out_sa8;

extern mli::tst::tensor_quantizer test_4_out_fx16;
extern mli::tst::tensor_quantizer test_4_out_sa8;

extern mli::tst::tensor_quantizer test_5_out_fx16;
extern mli::tst::tensor_quantizer test_5_out_sa8;

extern mli::tst::tensor_quantizer test_6_out_fx16;
extern mli::tst::tensor_quantizer test_6_out_sa8;

// Tests configuration structures Declaration
//========================================
extern const mli_rnn_cell_cfg test_1_cfg;
extern const mli_rnn_cell_cfg test_2_cfg;
extern const mli_rnn_cell_cfg test_3_cfg;
extern const mli_rnn_cell_cfg test_4_cfg;
extern const mli_rnn_cell_cfg test_5_cfg;
extern const mli_rnn_cell_cfg test_6_cfg;


// Generated vectors 
//========================================
static const float input_1_data[] = {
    -0.388602f, -0.611043f, -0.578343f, 1.364027f
};

static const float input_1_scale = 0.0124218222f;
static const float input_1_zero_point = 0.3764922619f;
static const int8_t input_1_scales_frac[] = {21};
static const int input_1_sa_dim = -1;

static const int input_1_fx8_frac = 6;

#define INPUT_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 4}, \
    /* .rank =  */ 2

static const mli_tensor input_1_tsr_fx16 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor input_1_tsr_sa8 = {
    INPUT_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer input_1_fx16(input_1_tsr_fx16, input_1_fx8_frac + 8, input_1_data, 
    sizeof(input_1_data) / sizeof(input_1_data[0]));
tensor_quantizer input_1_sa8(input_1_tsr_sa8, input_1_sa_dim, input_1_data, 
    sizeof(input_1_data) / sizeof(input_1_data[0]), 
    &input_1_scale, 1, &input_1_zero_point, 1, input_1_scales_frac, 1);


static const float input_2_data[] = {
    -1.458377f, 0.056241f, -0.214085f, -1.254570f, 0.525331f, -0.343775f, -1.585862f, -0.403350f, 1.721925f, 0.598517f, 
    -0.696780f, -2.468607f, 0.810153f, 0.008025f, -0.619901f, -1.067136f, -0.343957f, -0.301246f, -0.261427f, -0.231776f, 
    0.282498f, 1.037188f, -0.249266f, -1.056632f, -0.674696f, -1.067394f, 0.154838f, 0.017503f, 0.518102f, -1.521892f, 
    -0.642846f, -1.001197f, -1.498922f, 0.393039f, 0.988394f, 0.269794f, -0.845488f, -0.362675f, 0.089157f, 1.323265f
};

static const float input_2_scale = 0.0263555422f;
static const float input_2_zero_point = -0.3733410835f;
static const int8_t input_2_scales_frac[] = {20};
static const int input_2_sa_dim = -1;

static const int input_2_fx8_frac = 5;

#define INPUT_2_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 4}, \
    /* .rank =  */ 2

static const mli_tensor input_2_tsr_fx16 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor input_2_tsr_sa8 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer input_2_fx16(input_2_tsr_fx16, input_2_fx8_frac + 8, input_2_data, 
    sizeof(input_2_data) / sizeof(input_2_data[0]));
tensor_quantizer input_2_sa8(input_2_tsr_sa8, input_2_sa_dim, input_2_data, 
    sizeof(input_2_data) / sizeof(input_2_data[0]), 
    &input_2_scale, 1, &input_2_zero_point, 1, input_2_scales_frac, 1);


static const float hidden_1_data[] = {
    0.834662f, -0.468128f, -0.023981f, -0.385138f, 1.372675f, -1.066360f, -0.197255f, 0.303625f, -1.917134f, -0.170152f, 
    0.698187f, 0.295902f, -1.282644f, -0.195794f, -1.254221f, 0.241689f, -0.524592f, -0.583571f, -0.922660f, -0.325348f
};

static const float hidden_1_scale = 0.0206906218f;
static const float hidden_1_zero_point = -0.2722294331f;
static const int8_t hidden_1_scales_frac[] = {20};
static const int hidden_1_sa_dim = -1;

static const int hidden_1_fx8_frac = 6;

#define HIDDEN_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {20}, \
    /* .rank =  */ 1

static const mli_tensor hidden_1_tsr_fx16 = {
    HIDDEN_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor hidden_1_tsr_sa8 = {
    HIDDEN_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer hidden_1_fx16(hidden_1_tsr_fx16, hidden_1_fx8_frac + 8, hidden_1_data, 
    sizeof(hidden_1_data) / sizeof(hidden_1_data[0]));
tensor_quantizer hidden_1_sa8(hidden_1_tsr_sa8, hidden_1_sa_dim, hidden_1_data, 
    sizeof(hidden_1_data) / sizeof(hidden_1_data[0]), 
    &hidden_1_scale, 1, &hidden_1_zero_point, 1, hidden_1_scales_frac, 1);


static const float cell_1_data[] = {
    -0.950361f, -1.057337f, -1.434413f, -0.783163f, 0.098325f, -1.993164f, 1.192677f, 0.768669f, 1.559061f, 1.551288f, 
    1.058498f, 0.189376f, 0.354689f, -0.799591f, -0.147095f, -2.378314f, -0.460904f, -0.306984f, -0.868070f, 0.971429f
};

static const float cell_1_scale = 0.0247633643f;
static const float cell_1_zero_point = -0.4096268415f;
static const int8_t cell_1_scales_frac[] = {20};
static const int cell_1_sa_dim = -1;

static const int cell_1_fx8_frac = 5;

#define CELL_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {20}, \
    /* .rank =  */ 1

static const mli_tensor cell_1_tsr_fx16 = {
    CELL_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor cell_1_tsr_sa8 = {
    CELL_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer cell_1_fx16(cell_1_tsr_fx16, cell_1_fx8_frac + 8, cell_1_data, 
    sizeof(cell_1_data) / sizeof(cell_1_data[0]));
tensor_quantizer cell_1_sa8(cell_1_tsr_sa8, cell_1_sa_dim, cell_1_data, 
    sizeof(cell_1_data) / sizeof(cell_1_data[0]), 
    &cell_1_scale, 1, &cell_1_zero_point, 1, cell_1_scales_frac, 1);


static const float weights_1_in_data[] = {
    0.115216f, -0.210512f, 0.031085f, 0.081668f, 0.032410f, -0.083273f, -0.071654f, -0.218587f, 0.147594f, 0.196352f,
    0.219407f, -0.117800f, -0.064568f, 0.121337f, -0.010470f, -0.144544f, -0.125345f, -0.169699f, 0.109226f, 0.081303f,
    -0.098695f, 0.134101f, -0.027379f, -0.087140f, -0.000893f, -0.135050f, 0.010707f, 0.138618f, -0.203737f, -0.037246f,
    -0.094608f, 0.114937f, -0.024515f, -0.054354f, -0.149254f, 0.145243f, -0.036807f, -0.158676f, 0.012748f, 0.110844f,
    -0.043349f, -0.046002f, 0.062020f, -0.016303f, 0.195470f, -0.037480f, 0.133298f, 0.062468f, -0.212607f, 0.095695f,
    0.167688f, -0.118695f, -0.214973f, 0.222723f, 0.136168f, 0.135752f, -0.004332f, 0.121643f, 0.073420f, -0.207085f,
    0.104954f, 0.113759f, 0.011031f, -0.020131f, 0.069584f, -0.096451f, 0.121538f, 0.212103f, -0.107853f, -0.103913f,
    0.002648f, 0.065764f, -0.106612f, 0.179241f, 0.069398f, 0.198316f, 0.032659f, -0.052434f, 0.049169f, 0.112553f,
    -0.167097f, -0.115710f, -0.178196f, 0.040851f, 0.152510f, -0.055916f, -0.144224f, -0.007593f, -0.105025f, 0.105007f,
    0.054155f, 0.134690f, 0.038012f, -0.201140f, 0.165295f, -0.170312f, 0.109316f, 0.177116f, 0.220166f, -0.156374f,
    0.086033f, 0.048481f, -0.101911f, 0.055235f, 0.007120f, -0.018078f, 0.205474f, -0.120908f, 0.012665f, 0.143654f,
    -0.165341f, 0.006657f, 0.105407f, 0.162906f, -0.161362f, 0.202861f, -0.160659f, 0.211477f, -0.047634f, 0.146972f,
    0.071592f, -0.081404f, -0.068481f, 0.223183f, -0.154689f, -0.192637f, -0.193313f, 0.080009f, 0.161868f, 0.218732f,
    0.190904f, -0.017415f, 0.035862f, 0.194955f, -0.082891f, -0.175866f, -0.051228f, -0.045374f, -0.092000f, 0.140142f,
    0.144828f, -0.050239f, 0.095622f, 0.217933f, 0.174751f, -0.044169f, -0.174298f, -0.086072f, -0.157290f, -0.156509f,
    -0.086738f, -0.007135f, 0.068212f, 0.184835f, 0.197160f, -0.157511f, 0.162672f, -0.173801f, 0.054509f, -0.177428f,
    -0.157223f, 0.131330f, -0.033157f, 0.044922f, 0.076244f, 0.204798f, -0.144541f, 0.153273f, 0.212027f, 0.161989f,
    -0.135231f, 0.119156f, 0.128836f, 0.192941f, 0.141435f, -0.102461f, 0.069204f, 0.136521f, -0.025851f, -0.130632f,
    -0.168713f, -0.129499f, 0.125769f, 0.053710f, 0.040053f, -0.041372f, -0.190162f, 0.046338f, -0.148381f, 0.138913f,
    0.028091f, -0.123764f, 0.207591f, 0.148174f, 0.057757f, -0.026038f, -0.050632f, 0.150587f, -0.007682f, -0.095642f,
    0.013599f, -0.198782f, 0.071886f, -0.149718f, -0.095116f, 0.126068f, 0.214638f, 0.071917f, 0.027957f, -0.161828f,
    0.222861f, -0.210239f, -0.138868f, 0.139357f, -0.152907f, -0.137060f, 0.085941f, -0.075725f, -0.211058f, 0.158978f,
    -0.038104f, 0.162734f, -0.167677f, -0.106095f, -0.067689f, 0.096822f, 0.011676f, 0.167025f, 0.166868f, -0.161020f,
    -0.141247f, -0.047525f, 0.048525f, 0.158902f, -0.187776f, 0.081807f, 0.072266f, 0.218470f, -0.143917f, -0.073070f,
    -0.183664f, -0.113386f, -0.148853f, 0.010029f, 0.128963f, 0.203202f, 0.055337f, 0.206597f, 0.053187f, -0.193771f,
    -0.045839f, -0.072033f, -0.042360f, 0.125931f, -0.095012f, -0.033355f, -0.029642f, 0.042660f, -0.210214f, -0.078210f,
    -0.019587f, 0.005112f, 0.184147f, 0.099724f, 0.137459f, 0.195461f, -0.148533f, -0.143752f, 0.185464f, -0.009177f,
    0.074191f, -0.109723f, 0.045136f, 0.125313f, 0.003079f, -0.064388f, -0.085347f, 0.199955f, -0.084884f, 0.136235f,
    0.093921f, -0.210175f, 0.197111f, 0.026792f, -0.012959f, -0.126780f, 0.122405f, 0.063242f, -0.092875f, -0.105927f,
    0.193437f, -0.195019f, 0.008271f, 0.011261f, -0.127755f, 0.054891f, -0.204345f, -0.036037f, 0.146635f, 0.128875f,
    -0.006476f, -0.158037f, -0.075952f, -0.111972f, -0.027527f, 0.218774f, -0.166939f, 0.068088f, -0.094400f, 0.008960f,
    0.065981f, 0.188153f, -0.142497f, -0.127073f, -0.124763f, -0.058774f, 0.195014f, -0.056195f, -0.219011f, 0.082566f
};

static const float weights_1_in_scales[] = {0.0028073345f, 0.0028073345f, 0.0028073345f, 0.0028073345f};
static const float weights_1_in_zero_points[] = {0.f, 0.f, 0.f, 0.f};
static const int8_t weights_1_in_scales_frac[] = {23, 23, 23, 23};
static const int weights_1_in_sa_dim = 0;

static const int weights_1_in_fx8_frac = 9;

#define WEIGHTS_1_IN_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 4, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_1_in_tsr_fx16 = {
    WEIGHTS_1_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_in_tsr_fx8 = {
    WEIGHTS_1_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_in_tsr_sa8 = {
    WEIGHTS_1_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_1_in_fx16(weights_1_in_tsr_fx16, weights_1_in_fx8_frac + 8, weights_1_in_data, 
    sizeof(weights_1_in_data) / sizeof(weights_1_in_data[0]));
tensor_quantizer weights_1_in_fx8(weights_1_in_tsr_fx8, weights_1_in_fx8_frac, weights_1_in_data, 
    sizeof(weights_1_in_data) / sizeof(weights_1_in_data[0]));
tensor_quantizer weights_1_in_sa8(weights_1_in_tsr_sa8, weights_1_in_sa_dim, weights_1_in_data, 
    sizeof(weights_1_in_data) / sizeof(weights_1_in_data[0]), weights_1_in_scales, 
    sizeof(weights_1_in_scales) / sizeof(weights_1_in_scales[0]), 
    weights_1_in_zero_points, sizeof(weights_1_in_zero_points) / sizeof(weights_1_in_zero_points[0]), 
    weights_1_in_scales_frac, sizeof(weights_1_in_scales_frac) / sizeof(weights_1_in_scales_frac[0]));


static const float weights_1_out_data[] = {
    -0.044262f, -0.114140f, -0.130728f, -0.042944f, -0.114001f, -0.184182f, -0.176094f, 0.102567f, 0.090637f, -0.177581f,
    -0.221115f, 0.124671f, -0.098583f, 0.164117f, 0.150186f, 0.033193f, -0.019108f, -0.221971f, 0.157293f, -0.142610f,
    -0.016931f, -0.157611f, -0.219063f, -0.189404f, 0.157074f, 0.204372f, 0.214734f, -0.191505f, -0.121333f, -0.185831f,
    -0.165775f, -0.175739f, -0.077242f, 0.051360f, -0.016571f, -0.081407f, -0.071382f, 0.198812f, 0.181302f, -0.130357f,
    -0.042464f, -0.185265f, 0.136198f, 0.172642f, 0.001438f, 0.042579f, -0.219906f, 0.163137f, 0.035557f, -0.201094f,
    0.102118f, -0.111673f, -0.052083f, -0.068745f, 0.219216f, 0.163991f, 0.166085f, -0.048692f, -0.156376f, -0.079371f,
    -0.082430f, 0.219149f, -0.032501f, -0.057700f, -0.179493f, 0.188285f, 0.128544f, 0.067019f, 0.074065f, -0.108435f,
    -0.073234f, -0.076094f, -0.127207f, 0.199279f, 0.098194f, 0.033023f, 0.181760f, -0.205214f, -0.103092f, 0.130979f,
    0.093317f, -0.038113f, 0.091868f, -0.144500f, -0.046856f, 0.014602f, 0.015738f, -0.025706f, 0.192949f, -0.042682f,
    -0.088978f, -0.129084f, 0.069887f, 0.057085f, -0.119052f, 0.144130f, 0.142452f, 0.154101f, 0.026918f, -0.007697f,
    -0.076161f, -0.051706f, 0.011006f, 0.143366f, -0.201830f, 0.121540f, 0.105813f, 0.102552f, -0.117307f, -0.132418f,
    -0.184986f, 0.104421f, 0.001816f, -0.151961f, -0.203498f, 0.215925f, 0.098964f, -0.060462f, -0.210831f, -0.079882f,
    -0.125618f, -0.082224f, -0.208697f, 0.079414f, -0.115851f, -0.071394f, -0.120919f, -0.159196f, -0.175928f, -0.094547f,
    0.090630f, -0.159520f, -0.146098f, -0.124447f, 0.129947f, -0.050010f, -0.177267f, 0.203064f, 0.068671f, 0.138520f,
    0.050728f, -0.111840f, -0.109700f, 0.055336f, -0.158411f, -0.178388f, 0.134432f, -0.048882f, 0.206894f, -0.198001f,
    0.015790f, 0.207813f, -0.127694f, 0.140205f, 0.209706f, 0.157442f, 0.211256f, -0.151881f, -0.093168f, 0.212057f,
    -0.161624f, -0.204491f, 0.062908f, -0.044337f, 0.152936f, 0.035895f, -0.110648f, 0.002192f, 0.093863f, 0.137438f,
    -0.086431f, -0.092424f, 0.047349f, 0.102126f, -0.130279f, -0.045410f, -0.197045f, -0.207604f, -0.099142f, 0.165312f,
    -0.047721f, -0.131270f, -0.045258f, -0.069781f, -0.046977f, -0.019941f, -0.197645f, -0.129206f, 0.108683f, -0.051190f,
    -0.136933f, 0.131990f, -0.003194f, 0.174591f, 0.091840f, 0.201789f, -0.073512f, -0.167985f, -0.172863f, -0.170993f,
    0.114266f, 0.136675f, -0.215929f, 0.037946f, -0.038634f, -0.022577f, 0.074916f, -0.057136f, 0.080491f, -0.141084f,
    0.047555f, 0.007615f, 0.158257f, -0.017177f, 0.009519f, 0.176000f, -0.157378f, 0.096862f, 0.104607f, -0.046443f,
    0.083568f, 0.049009f, 0.078410f, 0.173038f, 0.107156f, -0.109817f, 0.122393f, -0.096432f, -0.079148f, 0.058217f,
    0.060842f, -0.098340f, -0.033898f, 0.156395f, -0.047811f, -0.080149f, 0.080409f, -0.025077f, -0.142493f, -0.042891f,
    0.190365f, -0.078879f, 0.008576f, 0.032021f, 0.091001f, 0.004629f, 0.221652f, 0.213105f, 0.134510f, -0.167193f,
    0.099250f, 0.149321f, -0.181144f, 0.111172f, -0.060801f, 0.008019f, -0.186067f, -0.207154f, -0.178729f, 0.190827f,
    -0.152510f, -0.084504f, -0.071863f, -0.105732f, -0.147573f, 0.064216f, -0.023370f, 0.189962f, -0.195216f, 0.156523f,
    0.066451f, -0.170620f, -0.165382f, 0.069152f, 0.062208f, -0.097651f, -0.110237f, 0.041460f, -0.058803f, -0.115651f,
    0.001944f, 0.142843f, 0.090331f, 0.222128f, 0.082407f, 0.080666f, 0.215105f, 0.192856f, 0.031118f, 0.128577f,
    -0.034110f, -0.118306f, -0.065634f, -0.051753f, 0.049296f, -0.090437f, -0.142038f, -0.014253f, -0.124482f, -0.128156f,
    -0.066032f, 0.161186f, 0.047208f, 0.004782f, 0.094993f, -0.180130f, 0.143653f, 0.182762f, 0.101079f, -0.219741f,
    -0.173096f, 0.026802f, -0.049524f, 0.215554f, 0.151026f, -0.045273f, -0.137448f, 0.080782f, -0.217390f, 0.003498f,
    -0.125067f, 0.215430f, -0.082467f, 0.176765f, -0.177792f, 0.108029f, -0.110901f, -0.214150f, 0.152778f, -0.175519f,
    0.142350f, 0.177382f, 0.025519f, 0.045250f, 0.081857f, -0.001524f, -0.104384f, -0.113744f, 0.090117f, -0.051944f,
    -0.125791f, 0.065227f, 0.200877f, 0.054497f, 0.194412f, 0.022994f, -0.172478f, 0.074797f, -0.111663f, -0.147441f,
    -0.001917f, -0.095806f, -0.050148f, -0.057694f, 0.101754f, -0.077948f, 0.219810f, -0.159630f, -0.085075f, 0.084639f,
    0.056335f, 0.108027f, 0.112179f, 0.200431f, -0.136060f, 0.154226f, 0.125413f, 0.082419f, -0.151134f, -0.121045f,
    -0.148606f, -0.136161f, 0.082506f, -0.003179f, 0.197256f, -0.211084f, -0.018264f, 0.152407f, 0.156629f, 0.027180f,
    0.023395f, -0.017966f, 0.028077f, 0.129015f, -0.087442f, 0.158026f, -0.122509f, -0.164011f, 0.083814f, 0.027920f,
    0.192836f, -0.142754f, -0.074368f, 0.219816f, 0.069628f, -0.135244f, 0.068162f, -0.107600f, 0.157401f, -0.133505f,
    0.163802f, -0.217488f, -0.182435f, -0.218089f, 0.084251f, -0.027582f, 0.030580f, 0.064160f, 0.002922f, -0.041246f,
    -0.159468f, -0.124920f, 0.038382f, 0.132774f, -0.036313f, 0.089177f, 0.153514f, 0.032277f, -0.102387f, -0.074831f,
    0.181301f, 0.174811f, 0.115193f, 0.214274f, 0.212928f, -0.142213f, -0.144123f, 0.000680f, -0.000304f, -0.013472f,
    0.013217f, 0.193255f, 0.156010f, -0.022190f, -0.102214f, -0.129314f, 0.040590f, -0.026449f, 0.164622f, -0.089811f,
    0.172210f, 0.217059f, 0.192122f, 0.094245f, 0.108581f, -0.042578f, 0.091967f, -0.093353f, 0.038253f, 0.073667f,
    -0.017955f, -0.188109f, -0.101818f, -0.056554f, -0.099737f, 0.051398f, 0.126950f, 0.126672f, 0.176618f, -0.048888f,
    0.070587f, -0.010154f, -0.128957f, 0.092347f, 0.071238f, 0.127296f, -0.187522f, -0.136865f, -0.013083f, 0.084516f,
    0.213736f, -0.059067f, 0.162968f, 0.088417f, -0.136005f, 0.070205f, -0.192565f, 0.178633f, -0.222561f, -0.165084f,
    -0.063902f, 0.036801f, -0.083124f, 0.038070f, 0.051680f, 0.111474f, -0.081063f, 0.223142f, 0.116038f, 0.050656f,
    -0.052565f, -0.123234f, 0.215020f, -0.007759f, -0.156079f, 0.035784f, -0.222433f, -0.191191f, -0.015583f, 0.013122f,
    -0.047280f, -0.052469f, 0.208685f, 0.112203f, -0.210145f, -0.117620f, -0.156179f, -0.017665f, 0.030709f, 0.088207f,
    0.171128f, -0.143814f, -0.057658f, -0.157092f, -0.139312f, 0.079113f, 0.107742f, -0.098960f, -0.038201f, -0.009087f,
    -0.122284f, -0.141555f, -0.161756f, 0.079405f, -0.082381f, -0.055447f, 0.150838f, 0.198435f, 0.160346f, -0.095940f,
    -0.188582f, -0.116627f, 0.141125f, -0.105175f, 0.214423f, -0.011165f, -0.091995f, -0.035947f, -0.127450f, -0.058893f,
    0.043726f, -0.101140f, 0.060562f, 0.109182f, 0.023666f, -0.044734f, 0.153629f, 0.182955f, 0.048268f, 0.094073f,
    -0.212519f, -0.022169f, 0.123368f, 0.181343f, -0.105357f, 0.147622f, 0.088558f, -0.002230f, -0.156109f, 0.194107f,
    -0.155505f, -0.014850f, -0.182187f, 0.139847f, -0.155555f, -0.085066f, -0.177847f, -0.116926f, -0.002789f, -0.070902f,
    -0.020570f, 0.015127f, 0.209404f, 0.186220f, -0.185949f, 0.046636f, -0.132663f, -0.051042f, -0.094625f, 0.150066f,
    0.076877f, -0.182936f, -0.199020f, 0.031707f, -0.195917f, -0.122491f, -0.122016f, 0.015199f, 0.031686f, 0.140500f,
    -0.141583f, 0.037878f, -0.052042f, -0.087131f, 0.153686f, 0.195900f, -0.069125f, -0.140592f, 0.098724f, 0.063151f,
    0.144408f, -0.180722f, 0.000338f, 0.192601f, 0.150886f, 0.164194f, 0.200125f, -0.057196f, 0.149035f, -0.065625f,
    -0.065209f, 0.114263f, -0.133016f, -0.047986f, 0.086750f, 0.048471f, 0.001002f, -0.086401f, 0.053166f, -0.082359f,
    0.189745f, 0.024540f, -0.127621f, 0.139043f, 0.076050f, 0.154564f, 0.065157f, -0.004060f, 0.033750f, -0.190403f,
    0.025187f, -0.091334f, -0.083003f, -0.110825f, 0.153811f, -0.118372f, 0.134657f, -0.005759f, 0.134579f, 0.028520f,
    -0.220401f, -0.145495f, 0.121102f, -0.006845f, -0.180443f, 0.186673f, 0.153970f, 0.147370f, 0.157526f, 0.015969f,
    -0.193961f, -0.138738f, -0.152130f, -0.073002f, -0.222421f, 0.143600f, 0.126275f, 0.179819f, -0.013336f, -0.153853f,
    0.183463f, -0.121630f, -0.069163f, -0.099873f, 0.013272f, -0.122785f, -0.171430f, 0.123130f, -0.021204f, 0.116353f,
    0.153656f, -0.047114f, 0.007671f, 0.203831f, -0.212847f, 0.012114f, -0.019974f, -0.056987f, 0.116136f, 0.155806f,
    -0.140468f, -0.001934f, 0.002203f, 0.014823f, 0.131687f, 0.163744f, 0.100919f, -0.127006f, 0.001939f, -0.008764f,
    -0.135706f, 0.210718f, 0.215589f, -0.198877f, -0.158704f, 0.216103f, -0.063247f, 0.147668f, 0.043241f, 0.208855f,
    -0.018257f, -0.117841f, -0.116740f, 0.174148f, 0.128814f, -0.067805f, 0.142335f, -0.110643f, 0.187862f, 0.002903f,
    0.171568f, -0.027319f, 0.216929f, 0.106702f, -0.117797f, -0.024729f, -0.003878f, -0.180753f, -0.048759f, -0.033385f,
    0.204125f, 0.206981f, 0.091888f, 0.141650f, 0.204200f, -0.052535f, -0.051881f, -0.158851f, -0.211105f, 0.000792f,
    0.073092f, -0.188246f, 0.168902f, -0.200975f, -0.000492f, 0.221240f, 0.115247f, 0.010000f, -0.013072f, 0.172447f,
    0.121174f, -0.080722f, 0.207177f, -0.090611f, -0.088415f, -0.060203f, -0.010304f, -0.189851f, 0.022307f, 0.118676f,
    -0.041935f, 0.175455f, 0.022126f, -0.106681f, 0.096723f, -0.130533f, -0.189522f, -0.174496f, -0.203369f, 0.209855f,
    -0.070929f, -0.124332f, -0.033615f, -0.046683f, 0.099566f, -0.010873f, 0.163049f, 0.143443f, 0.204235f, 0.017496f,
    -0.195689f, 0.054407f, 0.004854f, -0.045534f, 0.130913f, 0.112381f, -0.068326f, -0.209825f, -0.005135f, -0.013436f,
    0.132001f, -0.059570f, -0.138012f, 0.088781f, -0.181386f, -0.097917f, 0.060973f, -0.138171f, -0.112209f, -0.199757f,
    0.037009f, 0.038809f, 0.148055f, 0.015494f, -0.192325f, -0.166812f, -0.215556f, 0.022160f, -0.073458f, -0.083031f,
    0.162595f, -0.196540f, -0.166589f, -0.106526f, 0.051512f, 0.182822f, 0.096732f, 0.141156f, -0.071790f, -0.208532f,
    0.036226f, -0.153016f, -0.020844f, -0.035551f, -0.046758f, -0.223568f, -0.174508f, 0.084795f, 0.210361f, 0.093581f,
    0.139190f, -0.156139f, -0.127434f, 0.042445f, 0.206402f, 0.177956f, -0.111559f, -0.032001f, -0.153071f, -0.009933f,
    0.080470f, 0.141181f, -0.200514f, 0.108445f, -0.171759f, -0.007474f, 0.168575f, 0.110409f, 0.039848f, 0.086041f,
    0.048967f, 0.094788f, 0.171648f, -0.025631f, 0.140420f, -0.112066f, -0.193623f, -0.124233f, 0.068536f, -0.063079f,
    -0.210947f, 0.151382f, -0.210519f, 0.044676f, -0.138058f, -0.071185f, -0.152324f, -0.221942f, 0.180383f, -0.171099f,
    -0.202392f, 0.083714f, -0.183532f, 0.015678f, 0.222507f, 0.101852f, -0.002402f, 0.156688f, 0.159275f, -0.144280f,
    0.167539f, 0.125476f, -0.209505f, 0.150167f, -0.115836f, -0.141646f, 0.194126f, 0.015118f, 0.148585f, -0.002451f,
    0.105077f, -0.196252f, -0.055259f, -0.171357f, -0.100755f, 0.026202f, 0.086382f, -0.050731f, 0.173780f, 0.173175f,
    0.035261f, 0.223444f, 0.214768f, -0.144206f, -0.008759f, 0.037068f, 0.157957f, -0.208570f, 0.209679f, -0.110813f,
    0.148578f, 0.126802f, 0.047465f, -0.140484f, -0.027978f, -0.096637f, -0.185638f, 0.115647f, -0.138596f, -0.181035f,
    -0.208296f, -0.009764f, 0.176857f, -0.019632f, 0.087630f, 0.009109f, 0.169034f, -0.025589f, 0.038346f, 0.151254f,
    0.062252f, 0.171336f, -0.134167f, -0.193581f, 0.046124f, -0.053251f, -0.187115f, -0.069316f, 0.121910f, -0.031964f,
    0.071623f, -0.157897f, 0.088698f, -0.074512f, 0.107360f, 0.034123f, 0.134174f, -0.011821f, -0.180827f, 0.110726f,
    -0.086434f, 0.169746f, 0.052123f, -0.160716f, 0.179774f, -0.052801f, -0.002815f, -0.187080f, 0.158898f, -0.015855f,
    0.141904f, 0.010210f, -0.056164f, 0.195931f, -0.108626f, -0.125150f, 0.051756f, -0.157312f, -0.192361f, 0.122734f,
    0.014997f, 0.126258f, -0.035946f, 0.187252f, -0.205549f, -0.156474f, -0.045859f, 0.049110f, 0.002508f, -0.202432f,
    0.083552f, -0.064874f, 0.192524f, -0.200708f, -0.037518f, -0.219020f, -0.010898f, -0.221421f, -0.115533f, 0.203291f,
    -0.085901f, -0.035102f, 0.089426f, 0.083075f, -0.109816f, -0.068235f, 0.143721f, 0.139238f, 0.094337f, 0.135196f,
    0.182524f, 0.078936f, -0.059064f, -0.125683f, -0.172644f, 0.004894f, -0.003569f, 0.001472f, 0.184560f, 0.109836f,
    0.210516f, 0.149831f, -0.171592f, -0.213254f, 0.032437f, 0.075245f, -0.216660f, -0.218024f, 0.126526f, -0.071149f,
    0.004623f, 0.189147f, 0.155234f, 0.025243f, 0.169101f, -0.091221f, -0.088933f, 0.201089f, 0.128581f, -0.223448f,
    0.215918f, 0.175057f, 0.030859f, -0.037321f, -0.129246f, 0.164154f, -0.035566f, 0.023277f, 0.171092f, 0.100455f,
    -0.185507f, -0.122388f, -0.007278f, 0.198504f, 0.223149f, -0.075386f, -0.205539f, 0.201520f, 0.065444f, 0.056423f,
    -0.026058f, 0.116562f, -0.203868f, 0.017946f, 0.083531f, 0.016985f, -0.173279f, 0.044567f, 0.119646f, 0.124799f,
    -0.000507f, 0.009364f, -0.105187f, 0.151295f, 0.217340f, 0.164616f, 0.203812f, -0.136137f, -0.170283f, -0.153436f,
    -0.150442f, -0.160829f, 0.138724f, 0.119456f, -0.015244f, -0.216541f, -0.032568f, 0.025665f, 0.095445f, 0.197174f,
    0.162529f, 0.217488f, -0.062408f, -0.209242f, 0.091383f, 0.036519f, 0.011586f, -0.039722f, -0.164687f, 0.029861f,
    0.131537f, -0.078040f, 0.217205f, 0.207385f, -0.057943f, 0.118425f, -0.114246f, -0.005533f, -0.084870f, 0.055309f,
    -0.107551f, -0.178505f, -0.047746f, -0.157210f, -0.047681f, 0.102125f, 0.105167f, -0.186990f, 0.182429f, 0.002390f,
    0.114125f, 0.177145f, -0.079810f, 0.053996f, 0.119922f, -0.067660f, 0.070374f, -0.069507f, -0.124669f, 0.167870f,
    0.095375f, -0.038586f, -0.204675f, 0.216811f, -0.005574f, -0.062492f, 0.008207f, -0.174627f, -0.023211f, 0.221778f,
    0.118529f, 0.170473f, 0.033065f, 0.157516f, 0.159805f, 0.199692f, -0.187059f, -0.173594f, -0.106031f, 0.206511f,
    0.051545f, 0.217135f, 0.066867f, 0.032587f, 0.080674f, -0.177429f, 0.064258f, -0.061310f, -0.222639f, -0.152773f,
    -0.168254f, 0.142679f, -0.115205f, -0.079569f, 0.217500f, -0.216067f, -0.175903f, 0.036471f, 0.183980f, 0.044318f,
    -0.036280f, 0.156242f, -0.068129f, -0.191521f, -0.193824f, 0.044586f, -0.137771f, 0.217091f, -0.027643f, -0.219081f,
    0.075822f, -0.093459f, -0.143038f, -0.007306f, 0.101258f, -0.052317f, -0.126895f, -0.150178f, -0.054159f, -0.045561f,
    0.001589f, 0.064900f, 0.102733f, -0.070447f, 0.013881f, -0.148083f, -0.173824f, -0.058336f, -0.053682f, -0.059944f,
    -0.095424f, -0.044285f, -0.113247f, -0.134984f, -0.006115f, 0.173412f, -0.195843f, -0.184755f, 0.007998f, -0.061224f,
    0.095134f, -0.096442f, 0.142568f, 0.097758f, -0.181760f, 0.027706f, 0.170532f, 0.012937f, 0.003373f, 0.036033f,
    0.011285f, 0.092209f, -0.146672f, 0.148591f, -0.032679f, 0.010950f, -0.109427f, -0.188409f, -0.068533f, -0.192014f,
    0.138413f, 0.029786f, 0.186323f, 0.078928f, 0.157769f, -0.124777f, 0.045082f, -0.029033f, 0.117792f, 0.025429f,
    0.036953f, 0.062842f, -0.013607f, 0.016962f, 0.002620f, -0.017305f, 0.131732f, 0.080550f, 0.006023f, -0.027071f,
    0.089228f, -0.221847f, -0.092608f, -0.051126f, 0.073819f, 0.039350f, -0.203561f, 0.125449f, 0.121537f, 0.102992f,
    -0.206987f, -0.171891f, 0.070177f, 0.010222f, -0.133084f, 0.081095f, 0.165194f, 0.209326f, 0.073702f, 0.191937f,
    0.213971f, -0.191918f, -0.144123f, -0.190448f, -0.124806f, -0.134191f, 0.029686f, -0.204444f, -0.089499f, 0.130722f,
    -0.013949f, -0.135283f, 0.122603f, -0.173413f, 0.172643f, 0.104378f, -0.027743f, -0.043853f, 0.206733f, -0.082302f,
    -0.196693f, 0.179888f, 0.216459f, 0.160348f, 0.146562f, 0.105198f, -0.141426f, -0.219621f, -0.015871f, 0.196053f,
    -0.080849f, -0.165822f, -0.222825f, 0.022762f, 0.156170f, -0.111193f, -0.114401f, 0.002157f, -0.205100f, -0.147873f,
    0.034700f, -0.123126f, -0.119301f, 0.184105f, -0.158863f, 0.011429f, -0.040857f, 0.041542f, -0.134180f, -0.154239f,
    0.149212f, 0.146940f, -0.018273f, 0.217492f, -0.120614f, -0.088078f, -0.037124f, 0.034005f, 0.090816f, 0.059710f,
    0.058385f, -0.007717f, -0.178220f, -0.177566f, 0.116421f, 0.021808f, 0.201277f, 0.024640f, 0.021536f, 0.062410f,
    -0.006419f, -0.196946f, 0.007907f, 0.011821f, 0.196994f, 0.140960f, -0.139454f, -0.108056f, -0.134657f, 0.195134f,
    -0.038881f, 0.009961f, -0.162294f, -0.104651f, -0.047906f, -0.171523f, -0.185682f, 0.015836f, -0.213618f, -0.193813f,
    0.147119f, -0.166940f, -0.104429f, -0.199543f, 0.208507f, 0.063656f, 0.027639f, -0.011440f, -0.182602f, -0.024660f,
    -0.105004f, 0.205750f, 0.038843f, 0.009483f, 0.069384f, 0.119338f, -0.110596f, -0.137002f, -0.133512f, 0.083238f,
    0.198895f, 0.147259f, 0.176367f, 0.122730f, -0.131477f, 0.051223f, 0.093992f, 0.057606f, 0.172201f, -0.013194f,
    0.041274f, 0.071387f, 0.043424f, 0.110792f, -0.026756f, 0.212450f, -0.172031f, 0.178186f, -0.192754f, -0.114743f,
    -0.070077f, 0.132176f, -0.059356f, 0.200678f, -0.007713f, 0.099558f, 0.046213f, 0.180830f, -0.066618f, 0.104480f,
    -0.184832f, 0.109150f, 0.144388f, -0.031650f, 0.044200f, -0.155124f, 0.133276f, -0.138268f, -0.028217f, 0.087075f,
    0.048132f, -0.211380f, -0.213186f, 0.187459f, 0.222840f, 0.103975f, -0.128769f, -0.185514f, -0.125387f, 0.028009f,
    -0.095262f, -0.095661f, 0.180066f, -0.098036f, -0.067537f, 0.076061f, 0.184691f, -0.098895f, 0.022791f, -0.164634f,
    -0.019128f, 0.129204f, -0.133511f, 0.010546f, -0.145167f, -0.161568f, 0.122179f, -0.004426f, 0.061340f, 0.042835f,
    0.169823f, -0.076669f, 0.095362f, 0.174007f, 0.092671f, -0.098608f, -0.144602f, -0.188727f, -0.179780f, 0.118319f,
    -0.097448f, -0.051022f, 0.007169f, 0.042008f, -0.035031f, 0.017855f, 0.205193f, -0.182427f, -0.046529f, 0.118328f,
    -0.082154f, 0.162657f, 0.031921f, -0.112254f, 0.104376f, -0.059934f, 0.141087f, -0.222701f, -0.082159f, 0.160127f,
    -0.124042f, 0.048175f, -0.166401f, 0.036186f, -0.153453f, 0.021377f, -0.068035f, -0.019797f, -0.204672f, 0.101635f,
    -0.064376f, 0.081974f, 0.201958f, 0.203175f, -0.204528f, 0.197960f, 0.143234f, 0.054095f, 0.134266f, 0.122916f,
    0.005174f, -0.140075f, 0.051074f, -0.091646f, 0.161345f, -0.215996f, 0.116111f, -0.005897f, -0.116635f, -0.160136f,
    0.100297f, 0.056076f, -0.092279f, 0.003803f, 0.197149f, -0.209296f, -0.192121f, -0.090109f, 0.010831f, -0.187761f,
    0.067938f, -0.033943f, 0.217525f, -0.032627f, 0.036249f, 0.047453f, -0.014739f, -0.093241f, -0.094463f, -0.088275f,
    -0.056571f, -0.168625f, -0.039212f, 0.117388f, -0.180321f, -0.042225f, 0.076301f, 0.136863f, 0.039178f, 0.139834f,
    -0.039328f, 0.049698f, 0.009154f, 0.182420f, 0.093087f, -0.002984f, 0.090130f, 0.137151f, -0.017439f, 0.152754f,
    0.032841f, -0.178461f, 0.189350f, 0.052574f, -0.099805f, 0.080422f, 0.101631f, 0.215864f, -0.098748f, -0.141885f,
    0.037973f, 0.170498f, -0.055086f, 0.022813f, 0.160454f, 0.173444f, -0.159472f, 0.153417f, -0.147615f, 0.034505f,
    -0.223484f, 0.045147f, -0.075262f, 0.039357f, 0.088027f, 0.101557f, -0.039904f, 0.072626f, -0.065767f, -0.209141f,
    0.139737f, 0.135595f, 0.210661f, 0.210746f, -0.035478f, -0.213432f, -0.190938f, -0.086745f, -0.215354f, 0.052089f,
    0.127325f, -0.167803f, 0.119883f, 0.164543f, 0.206099f, -0.087397f, 0.150424f, 0.195498f, -0.198241f, 0.145555f,
    0.093218f, -0.121593f, 0.165075f, -0.148490f, -0.223515f, 0.210339f, -0.006348f, -0.031174f, 0.124367f, 0.214776f,
    -0.198926f, 0.156777f, 0.047954f, -0.011206f, 0.072708f, -0.122073f, -0.013883f, -0.155638f, 0.208298f, 0.038079f
};

static const float weights_1_out_scales[] = {0.0028121783f, 0.0028121783f, 0.0028121783f, 0.0028121783f};
static const float weights_1_out_zero_points[] = {0.f, 0.f, 0.f, 0.f};
static const int8_t weights_1_out_scales_frac[] = {23, 23, 23, 23};
static const int weights_1_out_sa_dim = 0;

static const int weights_1_out_fx8_frac = 9;

#define WEIGHTS_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 20, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_1_out_tsr_fx16 = {
    WEIGHTS_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_out_tsr_fx8 = {
    WEIGHTS_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_1_out_tsr_sa8 = {
    WEIGHTS_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_1_out_fx16(weights_1_out_tsr_fx16, weights_1_out_fx8_frac + 8, weights_1_out_data, 
    sizeof(weights_1_out_data) / sizeof(weights_1_out_data[0]));
tensor_quantizer weights_1_out_fx8(weights_1_out_tsr_fx8, weights_1_out_fx8_frac, weights_1_out_data, 
    sizeof(weights_1_out_data) / sizeof(weights_1_out_data[0]));
tensor_quantizer weights_1_out_sa8(weights_1_out_tsr_sa8, weights_1_out_sa_dim, weights_1_out_data, 
    sizeof(weights_1_out_data) / sizeof(weights_1_out_data[0]), weights_1_out_scales, 
    sizeof(weights_1_out_scales) / sizeof(weights_1_out_scales[0]), 
    weights_1_out_zero_points, sizeof(weights_1_out_zero_points) / sizeof(weights_1_out_zero_points[0]), 
    weights_1_out_scales_frac, sizeof(weights_1_out_scales_frac) / sizeof(weights_1_out_scales_frac[0]));


static const float weights_2_in_data[] = {
    0.027496f, -0.119913f, -0.139650f, 0.197811f, -0.028812f, 0.095256f, -0.022841f, -0.016684f, 0.167077f, -0.116336f,
    0.023316f, 0.130513f, -0.141098f, 0.045073f, -0.211941f, 0.191965f, 0.139343f, -0.004492f, -0.099799f, -0.004928f,
    -0.144273f, 0.126631f, 0.192756f, -0.110190f, -0.025500f, -0.079192f, -0.129132f, 0.122625f, -0.066649f, -0.009730f,
    0.093947f, -0.220319f, -0.187086f, 0.116887f, 0.200617f, -0.026748f, 0.143155f, -0.104747f, 0.132927f, -0.213834f,
    0.140744f, 0.158490f, -0.183385f, 0.106796f, 0.056195f, 0.207113f, 0.082231f, -0.050954f, -0.076984f, -0.120596f,
    -0.159463f, 0.119770f, -0.201449f, 0.184014f, -0.012227f, 0.045255f, -0.118460f, -0.164602f, 0.100226f, -0.004044f,
    -0.076231f, -0.178367f, -0.082456f, 0.018055f, -0.206657f, -0.121446f, 0.110817f, -0.191098f, -0.078067f, 0.064901f,
    0.090017f, -0.071453f, 0.008839f, 0.131646f, 0.126001f, 0.159808f, 0.106164f, 0.212575f, -0.162156f, 0.148885f,
    -0.076793f, 0.050804f, -0.198341f, -0.157722f, 0.021225f, -0.038442f, -0.180013f, -0.179752f, 0.067649f, 0.202872f,
    -0.080957f, 0.095062f, -0.162478f, 0.088949f, -0.008320f, 0.079622f, 0.203274f, -0.024785f, 0.017868f, 0.074865f,
    -0.137155f, -0.223221f, 0.177347f, 0.078458f, -0.034917f, -0.012670f, 0.138486f, 0.119699f, 0.208378f, -0.119442f,
    -0.026139f, 0.103951f, -0.000899f, 0.030696f, -0.155912f, 0.140103f, 0.084473f, -0.071425f, 0.099003f, 0.161193f,
    -0.202068f, -0.043513f, -0.066160f, 0.094094f, 0.202343f, 0.114925f, -0.183535f, 0.162613f, 0.133320f, -0.131800f,
    0.073150f, 0.039400f, -0.122891f, -0.167826f, 0.082013f, 0.036956f, 0.195526f, 0.206291f, 0.169420f, -0.143464f,
    -0.046246f, -0.214953f, 0.114005f, -0.050080f, 0.129004f, 0.212366f, 0.124004f, 0.209444f, -0.142499f, 0.175066f,
    0.129766f, 0.049288f, 0.199563f, -0.101043f, -0.035823f, 0.099229f, -0.181409f, 0.190234f, -0.082101f, -0.131511f,
    -0.011413f, 0.025208f, -0.205051f, -0.055030f, -0.039875f, 0.215080f, -0.069719f, -0.118829f, -0.174754f, 0.207033f,
    -0.079601f, -0.099406f, -0.170395f, -0.120648f, 0.067345f, 0.048347f, -0.153479f, -0.108933f, 0.222903f, 0.081573f,
    -0.216822f, 0.024447f, 0.188239f, 0.047299f, 0.063660f, -0.125007f, -0.111699f, -0.161587f, -0.022978f, -0.187147f,
    0.220448f, 0.047676f, 0.154708f, -0.092991f, -0.155943f, -0.087762f, -0.102555f, 0.180088f, -0.090139f, 0.072213f,
    0.092641f, -0.187890f, -0.199580f, -0.168931f, -0.207382f, 0.050409f, 0.141527f, 0.056114f, 0.009493f, -0.011854f,
    -0.002927f, 0.147685f, 0.048667f, 0.100357f, 0.020519f, 0.138656f, 0.186551f, 0.220805f, 0.127519f, 0.039521f,
    0.024503f, -0.190510f, -0.147383f, -0.143757f, 0.204847f, -0.210230f, 0.083501f, 0.123640f, 0.186737f, -0.221029f,
    0.160248f, 0.204670f, -0.025124f, 0.118449f, -0.028709f, -0.188746f, -0.065910f, -0.060962f, -0.073948f, -0.001868f,
    -0.165550f, 0.142566f, 0.181686f, -0.007857f, 0.116313f, 0.072355f, -0.182648f, -0.214057f, -0.223359f, -0.064411f,
    0.098962f, -0.005795f, 0.132286f, -0.219772f, 0.062620f, -0.038352f, 0.105785f, 0.016361f, -0.031816f, 0.166019f,
    0.125361f, -0.182441f, -0.216704f, -0.008513f, 0.047580f, -0.104894f, -0.222024f, -0.049286f, 0.109649f, -0.011349f,
    0.038031f, 0.036515f, 0.077355f, -0.008998f, -0.162577f, -0.007421f, 0.036170f, -0.099021f, -0.039698f, 0.155147f,
    -0.019790f, -0.110576f, 0.206098f, -0.050814f, 0.185790f, -0.214622f, -0.062406f, -0.143407f, 0.197068f, 0.219330f,
    -0.092647f, 0.064027f, -0.190935f, -0.137998f, -0.012913f, 0.062185f, -0.175505f, -0.011269f, 0.024914f, 0.214983f,
    -0.070754f, -0.059900f, -0.188646f, 0.219626f, 0.106785f, -0.165332f, 0.088691f, 0.042793f, -0.192136f, 0.202179f,
    -0.197296f, 0.193348f, -0.127675f, 0.103625f, 0.039025f, -0.107495f, 0.213571f, 0.121275f, -0.116585f, 0.125864f
};

static const float weights_2_in_scales[] = {0.0028095490f, 0.0028095490f, 0.0028095490f, 0.0028095490f};
static const float weights_2_in_zero_points[] = {0.f, 0.f, 0.f, 0.f};
static const int8_t weights_2_in_scales_frac[] = {23, 23, 23, 23};
static const int weights_2_in_sa_dim = 0;

static const int weights_2_in_fx8_frac = 9;

#define WEIGHTS_2_IN_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 4, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_2_in_tsr_fx16 = {
    WEIGHTS_2_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_tsr_fx8 = {
    WEIGHTS_2_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_in_tsr_sa8 = {
    WEIGHTS_2_IN_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_2_in_fx16(weights_2_in_tsr_fx16, weights_2_in_fx8_frac + 8, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]));
tensor_quantizer weights_2_in_fx8(weights_2_in_tsr_fx8, weights_2_in_fx8_frac, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]));
tensor_quantizer weights_2_in_sa8(weights_2_in_tsr_sa8, weights_2_in_sa_dim, weights_2_in_data, 
    sizeof(weights_2_in_data) / sizeof(weights_2_in_data[0]), weights_2_in_scales, 
    sizeof(weights_2_in_scales) / sizeof(weights_2_in_scales[0]), 
    weights_2_in_zero_points, sizeof(weights_2_in_zero_points) / sizeof(weights_2_in_zero_points[0]), 
    weights_2_in_scales_frac, sizeof(weights_2_in_scales_frac) / sizeof(weights_2_in_scales_frac[0]));


static const float weights_2_out_data[] = {
    0.167835f, 0.063705f, -0.047150f, -0.173314f, 0.110245f, 0.093551f, 0.089827f, -0.091988f, -0.107899f, 0.161003f,
    0.090620f, 0.157432f, 0.206900f, 0.027564f, 0.109277f, -0.100349f, -0.122821f, 0.201957f, -0.001491f, -0.017994f,
    0.100276f, -0.142073f, -0.016852f, -0.023274f, 0.044168f, 0.018196f, -0.041121f, 0.131898f, -0.042068f, 0.050422f,
    0.153522f, 0.002803f, -0.146268f, 0.097922f, 0.173407f, 0.198260f, -0.222278f, 0.040729f, 0.012943f, -0.005360f,
    -0.029995f, 0.049170f, -0.102093f, -0.183815f, 0.181639f, 0.003861f, -0.027889f, 0.136241f, -0.120559f, 0.006067f,
    -0.209700f, -0.209674f, 0.039550f, -0.006935f, -0.073967f, -0.167287f, 0.023886f, -0.210330f, 0.147579f, -0.184693f,
    0.201366f, -0.177151f, 0.046557f, -0.170233f, 0.071385f, -0.218637f, -0.032705f, -0.121502f, 0.116588f, 0.080836f,
    0.205109f, 0.136136f, -0.149712f, -0.076286f, 0.093290f, 0.108275f, 0.049227f, -0.153764f, -0.165573f, 0.196952f,
    -0.123027f, -0.183617f, -0.178148f, -0.173407f, 0.175870f, -0.172027f, 0.130264f, 0.208929f, -0.087232f, 0.135628f,
    0.181928f, -0.055297f, -0.119005f, 0.080340f, -0.127101f, -0.187051f, 0.027231f, 0.147229f, 0.145485f, 0.006610f,
    -0.173927f, 0.172593f, -0.075933f, -0.114781f, 0.194149f, -0.031483f, 0.135975f, -0.188521f, -0.081952f, -0.143817f,
    0.014166f, 0.113977f, -0.109997f, 0.113530f, 0.000375f, 0.218683f, -0.209746f, -0.030106f, -0.056218f, -0.114104f,
    -0.168288f, -0.129993f, -0.112255f, -0.191468f, 0.106975f, 0.097679f, 0.016467f, -0.142401f, 0.138178f, -0.187588f,
    0.005736f, -0.092035f, -0.147557f, -0.000031f, -0.052873f, -0.113349f, -0.158757f, -0.045760f, -0.179446f, -0.111334f,
    -0.220002f, -0.120271f, -0.202107f, -0.162482f, 0.193780f, 0.162971f, 0.029401f, -0.013702f, 0.170750f, -0.041853f,
    -0.200012f, 0.036373f, 0.210744f, -0.155297f, 0.058808f, 0.142013f, 0.141808f, 0.066765f, 0.072691f, -0.205788f,
    0.170215f, 0.161415f, 0.119334f, -0.008049f, 0.008019f, -0.017913f, -0.089514f, 0.048115f, 0.185203f, -0.192009f,
    -0.074298f, -0.163980f, 0.220143f, 0.007820f, 0.203869f, 0.214256f, -0.212323f, 0.014825f, 0.146552f, -0.125194f,
    0.033910f, 0.080085f, -0.050760f, 0.134749f, -0.048893f, 0.025971f, 0.174238f, -0.163096f, -0.037424f, 0.095486f,
    -0.119810f, -0.044706f, 0.030701f, -0.102990f, -0.161910f, -0.101647f, 0.037884f, 0.180698f, 0.153843f, 0.088497f,
    -0.036466f, 0.021889f, 0.201193f, -0.066375f, -0.097072f, 0.190403f, -0.133044f, 0.171906f, 0.198965f, -0.028494f,
    0.172538f, -0.066706f, 0.042407f, -0.048303f, 0.017772f, -0.069784f, 0.043031f, 0.216718f, -0.126173f, -0.137410f,
    -0.027650f, -0.209674f, 0.110854f, -0.029088f, 0.058506f, -0.120669f, 0.133515f, 0.128979f, 0.134308f, 0.084988f,
    0.158021f, -0.065209f, -0.074871f, -0.077406f, 0.086663f, -0.140176f, 0.130243f, 0.138104f, 0.085378f, -0.058007f,
    -0.191209f, 0.008499f, 0.035172f, 0.009276f, 0.199100f, 0.069802f, -0.200180f, 0.115241f, -0.188171f, -0.003446f,
    -0.158857f, -0.114841f, -0.221042f, 0.169112f, -0.218999f, 0.075644f, 0.104259f, 0.008161f, -0.089916f, -0.054983f,
    -0.170634f, 0.056563f, 0.203485f, 0.105668f, 0.182042f, 0.013195f, -0.210756f, 0.110612f, -0.221942f, -0.175589f,
    0.002497f, -0.052864f, -0.032493f, -0.128613f, 0.088411f, -0.035982f, -0.111324f, 0.024870f, 0.156605f, 0.222242f,
    -0.207663f, 0.103996f, -0.162856f, 0.104305f, 0.092400f, 0.047631f, -0.187579f, 0.112202f, 0.150603f, 0.180919f,
    -0.027280f, -0.074792f, 0.072853f, -0.123376f, 0.017023f, 0.077723f, 0.032376f, -0.115409f, 0.096554f, 0.185531f,
    0.209959f, 0.196302f, -0.001820f, -0.015116f, -0.200693f, 0.093436f, -0.111019f, -0.188566f, -0.061741f, 0.148195f,
    -0.201805f, -0.181109f, -0.190698f, 0.037185f, 0.030398f, 0.114145f, -0.142837f, 0.107357f, 0.022817f, 0.098783f,
    -0.099045f, -0.057791f, -0.174402f, -0.055775f, -0.046114f, -0.047807f, -0.052353f, -0.026963f, -0.192051f, 0.030915f,
    0.008466f, 0.015059f, 0.043697f, 0.184546f, 0.071156f, 0.060800f, 0.030192f, 0.201586f, -0.061769f, 0.009828f,
    -0.103096f, -0.051297f, 0.198163f, -0.192309f, -0.159130f, 0.102336f, 0.085496f, 0.113627f, 0.149577f, 0.041917f,
    0.210087f, -0.018156f, 0.068915f, -0.077153f, -0.122500f, 0.154256f, -0.078550f, -0.198516f, -0.070919f, 0.217093f,
    -0.054306f, 0.016328f, 0.011511f, 0.203877f, -0.222172f, -0.097527f, 0.090745f, -0.033107f, -0.156937f, 0.007693f,
    0.151335f, -0.051234f, -0.045235f, 0.193979f, 0.002388f, 0.109717f, 0.132648f, -0.026062f, -0.013727f, 0.206403f,
    0.198363f, -0.143798f, -0.153780f, -0.018571f, -0.196235f, 0.117383f, -0.055293f, 0.185606f, -0.199452f, -0.055772f,
    -0.165676f, -0.007657f, -0.208335f, 0.097956f, 0.184854f, -0.104258f, 0.044547f, 0.059680f, 0.207785f, 0.068106f,
    0.164106f, 0.215090f, 0.179733f, 0.077317f, 0.046524f, 0.182173f, 0.095961f, 0.210924f, -0.196603f, 0.125310f,
    -0.023172f, -0.101326f, 0.201337f, 0.072435f, -0.003827f, -0.061309f, -0.170266f, -0.158018f, -0.003373f, -0.062733f,
    0.145360f, 0.036520f, -0.079005f, 0.191123f, 0.029571f, 0.168871f, -0.102136f, -0.062873f, 0.136833f, 0.014172f,
    0.192440f, -0.218776f, -0.081571f, -0.146629f, 0.186374f, 0.112465f, 0.186174f, -0.189944f, -0.109458f, -0.093765f,
    0.117468f, 0.207597f, -0.026656f, 0.064871f, 0.001016f, -0.103092f, 0.042676f, -0.024363f, -0.114897f, -0.190942f,
    -0.142111f, 0.103829f, 0.086528f, -0.174025f, -0.102998f, -0.060324f, 0.161224f, 0.193304f, -0.194937f, 0.196764f,
    0.168390f, 0.046783f, 0.108568f, 0.183087f, -0.025355f, -0.036453f, -0.223052f, 0.136025f, -0.107109f, 0.092039f,
    -0.008554f, 0.098496f, -0.122053f, 0.152339f, 0.205871f, -0.110051f, -0.103075f, 0.031979f, 0.052850f, -0.191003f,
    -0.178258f, 0.024599f, 0.125208f, -0.002205f, 0.096716f, -0.107943f, 0.068518f, -0.187362f, -0.037874f, -0.003904f,
    -0.052326f, -0.196000f, 0.073512f, -0.059448f, -0.216342f, 0.006081f, 0.185786f, 0.068725f, -0.157661f, 0.143247f,
    0.202369f, 0.058098f, 0.052222f, -0.181083f, 0.172284f, -0.111946f, -0.020408f, 0.133200f, 0.140953f, -0.162253f,
    -0.220453f, -0.158270f, 0.104651f, -0.002510f, 0.186736f, 0.095770f, -0.113694f, -0.047920f, 0.070547f, -0.018975f,
    -0.053978f, 0.003475f, 0.103399f, -0.186820f, 0.147166f, -0.004996f, -0.081004f, -0.127126f, 0.145670f, 0.070400f,
    -0.111266f, -0.088257f, 0.051627f, -0.172650f, 0.168071f, -0.057283f, 0.168377f, 0.133750f, 0.009135f, 0.023557f,
    0.071079f, -0.079677f, -0.047250f, -0.189432f, -0.036235f, 0.095021f, -0.128304f, 0.012890f, 0.055696f, 0.094972f,
    0.046630f, -0.182594f, 0.216570f, -0.146282f, -0.105132f, 0.174527f, 0.106049f, 0.038630f, 0.213420f, -0.133515f,
    0.113255f, 0.018391f, 0.030614f, -0.153302f, 0.213233f, -0.165478f, -0.086239f, -0.167356f, -0.200255f, -0.129513f,
    0.183550f, 0.194990f, 0.193449f, 0.021391f, 0.046247f, 0.201053f, -0.041237f, -0.121248f, -0.064968f, -0.066880f,
    0.059593f, 0.125412f, 0.052053f, 0.032745f, -0.219392f, 0.137539f, 0.197406f, 0.178097f, -0.096768f, -0.212227f,
    0.142913f, 0.074369f, 0.034524f, 0.188476f, 0.072088f, -0.171582f, 0.190835f, -0.196259f, 0.038653f, 0.053834f,
    0.047156f, 0.164352f, -0.123717f, -0.101210f, -0.027508f, -0.216662f, -0.000871f, -0.189895f, 0.003095f, 0.079791f,
    0.133110f, 0.003693f, -0.100207f, 0.220251f, 0.046965f, -0.065838f, 0.087582f, -0.180239f, 0.140553f, -0.221828f,
    -0.155799f, 0.063488f, 0.128974f, -0.024485f, 0.146794f, 0.102377f, 0.113350f, 0.025563f, 0.157330f, 0.184802f,
    0.175358f, 0.123127f, 0.187001f, -0.165062f, -0.086473f, -0.012790f, -0.121408f, -0.063571f, 0.125672f, -0.077523f,
    -0.152594f, 0.027598f, -0.028787f, 0.061986f, 0.019551f, 0.070889f, 0.101041f, 0.196582f, 0.049028f, -0.093557f,
    0.003031f, -0.117338f, 0.022376f, -0.138966f, 0.130635f, 0.180893f, -0.203242f, 0.112248f, -0.183469f, -0.178700f,
    -0.164395f, 0.215299f, -0.087717f, -0.119720f, 0.050123f, 0.158718f, 0.147806f, 0.178746f, 0.102738f, -0.058494f,
    -0.075858f, 0.060914f, 0.091147f, 0.111252f, 0.071460f, -0.067485f, 0.073857f, 0.155686f, -0.083633f, 0.088357f,
    0.081947f, -0.146507f, -0.142409f, -0.077005f, -0.209122f, -0.101270f, -0.197655f, 0.113502f, 0.222207f, -0.134469f,
    -0.173551f, -0.052490f, -0.088854f, -0.140622f, 0.125585f, -0.107680f, 0.037896f, 0.220076f, -0.042180f, 0.137794f,
    -0.148638f, -0.095679f, 0.022330f, -0.134463f, -0.182540f, 0.104000f, 0.039120f, 0.062367f, -0.021241f, -0.159172f,
    0.040426f, -0.036389f, -0.223329f, -0.154012f, 0.139934f, 0.120860f, -0.003052f, 0.173851f, 0.119319f, 0.162694f,
    0.144606f, -0.210931f, 0.095027f, -0.218852f, 0.074674f, 0.104096f, 0.175916f, -0.090081f, 0.100815f, -0.143710f,
    0.068308f, 0.098620f, 0.209808f, -0.219607f, -0.136117f, 0.120118f, 0.146975f, 0.036982f, 0.128141f, 0.150677f,
    -0.004672f, 0.217635f, -0.093389f, -0.203156f, 0.017928f, -0.169360f, -0.086402f, 0.055286f, 0.165811f, -0.120189f,
    -0.057811f, 0.012757f, -0.147701f, 0.020307f, -0.200238f, -0.144664f, 0.098523f, 0.138225f, -0.034369f, -0.157928f,
    0.117802f, -0.029718f, 0.093356f, 0.108862f, -0.164018f, 0.066848f, 0.008037f, -0.121897f, -0.007919f, -0.054089f,
    -0.066342f, 0.164252f, 0.019428f, -0.090386f, 0.148942f, -0.216446f, 0.140312f, 0.218310f, 0.154248f, -0.199916f,
    -0.021441f, 0.151869f, -0.220830f, -0.140951f, -0.184155f, -0.080243f, 0.066183f, 0.148342f, -0.089818f, -0.103796f,
    0.025811f, -0.053233f, 0.075599f, -0.203496f, -0.100979f, 0.121235f, 0.023695f, -0.021238f, -0.195551f, 0.215529f,
    -0.163324f, -0.204461f, -0.008564f, 0.133091f, -0.162434f, -0.185311f, 0.163537f, 0.092182f, 0.010264f, 0.143087f,
    0.063083f, 0.211198f, -0.200068f, 0.211737f, 0.034513f, 0.039879f, 0.129139f, -0.019681f, 0.105119f, 0.170691f,
    0.060712f, -0.106137f, 0.181961f, -0.032851f, 0.156084f, 0.057405f, -0.129746f, 0.222617f, 0.063441f, -0.154334f,
    -0.035693f, -0.107289f, 0.141257f, -0.124251f, -0.075336f, -0.165350f, -0.083473f, -0.170703f, 0.143760f, -0.190242f,
    -0.132528f, -0.100158f, 0.029455f, -0.076387f, -0.154319f, 0.174616f, 0.223031f, -0.171360f, 0.197178f, 0.018922f,
    -0.035383f, -0.042852f, 0.075377f, 0.000203f, 0.059793f, -0.129261f, 0.098857f, 0.076130f, 0.198469f, 0.132132f,
    -0.058324f, -0.028000f, -0.106855f, -0.099398f, -0.132990f, -0.100699f, -0.200405f, -0.014921f, -0.061774f, 0.169076f,
    0.142502f, 0.097696f, -0.170288f, 0.132124f, 0.083573f, 0.031744f, 0.145313f, 0.180770f, 0.183279f, 0.137686f,
    -0.131876f, 0.169656f, -0.130169f, -0.162313f, -0.042876f, 0.039250f, 0.115516f, 0.133751f, 0.030163f, -0.098510f,
    0.181566f, 0.137791f, 0.046314f, -0.108856f, 0.012210f, 0.210243f, -0.210413f, -0.191140f, -0.055519f, 0.206579f,
    0.054072f, -0.010622f, 0.091573f, -0.210074f, -0.138217f, -0.222845f, 0.210617f, -0.041890f, 0.041012f, -0.051896f,
    -0.174246f, -0.051237f, -0.191911f, 0.038585f, 0.070661f, -0.171611f, -0.080693f, 0.057699f, 0.072181f, 0.142906f,
    0.210252f, 0.194910f, 0.159052f, -0.087622f, -0.012290f, -0.006579f, -0.193635f, -0.146517f, 0.185652f, -0.144080f,
    -0.175259f, -0.073579f, 0.005534f, -0.073748f, -0.051798f, -0.069141f, 0.131633f, 0.172380f, 0.041164f, 0.130103f,
    -0.088775f, -0.141765f, 0.084480f, 0.147821f, -0.126550f, 0.182367f, -0.122906f, -0.146425f, -0.112880f, -0.035885f,
    -0.104675f, -0.121729f, -0.141581f, 0.016019f, -0.052274f, 0.137301f, -0.138325f, -0.134864f, -0.098489f, 0.068760f,
    0.097389f, -0.143237f, -0.127552f, 0.000718f, 0.068615f, 0.193972f, -0.096320f, 0.000875f, 0.153340f, -0.002326f,
    -0.105710f, -0.023828f, 0.105902f, 0.052297f, 0.065802f, -0.061115f, -0.044451f, -0.146042f, -0.123594f, 0.045573f,
    -0.077275f, -0.041963f, 0.200584f, -0.086611f, -0.043535f, -0.190587f, -0.085269f, -0.221789f, -0.128207f, 0.028396f,
    0.162682f, -0.007748f, 0.221743f, -0.101179f, -0.138682f, -0.021823f, 0.164453f, -0.186298f, 0.091712f, 0.114796f,
    0.171457f, -0.211014f, 0.151738f, -0.112187f, -0.029802f, -0.219155f, -0.041926f, -0.179001f, 0.021312f, 0.136044f,
    0.050671f, -0.077682f, -0.097129f, -0.187435f, 0.111458f, -0.159233f, 0.135815f, 0.054151f, 0.132566f, 0.175901f,
    0.220596f, -0.124241f, 0.040856f, 0.117871f, -0.202958f, -0.121740f, -0.102715f, -0.044131f, -0.114739f, 0.105699f,
    0.220637f, -0.214059f, 0.092865f, 0.157912f, 0.109457f, 0.027788f, 0.005194f, 0.164079f, -0.147177f, -0.130614f,
    -0.103818f, -0.093867f, -0.088245f, 0.023237f, -0.114301f, 0.171530f, -0.221211f, 0.204390f, -0.223050f, -0.161300f,
    0.192723f, 0.084644f, -0.121866f, -0.091226f, 0.115980f, -0.137428f, 0.062173f, -0.033995f, 0.028713f, -0.122307f,
    0.209012f, 0.158484f, 0.115110f, 0.016989f, -0.084024f, 0.046975f, -0.220065f, 0.203061f, 0.044030f, 0.170406f,
    0.178731f, -0.015288f, -0.177247f, -0.186885f, 0.150867f, 0.078795f, -0.110734f, -0.090017f, -0.174020f, -0.156692f,
    0.088921f, 0.191011f, 0.024292f, -0.074918f, 0.078711f, -0.100657f, -0.203683f, 0.096822f, 0.130963f, -0.009669f,
    0.177496f, 0.159611f, 0.202037f, 0.057368f, 0.124648f, 0.124015f, 0.169989f, -0.191035f, 0.098220f, -0.112268f,
    -0.128852f, -0.186261f, -0.117930f, -0.060849f, 0.220067f, 0.137361f, -0.089257f, -0.078136f, 0.168540f, 0.214503f,
    -0.140602f, -0.078680f, 0.153716f, -0.109214f, 0.066192f, 0.017667f, 0.146654f, 0.021324f, -0.153739f, -0.219575f,
    -0.175728f, -0.042098f, 0.156713f, 0.168891f, 0.092754f, -0.154050f, -0.127433f, -0.119198f, -0.191446f, -0.046868f,
    0.138009f, 0.092733f, 0.006652f, -0.145173f, 0.189391f, 0.098632f, -0.218209f, -0.019571f, 0.040347f, -0.138759f,
    0.197711f, -0.159536f, -0.115776f, 0.128425f, 0.017017f, 0.137140f, 0.099218f, -0.183852f, 0.058396f, 0.034180f,
    -0.018397f, 0.045246f, -0.172550f, 0.072603f, 0.061585f, 0.068224f, -0.156181f, -0.179363f, 0.136116f, -0.010424f,
    -0.127716f, 0.221502f, -0.005826f, -0.126555f, 0.215516f, -0.155728f, 0.213168f, -0.024349f, 0.194479f, -0.201048f,
    0.180261f, 0.118405f, -0.069262f, 0.062290f, 0.087347f, 0.110406f, 0.149847f, 0.195160f, 0.144341f, 0.116286f,
    -0.150938f, 0.007200f, 0.056005f, 0.061679f, 0.014119f, -0.150650f, -0.063287f, -0.073102f, 0.109362f, -0.202087f,
    0.103101f, -0.172832f, 0.130279f, 0.185653f, -0.184480f, 0.129157f, -0.195793f, 0.103450f, -0.162474f, 0.176566f,
    -0.204742f, 0.020807f, -0.118957f, -0.122738f, -0.113948f, 0.061991f, -0.153211f, 0.103530f, -0.030951f, -0.157099f,
    0.184612f, 0.208817f, 0.005934f, 0.144341f, 0.218529f, 0.131463f, 0.128427f, -0.160388f, -0.093545f, 0.083899f,
    0.114887f, 0.002422f, 0.070230f, -0.211886f, -0.131532f, 0.195382f, -0.063492f, 0.087951f, -0.127385f, 0.101516f,
    0.142010f, -0.198758f, 0.010793f, 0.003573f, -0.092156f, -0.007744f, -0.181418f, -0.047818f, -0.102259f, -0.105618f,
    -0.201441f, 0.192408f, -0.097606f, -0.029215f, 0.124244f, -0.175527f, -0.123419f, 0.012284f, 0.217320f, -0.010977f,
    -0.066228f, -0.051609f, -0.088034f, -0.163905f, 0.055831f, -0.064945f, -0.178565f, 0.202353f, 0.066630f, 0.144366f,
    -0.052702f, 0.136486f, 0.179721f, -0.160158f, 0.087332f, 0.151653f, -0.167404f, -0.042355f, 0.186812f, 0.079822f,
    -0.162360f, 0.162228f, 0.210795f, -0.165361f, -0.060599f, 0.124611f, -0.099481f, -0.138033f, -0.130707f, 0.174365f,
    -0.078590f, 0.160541f, 0.203530f, -0.142594f, -0.107564f, 0.196198f, 0.173435f, -0.079382f, 0.037301f, -0.098984f,
    0.048418f, 0.187017f, -0.178312f, 0.060657f, 0.171291f, 0.199830f, -0.057477f, -0.011157f, 0.073981f, 0.115701f,
    0.183034f, 0.151688f, -0.014272f, -0.086364f, 0.158314f, -0.156886f, 0.138083f, -0.130765f, -0.007714f, 0.196212f,
    -0.094694f, 0.173186f, -0.028012f, -0.087964f, 0.110127f, -0.142696f, 0.010697f, 0.067048f, -0.127463f, 0.069727f,
    0.172129f, 0.115351f, 0.083704f, -0.146488f, -0.167894f, -0.044523f, -0.019204f, 0.212652f, -0.121890f, 0.220537f,
    -0.144930f, -0.014597f, -0.191513f, -0.113179f, -0.022266f, -0.152684f, 0.114468f, -0.011972f, 0.072179f, -0.161182f,
    0.010541f, 0.006951f, -0.147436f, 0.140808f, -0.030503f, 0.000207f, 0.129034f, -0.135013f, -0.189444f, -0.106654f,
    -0.038411f, -0.124886f, -0.029694f, -0.216237f, -0.194940f, -0.031340f, 0.212656f, 0.121639f, 0.110957f, -0.061230f,
    -0.218279f, -0.130522f, -0.107101f, 0.180459f, -0.176616f, 0.195170f, 0.129941f, -0.033192f, -0.120503f, 0.024097f,
    -0.090745f, 0.093207f, -0.045179f, 0.194508f, 0.196041f, 0.208293f, -0.200070f, 0.083971f, -0.002960f, -0.021472f,
    0.213219f, 0.160766f, 0.035905f, 0.120380f, -0.009237f, -0.219320f, 0.096068f, -0.178446f, 0.220623f, -0.159358f,
    0.051844f, -0.058853f, -0.141447f, 0.169778f, 0.075192f, 0.160180f, -0.070187f, 0.022485f, -0.092956f, 0.190900f,
    0.213145f, -0.200713f, -0.220490f, -0.147950f, -0.208143f, -0.072646f, -0.068651f, -0.148086f, -0.079738f, 0.215881f,
    -0.060707f, 0.089174f, 0.209355f, -0.026494f, 0.152914f, -0.034262f, -0.165694f, 0.172348f, -0.114029f, -0.076403f,
    -0.000175f, 0.114183f, -0.031604f, -0.051690f, 0.218509f, -0.188419f, 0.186382f, -0.146820f, 0.164892f, 0.033834f,
    -0.071324f, 0.110831f, 0.022503f, -0.180976f, -0.070905f, -0.186247f, -0.149197f, -0.044578f, 0.107577f, 0.013196f,
    -0.005824f, 0.182466f, 0.155654f, -0.050367f, -0.091836f, 0.047017f, -0.002679f, -0.138998f, -0.070756f, 0.015569f,
    0.120115f, -0.129159f, 0.029801f, -0.055606f, 0.121115f, -0.037315f, 0.167629f, -0.034648f, 0.038533f, 0.022746f,
    0.123177f, -0.098105f, -0.023913f, 0.141238f, 0.175314f, 0.118630f, 0.082645f, -0.166231f, -0.186836f, -0.133150f,
    -0.021536f, -0.087314f, -0.206595f, -0.153640f, 0.079404f, 0.184115f, -0.154037f, 0.167351f, -0.041488f, -0.153130f,
    -0.131818f, 0.079807f, -0.161855f, -0.064392f, 0.116279f, 0.159307f, -0.176952f, 0.170849f, -0.144912f, 0.197428f,
    0.018381f, -0.022645f, 0.010161f, -0.098774f, 0.087806f, 0.166025f, 0.165686f, 0.122709f, 0.143828f, 0.055006f,
    -0.088267f, -0.218940f, -0.194061f, -0.093608f, 0.209773f, -0.063833f, 0.028335f, -0.111243f, -0.138619f, -0.058961f,
    -0.126644f, 0.067546f, 0.004597f, 0.015740f, 0.007733f, -0.216797f, -0.130392f, 0.126184f, 0.081218f, -0.101708f,
    -0.128394f, -0.106581f, -0.091332f, -0.020301f, -0.136722f, -0.158069f, 0.187786f, 0.036686f, 0.217354f, 0.098843f,
    0.052253f, -0.130426f, 0.173869f, -0.005420f, 0.213368f, -0.151379f, 0.064106f, 0.170939f, 0.030680f, -0.008094f,
    -0.002759f, -0.106969f, 0.007537f, -0.142639f, 0.222338f, -0.036255f, 0.036891f, 0.126121f, -0.041240f, -0.041323f,
    0.075895f, -0.043023f, -0.223255f, 0.112626f, -0.169193f, 0.208660f, -0.187377f, 0.088171f, -0.081989f, 0.169827f,
    -0.039331f, 0.022143f, 0.162524f, -0.054814f, -0.049465f, 0.070658f, 0.063271f, 0.021199f, 0.177148f, 0.166315f,
    0.089299f, -0.174754f, 0.077471f, -0.099352f, -0.213759f, -0.145699f, 0.184429f, 0.062835f, -0.102669f, 0.092571f,
    -0.074540f, 0.071668f, -0.188485f, -0.083814f, -0.005591f, -0.024624f, 0.176617f, 0.080763f, -0.044207f, -0.203882f,
    -0.033560f, -0.102393f, 0.079823f, 0.036561f, -0.164998f, 0.087720f, -0.157288f, 0.003040f, -0.111555f, 0.106300f
};

static const float weights_2_out_scales[] = {0.0028091713f, 0.0028091713f, 0.0028091713f, 0.0028091713f};
static const float weights_2_out_zero_points[] = {0.f, 0.f, 0.f, 0.f};
static const int8_t weights_2_out_scales_frac[] = {23, 23, 23, 23};
static const int weights_2_out_sa_dim = 0;

static const int weights_2_out_fx8_frac = 9;

#define WEIGHTS_2_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 20, 20}, \
    /* .rank =  */ 3

static const mli_tensor weights_2_out_tsr_fx16 = {
    WEIGHTS_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_tsr_fx8 = {
    WEIGHTS_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor weights_2_out_tsr_sa8 = {
    WEIGHTS_2_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer weights_2_out_fx16(weights_2_out_tsr_fx16, weights_2_out_fx8_frac + 8, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]));
tensor_quantizer weights_2_out_fx8(weights_2_out_tsr_fx8, weights_2_out_fx8_frac, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]));
tensor_quantizer weights_2_out_sa8(weights_2_out_tsr_sa8, weights_2_out_sa_dim, weights_2_out_data, 
    sizeof(weights_2_out_data) / sizeof(weights_2_out_data[0]), weights_2_out_scales, 
    sizeof(weights_2_out_scales) / sizeof(weights_2_out_scales[0]), 
    weights_2_out_zero_points, sizeof(weights_2_out_zero_points) / sizeof(weights_2_out_zero_points[0]), 
    weights_2_out_scales_frac, sizeof(weights_2_out_scales_frac) / sizeof(weights_2_out_scales_frac[0]));


static const float bias_1_data[] = {
    -0.077869f, -0.195449f, 0.057488f, -0.096658f, -0.177305f, -0.028064f, -0.190424f, 0.110157f, -0.147335f, -0.076112f,
    -0.221210f, -0.031102f, -0.069045f, 0.123385f, -0.050599f, 0.150529f, 0.195222f, 0.045610f, -0.076639f, -0.184217f,
    0.024632f, 0.142630f, -0.183504f, -0.149997f, 0.120339f, 0.049120f, 0.061889f, 0.127824f, 0.141778f, 0.105083f,
    -0.082834f, -0.070832f, 0.047093f, 0.184031f, -0.016944f, -0.066560f, 0.123538f, 0.148239f, -0.004151f, -0.066123f,
    -0.156448f, -0.075331f, -0.140133f, 0.118396f, -0.072192f, -0.008185f, 0.009304f, -0.193214f, 0.186456f, -0.085462f,
    -0.180995f, -0.003536f, -0.196543f, 0.027900f, -0.144694f, -0.049038f, -0.065767f, 0.161817f, 0.172565f, 0.221668f,
    -0.222771f, 0.013738f, 0.068544f, -0.164163f, -0.166015f, -0.223549f, 0.174718f, 0.209620f, 0.221296f, 0.199625f,
    -0.023574f, 0.099456f, 0.132351f, -0.059732f, -0.128829f, 0.186132f, -0.023432f, 0.082454f, -0.104567f, -0.115348f
};

static const float bias_1_i1_w1_scales[] = {0.00003487221f, 0.00003487221f, 0.00003487221f, 0.00003487221f};
static const float bias_1_i1_w1_zero_points[] = {0.f, 0.f, 0.f, 0.f};
static const int8_t bias_1_i1_w1_scales_frac[] = {28, 28, 28, 28};
static const int bias_1_i1_w1_sa_dim = 0;

static const float bias_1_i2_w2_scales[] = {0.0000740471f, 0.0000740471f, 0.0000740471f, 0.0000740471f};
static const float bias_1_i2_w2_zero_points[] = {0.f, 0.f, 0.f, 0.f};
static const int8_t bias_1_i2_w2_scales_frac[] = {28, 28, 28, 28};
static const int bias_1_i2_w2_sa_dim = 0;

static const int bias_1_fx8_frac = 9;

#define BIAS_1_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 20}, \
    /* .rank =  */ 2

static const mli_tensor bias_1_tsr_fx16 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_tsr_fx8 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_8,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_i1_w1_tsr_sa32 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

static const mli_tensor bias_1_i2_w2_tsr_sa32 = {
    BIAS_1_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_32,
    /* .el_params = */ { 0 }
};

tensor_quantizer bias_1_fx16(bias_1_tsr_fx16, bias_1_fx8_frac + 8, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]));
tensor_quantizer bias_1_fx8(bias_1_tsr_fx8, bias_1_fx8_frac, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]));
tensor_quantizer bias_1_i1_w1_sa32(bias_1_i1_w1_tsr_sa32, bias_1_i1_w1_sa_dim, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]), bias_1_i1_w1_scales, 
    sizeof(bias_1_i1_w1_scales) / sizeof(bias_1_i1_w1_scales[0]), 
    bias_1_i1_w1_zero_points, sizeof(bias_1_i1_w1_zero_points) / sizeof(bias_1_i1_w1_zero_points[0]), 
    bias_1_i1_w1_scales_frac, sizeof(bias_1_i1_w1_scales_frac) / sizeof(bias_1_i1_w1_scales_frac[0]));
tensor_quantizer bias_1_i2_w2_sa32(bias_1_i2_w2_tsr_sa32, bias_1_i2_w2_sa_dim, bias_1_data, 
    sizeof(bias_1_data) / sizeof(bias_1_data[0]), bias_1_i2_w2_scales, 
    sizeof(bias_1_i2_w2_scales) / sizeof(bias_1_i2_w2_scales[0]), 
    bias_1_i2_w2_zero_points, sizeof(bias_1_i2_w2_zero_points) / sizeof(bias_1_i2_w2_zero_points[0]), 
    bias_1_i2_w2_scales_frac, sizeof(bias_1_i2_w2_scales_frac) / sizeof(bias_1_i2_w2_scales_frac[0]));


static const float test_1_out_data[] = {
    -0.012827f, -0.107824f, -0.112295f, -0.098992f, 0.179635f, -0.412632f, 0.254164f, 0.263925f, 0.298032f, 0.237883f, 
    0.179314f, -0.068595f, -0.028372f, -0.059132f, 0.094298f, -0.469132f, 0.167847f, -0.206461f, -0.213269f, 0.068903f
};

static const float test_1_out_scale = 0.0048249299f;
static const float test_1_out_zero_point = -0.0855502486f;
static const int8_t test_1_out_scales_frac[] = {22};
static const int test_1_out_sa_dim = -1;

static const int test_1_out_fx8_frac = 8;

#define TEST_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_1_out_tsr_fx16 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_1_out_tsr_sa8 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_1_out_fx16(test_1_out_tsr_fx16, test_1_out_fx8_frac + 8, test_1_out_data, 
    sizeof(test_1_out_data) / sizeof(test_1_out_data[0]));
tensor_quantizer test_1_out_sa8(test_1_out_tsr_sa8, test_1_out_sa_dim, test_1_out_data, 
    sizeof(test_1_out_data) / sizeof(test_1_out_data[0]), 
    &test_1_out_scale, 1, &test_1_out_zero_point, 1, test_1_out_scales_frac, 1);


static const float test_3_out_data[] = {
    -0.326421f, -0.143164f, -0.291246f, -0.118608f, -0.020179f, -0.263037f, 0.441690f, 0.084924f, 0.399630f, 0.262371f, 
    0.230834f, -0.175891f, 0.062558f, -0.071145f, -0.162318f, -0.500640f, -0.047074f, -0.179350f, -0.101193f, 0.201567f, 
    -0.078928f, -0.050663f, -0.264999f, -0.209313f, -0.026832f, -0.309843f, 0.268347f, -0.139281f, 0.095096f, 0.312772f, 
    0.069764f, -0.062462f, 0.103764f, 0.103364f, -0.105568f, -0.363133f, 0.002478f, -0.231244f, -0.101990f, 0.161849f, 
    -0.047876f, 0.131427f, -0.382674f, -0.153756f, -0.069957f, -0.362112f, 0.039811f, -0.218114f, 0.199357f, 0.184623f, 
    -0.092343f, -0.005846f, -0.093674f, 0.138427f, -0.061132f, -0.285760f, 0.185173f, -0.198899f, -0.049300f, 0.188683f, 
    -0.002788f, 0.149505f, -0.303878f, -0.170153f, -0.055844f, -0.247970f, 0.023706f, -0.227324f, 0.140642f, 0.171357f, 
    -0.065582f, 0.006511f, -0.079170f, 0.182321f, -0.043809f, -0.187152f, 0.181496f, -0.199270f, -0.043616f, 0.150626f, 
    0.022939f, 0.116666f, -0.200304f, -0.132426f, -0.021815f, -0.079783f, 0.074388f, -0.120928f, 0.086492f, 0.121850f, 
    -0.007677f, -0.014990f, 0.014559f, 0.173032f, -0.015812f, -0.132631f, 0.103438f, -0.141919f, -0.051091f, 0.081241f, 
    -0.007383f, 0.102805f, -0.166975f, -0.087600f, -0.023823f, -0.074349f, 0.052465f, -0.061979f, 0.165911f, 0.033319f, 
    -0.055890f, -0.004877f, -0.018995f, 0.156499f, -0.034388f, -0.063247f, 0.147866f, -0.134436f, -0.001216f, 0.106350f, 
    0.036745f, 0.115407f, -0.146728f, -0.089575f, 0.029276f, 0.009346f, 0.061302f, -0.002034f, 0.065038f, 0.038169f, 
    0.001136f, -0.056873f, 0.054173f, 0.110438f, 0.028540f, -0.085405f, 0.067931f, -0.023378f, -0.029764f, -0.004021f, 
    0.092008f, 0.227467f, -0.237060f, -0.125078f, 0.006123f, -0.052182f, -0.032677f, -0.129168f, 0.016756f, 0.079866f, 
    -0.053759f, -0.096529f, -0.010670f, 0.119782f, 0.061158f, -0.140650f, 0.075841f, -0.047247f, -0.062451f, -0.012058f, 
    0.027813f, 0.035409f, -0.064088f, -0.023899f, 0.067672f, 0.051832f, 0.057258f, 0.110922f, 0.072177f, -0.058082f, 
    0.015328f, -0.115702f, 0.042163f, 0.059094f, 0.032243f, -0.087608f, 0.042371f, 0.041553f, -0.003369f, -0.065984f, 
    0.029844f, -0.005679f, -0.013154f, -0.050572f, 0.102099f, 0.083820f, 0.116454f, 0.185396f, 0.008387f, 0.042109f, 
    0.034089f, -0.122908f, 0.123672f, 0.018164f, 0.019451f, -0.038078f, -0.050703f, 0.168335f, -0.030623f, -0.126222f
};

static const float test_3_out_scale = 0.0059266081f;
static const float test_3_out_zero_point = -0.0294748843f;
static const int8_t test_3_out_scales_frac[] = {22};
static const int test_3_out_sa_dim = -1;

static const int test_3_out_fx8_frac = 7;

#define TEST_3_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_3_out_tsr_fx16 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_3_out_tsr_sa8 = {
    TEST_3_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_3_out_fx16(test_3_out_tsr_fx16, test_3_out_fx8_frac + 8, test_3_out_data, 
    sizeof(test_3_out_data) / sizeof(test_3_out_data[0]));
tensor_quantizer test_3_out_sa8(test_3_out_tsr_sa8, test_3_out_sa_dim, test_3_out_data, 
    sizeof(test_3_out_data) / sizeof(test_3_out_data[0]), 
    &test_3_out_scale, 1, &test_3_out_zero_point, 1, test_3_out_scales_frac, 1);


static const float test_4_out_data[] = {
    -0.311935f, -0.149927f, -0.185904f, -0.139146f, 0.059936f, -0.124206f, 0.506179f, 0.236696f, 0.333421f, 0.377023f, 
    0.255160f, -0.153774f, 0.130435f, -0.121977f, -0.190913f, -0.416968f, -0.151739f, -0.093582f, -0.145314f, 0.233135f, 
    -0.242082f, -0.084397f, -0.098132f, -0.067588f, 0.087146f, -0.041663f, 0.399509f, 0.241883f, 0.278308f, 0.201501f, 
    0.167592f, -0.094379f, 0.133492f, -0.074111f, -0.071321f, -0.331232f, -0.039823f, -0.015685f, -0.037567f, 0.113397f, 
    -0.034277f, 0.082773f, -0.226204f, -0.135170f, 0.036051f, -0.153479f, 0.130364f, -0.063979f, 0.080383f, 0.145318f, 
    0.034863f, -0.094851f, 0.065391f, 0.046150f, -0.011897f, -0.263512f, 0.050186f, -0.051571f, -0.066928f, 0.028440f, 
    0.015922f, 0.100832f, -0.164726f, -0.104443f, 0.056831f, -0.030837f, 0.086051f, -0.009453f, 0.028607f, 0.112536f, 
    0.033510f, -0.123145f, 0.073408f, 0.065152f, 0.032043f, -0.208777f, 0.022494f, 0.018870f, -0.068742f, -0.048304f, 
    -0.002323f, 0.095145f, -0.141379f, -0.069581f, 0.015821f, -0.069334f, 0.040243f, -0.028295f, 0.150263f, 0.023853f, 
    -0.051083f, -0.067231f, 0.004955f, 0.123880f, -0.020473f, -0.115108f, 0.124431f, -0.045440f, -0.012290f, 0.009803f, 
    0.033345f, 0.098987f, -0.119207f, -0.079133f, 0.026433f, -0.026319f, 0.059169f, -0.008118f, 0.092045f, 0.027015f, 
    -0.027532f, -0.069548f, 0.046944f, 0.125488f, -0.005040f, -0.090002f, 0.074602f, -0.019727f, -0.029667f, -0.007026f, 
    0.041148f, 0.161790f, -0.186740f, -0.102666f, -0.002434f, -0.082130f, 0.006991f, -0.105442f, 0.112351f, 0.043732f, 
    -0.090022f, -0.049422f, -0.025824f, 0.136737f, -0.006553f, -0.074590f, 0.130065f, -0.067364f, -0.028540f, 0.034930f, 
    0.029372f, 0.254031f, -0.302846f, -0.108578f, -0.060911f, -0.221982f, -0.035700f, -0.209721f, 0.208328f, 0.027744f, 
    -0.183761f, -0.012119f, -0.166928f, 0.142252f, -0.016159f, -0.067772f, 0.203927f, -0.126515f, 0.016086f, 0.102362f, 
    0.083781f, 0.207282f, -0.202640f, -0.171306f, -0.062005f, -0.139255f, 0.030572f, -0.249329f, 0.073577f, 0.096857f, 
    -0.101741f, -0.019975f, -0.022697f, 0.203253f, -0.024604f, -0.064071f, 0.101518f, -0.165258f, -0.054948f, 0.090050f, 
    0.098599f, 0.171685f, -0.137274f, -0.063702f, -0.046919f, -0.063112f, 0.092016f, -0.090253f, 0.110246f, -0.037470f, 
    -0.052647f, -0.060153f, 0.018185f, 0.169509f, 0.006636f, -0.101545f, 0.045078f, -0.135913f, -0.041613f, 0.060929f
};

static const float test_4_out_scale = 0.0058059604f;
static const float test_4_out_zero_point = 0.0446053743f;
static const int8_t test_4_out_scales_frac[] = {22};
static const int test_4_out_sa_dim = -1;

static const int test_4_out_fx8_frac = 7;

#define TEST_4_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_4_out_tsr_fx16 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_4_out_tsr_sa8 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_4_out_fx16(test_4_out_tsr_fx16, test_4_out_fx8_frac + 8, test_4_out_data, 
    sizeof(test_4_out_data) / sizeof(test_4_out_data[0]));
tensor_quantizer test_4_out_sa8(test_4_out_tsr_sa8, test_4_out_sa_dim, test_4_out_data, 
    sizeof(test_4_out_data) / sizeof(test_4_out_data[0]), 
    &test_4_out_scale, 1, &test_4_out_zero_point, 1, test_4_out_scales_frac, 1);


static const float test_5_out_data[] = {
    0.029844f, -0.005679f, -0.013154f, -0.050572f, 0.102099f, 0.083820f, 0.116454f, 0.185396f, 0.008387f, 0.042109f, 
    0.034089f, -0.122908f, 0.123672f, 0.018164f, 0.019451f, -0.038078f, -0.050703f, 0.168335f, -0.030623f, -0.126222f
};

static const float test_5_out_scale = 0.0019598615f;
static const float test_5_out_zero_point = 0.0295870900f;
static const int8_t test_5_out_scales_frac[] = {23};
static const int test_5_out_sa_dim = -1;

static const int test_5_out_fx8_frac = 9;

#define TEST_5_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_5_out_tsr_fx16 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_5_out_tsr_sa8 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_5_out_fx16(test_5_out_tsr_fx16, test_5_out_fx8_frac + 8, test_5_out_data, 
    sizeof(test_5_out_data) / sizeof(test_5_out_data[0]));
tensor_quantizer test_5_out_sa8(test_5_out_tsr_sa8, test_5_out_sa_dim, test_5_out_data, 
    sizeof(test_5_out_data) / sizeof(test_5_out_data[0]), 
    &test_5_out_scale, 1, &test_5_out_zero_point, 1, test_5_out_scales_frac, 1);


static const float test_6_out_data[] = {
    0.098599f, 0.171685f, -0.137274f, -0.063702f, -0.046919f, -0.063112f, 0.092016f, -0.090253f, 0.110246f, -0.037470f, 
    -0.052647f, -0.060153f, 0.018185f, 0.169509f, 0.006636f, -0.101545f, 0.045078f, -0.135913f, -0.041613f, 0.060929f
};

static const float test_6_out_scale = 0.0019431376f;
static const float test_6_out_zero_point = 0.0172052532f;
static const int8_t test_6_out_scales_frac[] = {24};
static const int test_6_out_sa_dim = -1;

static const int test_6_out_fx8_frac = 9;

#define TEST_6_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 20}, \
    /* .rank =  */ 2

static const mli_tensor test_6_out_tsr_fx16 = {
    TEST_6_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};

static const mli_tensor test_6_out_tsr_sa8 = {
    TEST_6_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer test_6_out_fx16(test_6_out_tsr_fx16, test_6_out_fx8_frac + 8, test_6_out_data, 
    sizeof(test_6_out_data) / sizeof(test_6_out_data[0]));
tensor_quantizer test_6_out_sa8(test_6_out_tsr_sa8, test_6_out_sa_dim, test_6_out_data, 
    sizeof(test_6_out_data) / sizeof(test_6_out_data[0]), &test_6_out_scale, 1, 
    &test_6_out_zero_point, 1, test_6_out_scales_frac, 1);


 const mli_rnn_cell_cfg test_1_cfg = {
     /* .direction = */ RNN_DIR_FORWARD,
     /* .results = */ RNN_OUT_LAST,
     /* .act = */ RNN_ACT_TANH
 };

const mli_rnn_cell_cfg test_2_cfg = {
   /* .direction = */ RNN_DIR_BACKWARD,
   /* .results = */ RNN_OUT_LAST,
   /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_3_cfg = {
    /* .direction = */ RNN_DIR_FORWARD,
    /* .results = */ RNN_OUT_ALL,
    /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_4_cfg = {
    /* .direction = */ RNN_DIR_BACKWARD,
    /* .results = */ RNN_OUT_ALL,
    /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_5_cfg = {
    /* .direction = */ RNN_DIR_FORWARD,
    /* .results = */ RNN_OUT_LAST,
    /* .act = */ RNN_ACT_TANH
};

const mli_rnn_cell_cfg test_6_cfg = {
    /* .direction = */ RNN_DIR_BACKWARD,
    /* .results = */ RNN_OUT_LAST,
    /* .act = */ RNN_ACT_TANH
};
