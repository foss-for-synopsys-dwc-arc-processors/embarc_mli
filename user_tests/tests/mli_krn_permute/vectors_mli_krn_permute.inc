
#include <stdint.h>

#include "mli_types.h"
#include "test_tensor_quantizer.h"

using mli::tst::tensor_quantizer;

extern mli::tst::tensor_quantizer input_1_memstr_fx16;
extern mli::tst::tensor_quantizer input_1_memstr_sa8;
extern mli::tst::tensor_quantizer input_2_fx16;
extern mli::tst::tensor_quantizer input_2_memstr_fx16;
extern mli::tst::tensor_quantizer input_2_sa8;
extern mli::tst::tensor_quantizer input_2_memstr_sa8;
extern mli::tst::tensor_quantizer input_3_fx16;
extern mli::tst::tensor_quantizer input_3_sa8;
extern mli::tst::tensor_quantizer input_4_fx16;
extern mli::tst::tensor_quantizer input_4_sa8;
extern mli::tst::tensor_quantizer test_1_out_fx16;
extern mli::tst::tensor_quantizer test_1_out_sa8;
extern mli::tst::tensor_quantizer test_2_out_memstr_fx16;
extern mli::tst::tensor_quantizer test_2_out_memstr_sa8;
extern mli::tst::tensor_quantizer test_3_out_memstr_fx16;
extern mli::tst::tensor_quantizer test_3_out_memstr_sa8;
extern mli::tst::tensor_quantizer test_4_out_fx16;
extern mli::tst::tensor_quantizer test_4_out_sa8;
extern mli::tst::tensor_quantizer test_5_out_fx16;
extern mli::tst::tensor_quantizer test_5_out_sa8;
extern const mli_permute_cfg test_1_cfg;
extern const mli_permute_cfg test_2_cfg;
extern const mli_permute_cfg test_3_cfg;
extern const mli_permute_cfg test_4_cfg;
extern const mli_permute_cfg test_5_cfg;
static const float input_1_data[] = {12.000000f, 56.000000f, -45.000000f, 13.000000f, -93.000000f, -106.000000f, 111.000000f, 49.000000f, -128.000000f, -5.000000f, 80.000000f, -16.000000f, -121.000000f, -101.000000f, 37.000000f, -76.000000f, -20.000000f, 127.000000f, -17.000000f, 81.000000f, 93.000000f, -27.000000f, 24.000000f, -110.000000f, -51.000000f, 64.000000f, 41.000000f, -85.000000f, 70.000000f, 38.000000f, -38.000000f, 46.000000f, -28.000000f, 80.000000f, -110.000000f, 38.000000f, -49.000000f, -29.000000f, -87.000000f, 71.000000f, -12.000000f, 6.000000f, 9.000000f, -121.000000f, 19.000000f, 71.000000f, 60.000000f, 57.000000f, 102.000000f, 80.000000f, 29.000000f, -43.000000f, 124.000000f, 87.000000f, -36.000000f, 89.000000f, 38.000000f, -99.000000f, -53.000000f, -124.000000f, 29.000000f, -100.000000f, -35.000000f, 92.000000f, -11.000000f, 127.000000f, -124.000000f, -78.000000f, -88.000000f, -36.000000f, 105.000000f, 16.000000f, -118.000000f, 98.000000f, 103.000000f, 62.000000f, 10.000000f, 57.000000f, -22.000000f, -22.000000f, 15.000000f, 88.000000f, -108.000000f, -111.000000f, 19.000000f, 31.000000f, -59.000000f, 84.000000f, -69.000000f, -13.000000f, -99.000000f, 62.000000f, -16.000000f, -21.000000f, -67.000000f, 84.000000f, 3.000000f, 110.000000f, -92.000000f, -121.000000f, -52.000000f, -113.000000f, 77.000000f, -34.000000f, -2.000000f, -102.000000f, 118.000000f, 86.000000f, -46.000000f, 82.000000f, -80.000000f, -22.000000f, 68.000000f, -75.000000f, -54.000000f, 93.000000f, -29.000000f, 47.000000f, 35.000000f, 96.000000f, -27.000000f, -108.000000f, -109.000000f, 33.000000f, -78.000000f, 36.000000f, 78.000000f, 64.000000f, -62.000000f, -75.000000f, -128.000000f, 73.000000f, 85.000000f, 17.000000f, 112.000000f, -15.000000f, 93.000000f, -110.000000f, -90.000000f, -24.000000f, 27.000000f, 42.000000f, -59.000000f, -98.000000f, -105.000000f, -109.000000f, 15.000000f, 57.000000f, -101.000000f, -96.000000f, 41.000000f, -61.000000f, -111.000000f, 103.000000f, -96.000000f, 103.000000f, 47.000000f, -73.000000f, -69.000000f, -18.000000f, -115.000000f, 38.000000f, 54.000000f, 75.000000f, -39.000000f, -86.000000f, 51.000000f, -71.000000f, 18.000000f, -44.000000f, 79.000000f, -103.000000f, -45.000000f, -11.000000f, 14.000000f, -4.000000f, 44.000000f, 26.000000f, -62.000000f, -25.000000f, 23.000000f, -57.000000f, -15.000000f, -19.000000f, 112.000000f, -23.000000f, -78.000000f, 115.000000f, 112.000000f, 104.000000f, -12.000000f, -68.000000f, 84.000000f, 54.000000f, 102.000000f, -88.000000f, 75.000000f, -76.000000f, -79.000000f, -65.000000f, 92.000000f, 13.000000f, 104.000000f, -18.000000f, -47.000000f, -102.000000f, 118.000000f, 103.000000f, -77.000000f, 26.000000f, -33.000000f, 111.000000f, 20.000000f, 99.000000f, 103.000000f, 66.000000f, -42.000000f, -67.000000f, -55.000000f, -104.000000f, -43.000000f, -99.000000f, 23.000000f, -111.000000f, 37.000000f, -71.000000f, 84.000000f, 13.000000f, 108.000000f, -104.000000f, 117.000000f, -110.000000f, -91.000000f, -107.000000f, 43.000000f, -87.000000f, 88.000000f, -116.000000f, -73.000000f, 116.000000f, 32.000000f, -21.000000f, 22.000000f, -28.000000f, 71.000000f, 36.000000f, 118.000000f, 82.000000f, 51.000000f, 114.000000f, -49.000000f, -107.000000f, -29.000000f, -36.000000f, -51.000000f, 101.000000f, -20.000000f, -42.000000f, -45.000000f, 1.000000f, -83.000000f, -93.000000f, -32.000000f, -68.000000f, -67.000000f, -109.000000f, -126.000000f, -70.000000f, 31.000000f, -58.000000f, 70.000000f, 110.000000f, -46.000000f, -22.000000f, -55.000000f, 77.000000f, 66.000000f, -71.000000f, -113.000000f, -17.000000f, 50.000000f, 88.000000f, -32.000000f, 70.000000f, -43.000000f, -60.000000f, -24.000000f, 57.000000f, 102.000000f, -102.000000f, -41.000000f, 103.000000f, 126.000000f, 25.000000f, 105.000000f, 12.000000f, 68.000000f, -59.000000f, -103.000000f, 118.000000f, -43.000000f, 11.000000f, 19.000000f, 25.000000f, -110.000000f, 108.000000f, 76.000000f, -40.000000f, -5.000000f, -17.000000f, 18.000000f, -68.000000f, -84.000000f, -36.000000f, 110.000000f, 13.000000f, -79.000000f, -94.000000f, -101.000000f, -112.000000f, 99.000000f, 73.000000f, 4.000000f, -108.000000f, -63.000000f, 62.000000f, -64.000000f, -95.000000f, 79.000000f, 14.000000f, -5.000000f, -4.000000f, -118.000000f, -125.000000f, 41.000000f, -33.000000f, -67.000000f, 125.000000f, 76.000000f, -99.000000f, 16.000000f, -45.000000f, -17.000000f, 48.000000f, -56.000000f, -61.000000f, 95.000000f, -8.000000f, 104.000000f, 121.000000f, -51.000000f, -94.000000f, 68.000000f, -125.000000f, -68.000000f, 125.000000f, -45.000000f, -81.000000f, -81.000000f, -20.000000f, 51.000000f, 48.000000f, 41.000000f, -96.000000f, -16.000000f, -20.000000f, 68.000000f, 116.000000f, 124.000000f, 46.000000f, 25.000000f, 121.000000f, -98.000000f, 7.000000f, 18.000000f, 7.000000f, -1.000000f, 83.000000f, 108.000000f, 18.000000f, -91.000000f, 123.000000f, 7.000000f, 60.000000f, 80.000000f, -94.000000f, -99.000000f, 20.000000f, 75.000000f, -124.000000f, -40.000000f, -119.000000f, -31.000000f, -27.000000f, -57.000000f, 95.000000f, 68.000000f, 127.000000f, -85.000000f, 90.000000f, 6.000000f, -21.000000f, 103.000000f, 51.000000f, 75.000000f, -23.000000f, -61.000000f, 44.000000f, 83.000000f, 11.000000f, 125.000000f, -120.000000f, -66.000000f, 10.000000f, 2.000000f, 15.000000f, -71.000000f, -52.000000f, -47.000000f, -47.000000f, -105.000000f, 55.000000f, 79.000000f, -46.000000f, -115.000000f, 65.000000f, 111.000000f, 102.000000f, -23.000000f, 99.000000f, 7.000000f, 61.000000f, -89.000000f, 24.000000f, 49.000000f, -126.000000f, -74.000000f, -74.000000f, -76.000000f, 81.000000f, 41.000000f, -101.000000f, 81.000000f, -66.000000f, 26.000000f, 90.000000f, -57.000000f, -105.000000f, -12.000000f, -81.000000f, 35.000000f, -110.000000f, 52.000000f, 19.000000f, 123.000000f, -107.000000f, -79.000000f, -42.000000f, 109.000000f, -27.000000f, 122.000000f, -100.000000f, 78.000000f, 122.000000f, 44.000000f, 19.000000f, -85.000000f, 63.000000f, 107.000000f, 60.000000f, 18.000000f, -54.000000f, 2.000000f, -6.000000f, -70.000000f, 52.000000f, -33.000000f, 17.000000f, 58.000000f, 114.000000f, 86.000000f, -60.000000f, -121.000000f, 126.000000f, -60.000000f, -31.000000f, -12.000000f, -124.000000f, -72.000000f, 50.000000f, 31.000000f, 88.000000f, -63.000000f, -39.000000f, -107.000000f, -96.000000f, -121.000000f, 127.000000f, -37.000000f, -88.000000f, -92.000000f, -9.000000f, 71.000000f, -25.000000f, -60.000000f, -77.000000f, 51.000000f, 40.000000f, 121.000000f, -120.000000f, 75.000000f, -117.000000f};

static const float input_1_scales[] = {0.4677103758f, 0.4637964666f, 0.3933463693f, 0.4853228927f, 0.4911937416f, 0.3894324899f, 0.4677103758f, 0.4011741579f, 0.4696673155f, 0.4187867045f, 0.3796477616f, 0.3776907921f, 0.4305283725f, 0.4344422817f, 0.4559686780f, 0.4403131008f, 0.4618395269f, 0.3933463693f, 0.4481408894f, 0.4344422817f, 0.4383561611f, 0.4383561611f, 0.4892368019f, 0.4344422817f, 0.4911937416f, 0.4794520438f, 0.4422700703f, 0.4227005839f, 0.4559686780f, 0.3894324899f, 0.4892368019f, 0.4853228927f};
static const float input_1_zero_points[] = {-8.5000000000f, 8.5000000000f, -20.5000000000f, 0.0000000000f, 1.5000000000f, -11.5000000000f, -1.5000000000f, -6.5000000000f, -8.0000000000f, -4.0000000000f, -18.0000000000f, 18.5000000000f, 8.0000000000f, 0.0000000000f, 0.5000000000f, 5.5000000000f, -8.0000000000f, -12.5000000000f, 11.5000000000f, -1.0000000000f, -13.0000000000f, 13.0000000000f, 0.0000000000f, 13.0000000000f, 1.5000000000f, 2.5000000000f, -2.0000000000f, -18.0000000000f, 6.5000000000f, 14.5000000000f, 1.0000000000f, 3.0000000000f};
static const int8_t input_1_scales_frac[] = {16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
static const int input_1_sa_dim = 0;

static const int input_1_fx8_frac = 0;

#define INPUT_1_MEMSTR_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {32, 1}, \
    /* .shape = */ {32, 16}, \
    /* .rank =  */ 2


static const mli_tensor input_1_memstr_tsr_fx16 = {
    INPUT_1_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_1_memstr_tsr_sa8 = {
    INPUT_1_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_2_data[] = {0.000000f, 1.000000f, 2.000000f, 3.000000f, 4.000000f, 5.000000f, 6.000000f, 7.000000f, 8.000000f, 9.000000f, 10.000000f, 11.000000f, 12.000000f, 13.000000f, 14.000000f, 15.000000f, 16.000000f, 17.000000f, 18.000000f, 19.000000f, 20.000000f, 21.000000f, 22.000000f, 23.000000f, 24.000000f, 25.000000f, 26.000000f, 27.000000f, 28.000000f, 29.000000f, 30.000000f, 31.000000f, 32.000000f, 33.000000f, 34.000000f, 35.000000f, 36.000000f, 37.000000f, 38.000000f, 39.000000f, 40.000000f, 41.000000f, 42.000000f, 43.000000f, 44.000000f, 45.000000f, 46.000000f, 47.000000f, 48.000000f, 49.000000f, 50.000000f, 51.000000f, 52.000000f, 53.000000f, 54.000000f, 55.000000f, 56.000000f, 57.000000f, 58.000000f, 59.000000f, 60.000000f, 61.000000f, 62.000000f, 63.000000f, 64.000000f, 65.000000f, 66.000000f, 67.000000f, 68.000000f, 69.000000f, 70.000000f, 71.000000f, 72.000000f, 73.000000f, 74.000000f, 75.000000f, 76.000000f, 77.000000f, 78.000000f, 79.000000f, 80.000000f, 81.000000f, 82.000000f, 83.000000f, 84.000000f, 85.000000f, 86.000000f, 87.000000f, 88.000000f, 89.000000f, 90.000000f, 91.000000f, 92.000000f, 93.000000f, 94.000000f, 95.000000f, 96.000000f, 97.000000f, 98.000000f, 99.000000f, 100.000000f, 101.000000f, 102.000000f, 103.000000f, 104.000000f, 105.000000f, 106.000000f, 107.000000f, 108.000000f, 109.000000f, 110.000000f, 111.000000f, 112.000000f, 113.000000f, 114.000000f, 115.000000f, 116.000000f, 117.000000f, 118.000000f, 119.000000f};

static const float input_2_scale = 0.4666666687f;
static const float input_2_zero_point = 59.5000000000f;
static const int8_t input_2_scales_frac[] = {16};
static const int input_2_sa_dim = -1;

static const int input_2_fx8_frac = 0;

#define INPUT_2_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {2, 3, 4, 5}, \
    /* .rank =  */ 4


#define INPUT_2_MEMSTR_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {192, 32, 8, 1}, \
    /* .shape = */ {2, 3, 4, 5}, \
    /* .rank =  */ 4


static const mli_tensor input_2_tsr_fx16 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_2_memstr_tsr_fx16 = {
    INPUT_2_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_2_tsr_sa8 = {
    INPUT_2_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_2_memstr_tsr_sa8 = {
    INPUT_2_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_3_data[] = {1.000000f, 2.000000f, 3.000000f, 4.000000f, 5.000000f, 6.000000f, 7.000000f, 8.000000f, 9.000000f, 10.000000f};

static const float input_3_scale = 0.0352941193f;
static const float input_3_zero_point = 5.5000000000f;
static const int8_t input_3_scales_frac[] = {19};
static const int input_3_sa_dim = -1;

static const int input_3_fx8_frac = 3;

#define INPUT_3_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {10, 1, 1, 1}, \
    /* .rank =  */ 4


static const mli_tensor input_3_tsr_fx16 = {
    INPUT_3_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_3_tsr_sa8 = {
    INPUT_3_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float input_4_data[] = {1.000000f, 2.000000f, 3.000000f, 4.000000f, 5.000000f, 6.000000f, 7.000000f, 8.000000f, 9.000000f, 10.000000f, 11.000000f, 12.000000f, 13.000000f, 14.000000f, 15.000000f, 16.000000f, 17.000000f, 18.000000f, 19.000000f, 20.000000f, 21.000000f, 22.000000f, 23.000000f, 24.000000f, 25.000000f, 26.000000f, 27.000000f, 28.000000f, 29.000000f, 30.000000f, 31.000000f, 32.000000f, 33.000000f, 34.000000f, 35.000000f, 36.000000f, 337.000000f, 38.000000f, 39.000000f, 40.000000f, 41.000000f, 42.000000f, 43.000000f, 44.000000f, 45.000000f, 46.000000f, 47.000000f, 48.000000f, 49.000000f, 50.000000f, 51.000000f, 52.000000f, 53.000000f, 54.000000f, 55.000000f, 56.000000f, 57.000000f, 58.000000f, 59.000000f, 60.000000f};

static const float input_4_scales[] = {0.3220339119f, 5.3559322357f, 0.3220339119f};
static const float input_4_zero_points[] = {10.5000000000f, 179.0000000000f, 50.5000000000f};
static const int8_t input_4_scales_frac[] = {16, 12, 16};
static const int input_4_sa_dim = 0;

static const int input_4_fx8_frac = -2;

#define INPUT_4_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {3, 4, 5}, \
    /* .rank =  */ 3


static const mli_tensor input_4_tsr_fx16 = {
    INPUT_4_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor input_4_tsr_sa8 = {
    INPUT_4_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_1_out_data[] = {12.000000f, -20.000000f, -28.000000f, 102.000000f, -11.000000f, 15.000000f, 3.000000f, 68.000000f, -62.000000f, -105.000000f, -115.000000f, 44.000000f, 84.000000f, -77.000000f, 37.000000f, 32.000000f, -20.000000f, -46.000000f, 102.000000f, -110.000000f, 99.000000f, -67.000000f, 68.000000f, 124.000000f, 80.000000f, 6.000000f, -71.000000f, -89.000000f, -12.000000f, 44.000000f, 86.000000f, -121.000000f, 56.000000f, 127.000000f, 80.000000f, 80.000000f, 127.000000f, 88.000000f, 110.000000f, -75.000000f, -75.000000f, -109.000000f, 38.000000f, 26.000000f, 54.000000f, 26.000000f, -71.000000f, -21.000000f, -42.000000f, -22.000000f, -102.000000f, 108.000000f, 73.000000f, 125.000000f, -125.000000f, 46.000000f, -94.000000f, -21.000000f, -52.000000f, 24.000000f, -81.000000f, 19.000000f, -60.000000f, 127.000000f, -45.000000f, -17.000000f, -110.000000f, 29.000000f, -124.000000f, -108.000000f, -92.000000f, -54.000000f, -128.000000f, 15.000000f, 54.000000f, -62.000000f, 102.000000f, -33.000000f, 84.000000f, 22.000000f, -45.000000f, -55.000000f, -41.000000f, 76.000000f, 4.000000f, 76.000000f, -68.000000f, 25.000000f, -99.000000f, 103.000000f, -47.000000f, 49.000000f, 35.000000f, -85.000000f, -121.000000f, -37.000000f, 13.000000f, 81.000000f, 38.000000f, -43.000000f, -78.000000f, -111.000000f, -121.000000f, 93.000000f, 73.000000f, 57.000000f, 75.000000f, -25.000000f, -88.000000f, 111.000000f, 13.000000f, -28.000000f, 1.000000f, 77.000000f, 103.000000f, -40.000000f, -108.000000f, -99.000000f, 125.000000f, 121.000000f, 20.000000f, 51.000000f, -47.000000f, -126.000000f, -110.000000f, 63.000000f, 126.000000f, -88.000000f, -93.000000f, 93.000000f, -49.000000f, 124.000000f, -88.000000f, 19.000000f, -52.000000f, -29.000000f, 85.000000f, -101.000000f, -39.000000f, 23.000000f, 75.000000f, 20.000000f, 108.000000f, 71.000000f, -83.000000f, 66.000000f, 126.000000f, -5.000000f, -63.000000f, 16.000000f, -45.000000f, -98.000000f, 75.000000f, 75.000000f, -105.000000f, -74.000000f, 52.000000f, 107.000000f, -60.000000f, -92.000000f, -106.000000f, -27.000000f, -29.000000f, 87.000000f, -36.000000f, 31.000000f, -113.000000f, 47.000000f, 17.000000f, -96.000000f, -86.000000f, -57.000000f, -76.000000f, 99.000000f, -104.000000f, 36.000000f, -93.000000f, -71.000000f, 25.000000f, -17.000000f, 62.000000f, -45.000000f, -81.000000f, 7.000000f, -124.000000f, -23.000000f, 55.000000f, -74.000000f, 19.000000f, 60.000000f, -31.000000f, -9.000000f, 111.000000f, 24.000000f, -87.000000f, -36.000000f, 105.000000f, -59.000000f, 77.000000f, 35.000000f, 112.000000f, 41.000000f, 51.000000f, -15.000000f, -79.000000f, 103.000000f, 117.000000f, 118.000000f, -32.000000f, -113.000000f, 105.000000f, 18.000000f, -64.000000f, -17.000000f, -81.000000f, 18.000000f, -40.000000f, -61.000000f, 79.000000f, -76.000000f, 123.000000f, 18.000000f, -12.000000f, 71.000000f, 49.000000f, -110.000000f, 71.000000f, 89.000000f, 16.000000f, 84.000000f, -34.000000f, 96.000000f, -15.000000f, -61.000000f, -71.000000f, -19.000000f, -65.000000f, 66.000000f, -110.000000f, 82.000000f, -68.000000f, -17.000000f, 12.000000f, -68.000000f, -95.000000f, 48.000000f, -20.000000f, 7.000000f, -119.000000f, 44.000000f, -46.000000f, 81.000000f, -107.000000f, -54.000000f, -124.000000f, -25.000000f, -128.000000f, -51.000000f, -12.000000f, 38.000000f, -118.000000f, -69.000000f, -2.000000f, -27.000000f, 93.000000f, -111.000000f, 18.000000f, 112.000000f, 92.000000f, -42.000000f, -91.000000f, 51.000000f, -67.000000f, 50.000000f, 68.000000f, -84.000000f, 79.000000f, -56.000000f, 51.000000f, -1.000000f, -31.000000f, 83.000000f, -115.000000f, 41.000000f, -79.000000f, 2.000000f, -72.000000f, -60.000000f, -5.000000f, 64.000000f, 6.000000f, -99.000000f, 98.000000f, -13.000000f, -102.000000f, -108.000000f, -110.000000f, 103.000000f, -44.000000f, -23.000000f, 13.000000f, -67.000000f, -107.000000f, 114.000000f, -109.000000f, 88.000000f, -59.000000f, -36.000000f, 14.000000f, -61.000000f, 48.000000f, 83.000000f, -27.000000f, 11.000000f, 65.000000f, -101.000000f, -42.000000f, -6.000000f, 50.000000f, -77.000000f, 80.000000f, 41.000000f, 9.000000f, -53.000000f, 103.000000f, -99.000000f, 118.000000f, -109.000000f, -90.000000f, -96.000000f, 79.000000f, -78.000000f, 104.000000f, -55.000000f, 43.000000f, -49.000000f, -126.000000f, -32.000000f, -103.000000f, 110.000000f, -5.000000f, 95.000000f, 41.000000f, 108.000000f, -57.000000f, 125.000000f, 111.000000f, 81.000000f, 109.000000f, -70.000000f, 31.000000f, 51.000000f, -16.000000f, -85.000000f, -121.000000f, -124.000000f, 62.000000f, 62.000000f, 86.000000f, 33.000000f, -24.000000f, 103.000000f, -103.000000f, 115.000000f, -18.000000f, -104.000000f, -87.000000f, -107.000000f, -70.000000f, 70.000000f, 118.000000f, 13.000000f, -4.000000f, -8.000000f, -96.000000f, 18.000000f, 95.000000f, -120.000000f, 102.000000f, -66.000000f, -27.000000f, 52.000000f, 88.000000f, 40.000000f, -121.000000f, 70.000000f, 19.000000f, 29.000000f, 10.000000f, -16.000000f, -46.000000f, -78.000000f, 27.000000f, 47.000000f, -45.000000f, 112.000000f, -47.000000f, -43.000000f, 88.000000f, -29.000000f, 31.000000f, -43.000000f, -43.000000f, -79.000000f, -118.000000f, 104.000000f, -16.000000f, -91.000000f, 68.000000f, -66.000000f, -23.000000f, 26.000000f, 122.000000f, -33.000000f, -63.000000f, 121.000000f, -101.000000f, 38.000000f, 71.000000f, -100.000000f, 57.000000f, -21.000000f, 82.000000f, 36.000000f, 42.000000f, -73.000000f, -11.000000f, 104.000000f, -102.000000f, -99.000000f, -116.000000f, -36.000000f, -58.000000f, -60.000000f, 11.000000f, -94.000000f, -125.000000f, 121.000000f, -20.000000f, 123.000000f, 127.000000f, 10.000000f, 99.000000f, 90.000000f, -100.000000f, 17.000000f, -39.000000f, -120.000000f, 37.000000f, -38.000000f, 60.000000f, -35.000000f, -22.000000f, -67.000000f, -80.000000f, 78.000000f, -59.000000f, -69.000000f, 14.000000f, -12.000000f, 118.000000f, 23.000000f, -73.000000f, -51.000000f, 70.000000f, -24.000000f, 19.000000f, -101.000000f, 41.000000f, -51.000000f, 68.000000f, 7.000000f, -85.000000f, 2.000000f, 7.000000f, -57.000000f, 78.000000f, 58.000000f, -107.000000f, 75.000000f, -76.000000f, 46.000000f, 57.000000f, 92.000000f, -22.000000f, 84.000000f, -22.000000f, 64.000000f, -98.000000f, -18.000000f, -4.000000f, -68.000000f, 103.000000f, -111.000000f, 116.000000f, 101.000000f, 110.000000f, 57.000000f, 25.000000f, -112.000000f, -33.000000f, -94.000000f, 116.000000f, 60.000000f, 90.000000f, 15.000000f, 61.000000f, -105.000000f, 122.000000f, 114.000000f, -96.000000f, -117.000000f};

static const float test_1_out_scales[] = {0.4677103758f, 0.4637964666f, 0.3933463693f, 0.4853228927f, 0.4911937416f, 0.3894324899f, 0.4677103758f, 0.4011741579f, 0.4696673155f, 0.4187867045f, 0.3796477616f, 0.3776907921f, 0.4305283725f, 0.4344422817f, 0.4559686780f, 0.4403131008f, 0.4618395269f, 0.3933463693f, 0.4481408894f, 0.4344422817f, 0.4383561611f, 0.4383561611f, 0.4892368019f, 0.4344422817f, 0.4911937416f, 0.4794520438f, 0.4422700703f, 0.4227005839f, 0.4559686780f, 0.3894324899f, 0.4892368019f, 0.4853228927f};
static const float test_1_out_zero_points[] = {-8.5000000000f, 8.5000000000f, -20.5000000000f, 0.0000000000f, 1.5000000000f, -11.5000000000f, -1.5000000000f, -6.5000000000f, -8.0000000000f, -4.0000000000f, -18.0000000000f, 18.5000000000f, 8.0000000000f, 0.0000000000f, 0.5000000000f, 5.5000000000f, -8.0000000000f, -12.5000000000f, 11.5000000000f, -1.0000000000f, -13.0000000000f, 13.0000000000f, 0.0000000000f, 13.0000000000f, 1.5000000000f, 2.5000000000f, -2.0000000000f, -18.0000000000f, 6.5000000000f, 14.5000000000f, 1.0000000000f, 3.0000000000f};
static const int8_t test_1_out_scales_frac[] = {16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16};
static const int test_1_out_sa_dim = 1;

static const int test_1_out_fx8_frac = 0;

#define TEST_1_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {16, 32}, \
    /* .rank =  */ 2


static const mli_tensor test_1_out_tsr_fx16 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_1_out_tsr_sa8 = {
    TEST_1_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_2_out_data[] = {0.000000f, 60.000000f, 20.000000f, 80.000000f, 40.000000f, 100.000000f, 5.000000f, 65.000000f, 25.000000f, 85.000000f, 45.000000f, 105.000000f, 10.000000f, 70.000000f, 30.000000f, 90.000000f, 50.000000f, 110.000000f, 15.000000f, 75.000000f, 35.000000f, 95.000000f, 55.000000f, 115.000000f, 1.000000f, 61.000000f, 21.000000f, 81.000000f, 41.000000f, 101.000000f, 6.000000f, 66.000000f, 26.000000f, 86.000000f, 46.000000f, 106.000000f, 11.000000f, 71.000000f, 31.000000f, 91.000000f, 51.000000f, 111.000000f, 16.000000f, 76.000000f, 36.000000f, 96.000000f, 56.000000f, 116.000000f, 2.000000f, 62.000000f, 22.000000f, 82.000000f, 42.000000f, 102.000000f, 7.000000f, 67.000000f, 27.000000f, 87.000000f, 47.000000f, 107.000000f, 12.000000f, 72.000000f, 32.000000f, 92.000000f, 52.000000f, 112.000000f, 17.000000f, 77.000000f, 37.000000f, 97.000000f, 57.000000f, 117.000000f, 3.000000f, 63.000000f, 23.000000f, 83.000000f, 43.000000f, 103.000000f, 8.000000f, 68.000000f, 28.000000f, 88.000000f, 48.000000f, 108.000000f, 13.000000f, 73.000000f, 33.000000f, 93.000000f, 53.000000f, 113.000000f, 18.000000f, 78.000000f, 38.000000f, 98.000000f, 58.000000f, 118.000000f, 4.000000f, 64.000000f, 24.000000f, 84.000000f, 44.000000f, 104.000000f, 9.000000f, 69.000000f, 29.000000f, 89.000000f, 49.000000f, 109.000000f, 14.000000f, 74.000000f, 34.000000f, 94.000000f, 54.000000f, 114.000000f, 19.000000f, 79.000000f, 39.000000f, 99.000000f, 59.000000f, 119.000000f};

static const float test_2_out_scale = 0.4666666687f;
static const float test_2_out_zero_point = 59.5000000000f;
static const int8_t test_2_out_scales_frac[] = {16};
static const int test_2_out_sa_dim = -1;

static const int test_2_out_fx8_frac = 0;

#define TEST_2_OUT_MEMSTR_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {96, 12, 4, 1}, \
    /* .shape = */ {5, 4, 3, 2}, \
    /* .rank =  */ 4


static const mli_tensor test_2_out_memstr_tsr_fx16 = {
    TEST_2_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_2_out_memstr_tsr_sa8 = {
    TEST_2_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_3_out_data[] = {0.000000f, 5.000000f, 10.000000f, 15.000000f, 1.000000f, 6.000000f, 11.000000f, 16.000000f, 2.000000f, 7.000000f, 12.000000f, 17.000000f, 3.000000f, 8.000000f, 13.000000f, 18.000000f, 4.000000f, 9.000000f, 14.000000f, 19.000000f, 60.000000f, 65.000000f, 70.000000f, 75.000000f, 61.000000f, 66.000000f, 71.000000f, 76.000000f, 62.000000f, 67.000000f, 72.000000f, 77.000000f, 63.000000f, 68.000000f, 73.000000f, 78.000000f, 64.000000f, 69.000000f, 74.000000f, 79.000000f, 20.000000f, 25.000000f, 30.000000f, 35.000000f, 21.000000f, 26.000000f, 31.000000f, 36.000000f, 22.000000f, 27.000000f, 32.000000f, 37.000000f, 23.000000f, 28.000000f, 33.000000f, 38.000000f, 24.000000f, 29.000000f, 34.000000f, 39.000000f, 80.000000f, 85.000000f, 90.000000f, 95.000000f, 81.000000f, 86.000000f, 91.000000f, 96.000000f, 82.000000f, 87.000000f, 92.000000f, 97.000000f, 83.000000f, 88.000000f, 93.000000f, 98.000000f, 84.000000f, 89.000000f, 94.000000f, 99.000000f, 40.000000f, 45.000000f, 50.000000f, 55.000000f, 41.000000f, 46.000000f, 51.000000f, 56.000000f, 42.000000f, 47.000000f, 52.000000f, 57.000000f, 43.000000f, 48.000000f, 53.000000f, 58.000000f, 44.000000f, 49.000000f, 54.000000f, 59.000000f, 100.000000f, 105.000000f, 110.000000f, 115.000000f, 101.000000f, 106.000000f, 111.000000f, 116.000000f, 102.000000f, 107.000000f, 112.000000f, 117.000000f, 103.000000f, 108.000000f, 113.000000f, 118.000000f, 104.000000f, 109.000000f, 114.000000f, 119.000000f};

static const float test_3_out_scale = 0.4666666687f;
static const float test_3_out_zero_point = 59.5000000000f;
static const int8_t test_3_out_scales_frac[] = {16};
static const int test_3_out_sa_dim = -1;

static const int test_3_out_fx8_frac = 0;

#define TEST_3_OUT_MEMSTR_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {80, 40, 4, 1}, \
    /* .shape = */ {3, 2, 5, 4}, \
    /* .rank =  */ 4


static const mli_tensor test_3_out_memstr_tsr_fx16 = {
    TEST_3_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_3_out_memstr_tsr_sa8 = {
    TEST_3_OUT_MEMSTR_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_4_out_data[] = {1.000000f, 2.000000f, 3.000000f, 4.000000f, 5.000000f, 6.000000f, 7.000000f, 8.000000f, 9.000000f, 10.000000f};

static const float test_4_out_scale = 0.0352941193f;
static const float test_4_out_zero_point = 5.5000000000f;
static const int8_t test_4_out_scales_frac[] = {19};
static const int test_4_out_sa_dim = -1;

static const int test_4_out_fx8_frac = 3;

#define TEST_4_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {1, 1, 1, 10}, \
    /* .rank =  */ 4


static const mli_tensor test_4_out_tsr_fx16 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_4_out_tsr_sa8 = {
    TEST_4_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

static const float test_5_out_data[] = {1.000000f, 2.000000f, 3.000000f, 4.000000f, 5.000000f, 21.000000f, 22.000000f, 23.000000f, 24.000000f, 25.000000f, 41.000000f, 42.000000f, 43.000000f, 44.000000f, 45.000000f, 6.000000f, 7.000000f, 8.000000f, 9.000000f, 10.000000f, 26.000000f, 27.000000f, 28.000000f, 29.000000f, 30.000000f, 46.000000f, 47.000000f, 48.000000f, 49.000000f, 50.000000f, 11.000000f, 12.000000f, 13.000000f, 14.000000f, 15.000000f, 31.000000f, 32.000000f, 33.000000f, 34.000000f, 35.000000f, 51.000000f, 52.000000f, 53.000000f, 54.000000f, 55.000000f, 16.000000f, 17.000000f, 18.000000f, 19.000000f, 20.000000f, 36.000000f, 337.000000f, 38.000000f, 39.000000f, 40.000000f, 56.000000f, 57.000000f, 58.000000f, 59.000000f, 60.000000f};

static const float test_5_out_scales[] = {0.3220339119f, 5.3559322357f, 0.3220339119f};
static const float test_5_out_zero_points[] = {10.5000000000f, 179.0000000000f, 50.5000000000f};
static const int8_t test_5_out_scales_frac[] = {16, 12, 16};
static const int test_5_out_sa_dim = 1;

static const int test_5_out_fx8_frac = -2;

#define TEST_5_OUT_TSR_SHARED_DESCR \
    /* .data = */ { 0 },\
    /* .mem_stride = */ {0}, \
    /* .shape = */ {4, 3, 5}, \
    /* .rank =  */ 3


static const mli_tensor test_5_out_tsr_fx16 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_FX_16,
    /* .el_params = */ { 0 }
};


static const mli_tensor test_5_out_tsr_sa8 = {
    TEST_5_OUT_TSR_SHARED_DESCR,

    /* .el_type = */ MLI_EL_SA_8,
    /* .el_params = */ { 0 }
};

tensor_quantizer input_1_memstr_fx16(input_1_memstr_tsr_fx16, input_1_fx8_frac + 8, input_1_data, sizeof(input_1_data) / sizeof(input_1_data[0]));
tensor_quantizer input_1_memstr_sa8(input_1_memstr_tsr_sa8, input_1_sa_dim, input_1_data, 
sizeof(input_1_data) / sizeof(input_1_data[0]), input_1_scales, sizeof(input_1_scales) / sizeof(input_1_scales[0]), 
input_1_zero_points, sizeof(input_1_zero_points) / sizeof(input_1_zero_points[0]), 
input_1_scales_frac, sizeof(input_1_scales_frac) / sizeof(input_1_scales_frac[0]));

tensor_quantizer input_2_fx16(input_2_tsr_fx16, input_2_fx8_frac + 8, input_2_data, sizeof(input_2_data) / sizeof(input_2_data[0]));
tensor_quantizer input_2_memstr_fx16(input_2_tsr_fx16, input_2_fx8_frac + 8, input_2_data, sizeof(input_2_data) / sizeof(input_2_data[0]));
tensor_quantizer input_2_sa8(input_2_tsr_sa8, input_2_sa_dim, input_2_data, 
sizeof(input_2_data) / sizeof(input_2_data[0]), &input_2_scale, 1, &input_2_zero_point, 1, input_2_scales_frac, 1);
tensor_quantizer input_2_memstr_sa8(input_2_tsr_sa8, input_2_sa_dim, input_2_data, 
sizeof(input_2_data) / sizeof(input_2_data[0]), &input_2_scale, 1, &input_2_zero_point, 1, input_2_scales_frac, 1);

tensor_quantizer input_3_fx16(input_3_tsr_fx16, input_3_fx8_frac + 8, input_3_data, sizeof(input_3_data) / sizeof(input_3_data[0]));
tensor_quantizer input_3_sa8(input_3_tsr_sa8, input_3_sa_dim, input_3_data, 
sizeof(input_3_data) / sizeof(input_3_data[0]), &input_3_scale, 1, &input_3_zero_point, 1, input_3_scales_frac, 1);

tensor_quantizer input_4_fx16(input_4_tsr_fx16, input_4_fx8_frac + 8, input_4_data, sizeof(input_4_data) / sizeof(input_4_data[0]));
tensor_quantizer input_4_sa8(input_4_tsr_sa8, input_4_sa_dim, input_4_data, 
sizeof(input_4_data) / sizeof(input_4_data[0]), input_4_scales, sizeof(input_4_scales) / sizeof(input_4_scales[0]), 
input_4_zero_points, sizeof(input_4_zero_points) / sizeof(input_4_zero_points[0]), 
input_4_scales_frac, sizeof(input_4_scales_frac) / sizeof(input_4_scales_frac[0]));

tensor_quantizer test_1_out_fx16(test_1_out_tsr_fx16, test_1_out_fx8_frac + 8, test_1_out_data, sizeof(test_1_out_data) / sizeof(test_1_out_data[0]));
tensor_quantizer test_1_out_sa8(test_1_out_tsr_sa8, test_1_out_sa_dim, test_1_out_data, 
sizeof(test_1_out_data) / sizeof(test_1_out_data[0]), test_1_out_scales, sizeof(test_1_out_scales) / sizeof(test_1_out_scales[0]), 
test_1_out_zero_points, sizeof(test_1_out_zero_points) / sizeof(test_1_out_zero_points[0]), 
test_1_out_scales_frac, sizeof(test_1_out_scales_frac) / sizeof(test_1_out_scales_frac[0]));

tensor_quantizer test_2_out_memstr_fx16(test_2_out_memstr_tsr_fx16, test_2_out_fx8_frac + 8, test_2_out_data, sizeof(test_2_out_data) / sizeof(test_2_out_data[0]));
tensor_quantizer test_2_out_memstr_sa8(test_2_out_memstr_tsr_sa8, test_2_out_sa_dim, test_2_out_data, 
sizeof(test_2_out_data) / sizeof(test_2_out_data[0]), &test_2_out_scale, 1, &test_2_out_zero_point, 1, test_2_out_scales_frac, 1);

tensor_quantizer test_3_out_memstr_fx16(test_3_out_memstr_tsr_fx16, test_3_out_fx8_frac + 8, test_3_out_data, sizeof(test_3_out_data) / sizeof(test_3_out_data[0]));
tensor_quantizer test_3_out_memstr_sa8(test_3_out_memstr_tsr_sa8, test_3_out_sa_dim, test_3_out_data, 
sizeof(test_3_out_data) / sizeof(test_3_out_data[0]), &test_3_out_scale, 1, &test_3_out_zero_point, 1, test_3_out_scales_frac, 1);

tensor_quantizer test_4_out_fx16(test_4_out_tsr_fx16, test_4_out_fx8_frac + 8, test_4_out_data, sizeof(test_4_out_data) / sizeof(test_4_out_data[0]));
tensor_quantizer test_4_out_sa8(test_4_out_tsr_sa8, test_4_out_sa_dim, test_4_out_data, 
sizeof(test_4_out_data) / sizeof(test_4_out_data[0]), &test_4_out_scale, 1, &test_4_out_zero_point, 1, test_4_out_scales_frac, 1);

tensor_quantizer test_5_out_fx16(test_5_out_tsr_fx16, test_5_out_fx8_frac + 8, test_5_out_data, sizeof(test_5_out_data) / sizeof(test_5_out_data[0]));
tensor_quantizer test_5_out_sa8(test_5_out_tsr_sa8, test_5_out_sa_dim, test_5_out_data, 
sizeof(test_5_out_data) / sizeof(test_5_out_data[0]), test_5_out_scales, sizeof(test_5_out_scales) / sizeof(test_5_out_scales[0]), 
test_5_out_zero_points, sizeof(test_5_out_zero_points) / sizeof(test_5_out_zero_points[0]), 
test_5_out_scales_frac, sizeof(test_5_out_scales_frac) / sizeof(test_5_out_scales_frac[0]));

const mli_permute_cfg test_1_cfg = {/* .perm_dim = */{1, 0}};
const mli_permute_cfg test_2_cfg = {/* .perm_dim = */{3, 2, 1, 0}};
const mli_permute_cfg test_3_cfg = {/* .perm_dim = */{1, 0, 3, 2}};
const mli_permute_cfg test_4_cfg = {/* .perm_dim = */{1, 2, 3, 0}};
const mli_permute_cfg test_5_cfg = {/* .perm_dim = */{1, 0, 2}};
